{
  "task_name": "error_feedback_swebench.psf__requests-2678_SWE-agent-gpt-4o-2024-05-13",
  "goal": "diff --git a/requests/adapters.py b/requests/adapters.py\n--- a/requests/adapters.py\n+++ b/requests/adapters.py\n@@ -19,6 +19,7 @@\n from .utils import (DEFAULT_CA_BUNDLE_PATH, get_encoding_from_headers,\n                     prepend_scheme_if_needed, get_auth_from_url, urldefragauth)\n from .structures import CaseInsensitiveDict\n+from .packages.urllib3.exceptions import ClosedPoolError\n from .packages.urllib3.exceptions import ConnectTimeoutError\n from .packages.urllib3.exceptions import HTTPError as _HTTPError\n from .packages.urllib3.exceptions import MaxRetryError\n@@ -421,6 +422,9 @@ def send(self, request, stream=False, timeout=None, verify=True, cert=None, prox\n \n             raise ConnectionError(e, request=request)\n \n+        except ClosedPoolError as e:\n+            raise ConnectionError(e, request=request)\n+\n         except _ProxyError as e:\n             raise ProxyError(e)\n \ndiff --git a/requests/auth.py b/requests/auth.py\n--- a/requests/auth.py\n+++ b/requests/auth.py\n@@ -11,6 +11,7 @@\n import re\n import time\n import hashlib\n+import threading\n \n from base64 import b64encode\n \n@@ -63,19 +64,26 @@ class HTTPDigestAuth(AuthBase):\n     def __init__(self, username, password):\n         self.username = username\n         self.password = password\n-        self.last_nonce = ''\n-        self.nonce_count = 0\n-        self.chal = {}\n-        self.pos = None\n-        self.num_401_calls = 1\n+        # Keep state in per-thread local storage\n+        self._thread_local = threading.local()\n+\n+    def init_per_thread_state(self):\n+        # Ensure state is initialized just once per-thread\n+        if not hasattr(self._thread_local, 'init'):\n+            self._thread_local.init = True\n+            self._thread_local.last_nonce = ''\n+            self._thread_local.nonce_count = 0\n+            self._thread_local.chal = {}\n+            self._thread_local.pos = None\n+            self._thread_local.num_401_calls = None\n \n     def build_digest_header(self, method, url):\n \n-        realm = self.chal['realm']\n-        nonce = self.chal['nonce']\n-        qop = self.chal.get('qop')\n-        algorithm = self.chal.get('algorithm')\n-        opaque = self.chal.get('opaque')\n+        realm = self._thread_local.chal['realm']\n+        nonce = self._thread_local.chal['nonce']\n+        qop = self._thread_local.chal.get('qop')\n+        algorithm = self._thread_local.chal.get('algorithm')\n+        opaque = self._thread_local.chal.get('opaque')\n \n         if algorithm is None:\n             _algorithm = 'MD5'\n@@ -114,12 +122,12 @@ def sha_utf8(x):\n         HA1 = hash_utf8(A1)\n         HA2 = hash_utf8(A2)\n \n-        if nonce == self.last_nonce:\n-            self.nonce_count += 1\n+        if nonce == self._thread_local.last_nonce:\n+            self._thread_local.nonce_count += 1\n         else:\n-            self.nonce_count = 1\n-        ncvalue = '%08x' % self.nonce_count\n-        s = str(self.nonce_count).encode('utf-8')\n+            self._thread_local.nonce_count = 1\n+        ncvalue = '%08x' % self._thread_local.nonce_count\n+        s = str(self._thread_local.nonce_count).encode('utf-8')\n         s += nonce.encode('utf-8')\n         s += time.ctime().encode('utf-8')\n         s += os.urandom(8)\n@@ -139,7 +147,7 @@ def sha_utf8(x):\n             # XXX handle auth-int.\n             return None\n \n-        self.last_nonce = nonce\n+        self._thread_local.last_nonce = nonce\n \n         # XXX should the partial digests be encoded too?\n         base = 'username=\"%s\", realm=\"%s\", nonce=\"%s\", uri=\"%s\", ' \\\n@@ -158,23 +166,22 @@ def sha_utf8(x):\n     def handle_redirect(self, r, **kwargs):\n         \"\"\"Reset num_401_calls counter on redirects.\"\"\"\n         if r.is_redirect:\n-            self.num_401_calls = 1\n+            self._thread_local.num_401_calls = 1\n \n     def handle_401(self, r, **kwargs):\n         \"\"\"Takes the given response and tries digest-auth, if needed.\"\"\"\n \n-        if self.pos is not None:\n+        if self._thread_local.pos is not None:\n             # Rewind the file position indicator of the body to where\n             # it was to resend the request.\n-            r.request.body.seek(self.pos)\n-        num_401_calls = getattr(self, 'num_401_calls', 1)\n+            r.request.body.seek(self._thread_local.pos)\n         s_auth = r.headers.get('www-authenticate', '')\n \n-        if 'digest' in s_auth.lower() and num_401_calls < 2:\n+        if 'digest' in s_auth.lower() and self._thread_local.num_401_calls < 2:\n \n-            self.num_401_calls += 1\n+            self._thread_local.num_401_calls += 1\n             pat = re.compile(r'digest ', flags=re.IGNORECASE)\n-            self.chal = parse_dict_header(pat.sub('', s_auth, count=1))\n+            self._thread_local.chal = parse_dict_header(pat.sub('', s_auth, count=1))\n \n             # Consume content and release the original connection\n             # to allow our new request to reuse the same one.\n@@ -192,21 +199,25 @@ def handle_401(self, r, **kwargs):\n \n             return _r\n \n-        self.num_401_calls = 1\n+        self._thread_local.num_401_calls = 1\n         return r\n \n     def __call__(self, r):\n+        # Initialize per-thread state, if needed\n+        self.init_per_thread_state()\n         # If we have a saved nonce, skip the 401\n-        if self.last_nonce:\n+        if self._thread_local.last_nonce:\n             r.headers['Authorization'] = self.build_digest_header(r.method, r.url)\n         try:\n-            self.pos = r.body.tell()\n+            self._thread_local.pos = r.body.tell()\n         except AttributeError:\n             # In the case of HTTPDigestAuth being reused and the body of\n             # the previous request was a file-like object, pos has the\n             # file position of the previous body. Ensure it's set to\n             # None.\n-            self.pos = None\n+            self._thread_local.pos = None\n         r.register_hook('response', self.handle_401)\n         r.register_hook('response', self.handle_redirect)\n+        self._thread_local.num_401_calls = 1\n+\n         return r\ndiff --git a/requests/packages/__init__.py b/requests/packages/__init__.py\n--- a/requests/packages/__init__.py\n+++ b/requests/packages/__init__.py\n@@ -1,3 +1,36 @@\n+'''\n+Debian and other distributions \"unbundle\" requests' vendored dependencies, and\n+rewrite all imports to use the global versions of ``urllib3`` and ``chardet``.\n+The problem with this is that not only requests itself imports those\n+dependencies, but third-party code outside of the distros' control too.\n+\n+In reaction to these problems, the distro maintainers replaced\n+``requests.packages`` with a magical \"stub module\" that imports the correct\n+modules. The implementations were varying in quality and all had severe\n+problems. For example, a symlink (or hardlink) that links the correct modules\n+into place introduces problems regarding object identity, since you now have\n+two modules in `sys.modules` with the same API, but different identities::\n+\n+    requests.packages.urllib3 is not urllib3\n+\n+With version ``2.5.2``, requests started to maintain its own stub, so that\n+distro-specific breakage would be reduced to a minimum, even though the whole\n+issue is not requests' fault in the first place. See\n+https://github.com/kennethreitz/requests/pull/2375 for the corresponding pull\n+request.\n+'''\n+\n from __future__ import absolute_import\n+import sys\n+\n+try:\n+    from . import urllib3\n+except ImportError:\n+    import urllib3\n+    sys.modules['%s.urllib3' % __name__] = urllib3\n \n-from . import urllib3\n+try:\n+    from . import chardet\n+except ImportError:\n+    import chardet\n+    sys.modules['%s.chardet' % __name__] = chardet\ndiff --git a/requests/packages/urllib3/__init__.py b/requests/packages/urllib3/__init__.py\n--- a/requests/packages/urllib3/__init__.py\n+++ b/requests/packages/urllib3/__init__.py\n@@ -4,7 +4,7 @@\n \n __author__ = 'Andrey Petrov (andrey.petrov@shazow.net)'\n __license__ = 'MIT'\n-__version__ = '1.10.4'\n+__version__ = 'dev'\n \n \n from .connectionpool import (\n@@ -58,6 +58,8 @@ def add_stderr_logger(level=logging.DEBUG):\n import warnings\n # SecurityWarning's always go off by default.\n warnings.simplefilter('always', exceptions.SecurityWarning, append=True)\n+# SubjectAltNameWarning's should go off once per host\n+warnings.simplefilter('default', exceptions.SubjectAltNameWarning)\n # InsecurePlatformWarning's don't vary between requests, so we keep it default.\n warnings.simplefilter('default', exceptions.InsecurePlatformWarning,\n                       append=True)\ndiff --git a/requests/packages/urllib3/connection.py b/requests/packages/urllib3/connection.py\n--- a/requests/packages/urllib3/connection.py\n+++ b/requests/packages/urllib3/connection.py\n@@ -38,7 +38,7 @@ class ConnectionError(Exception):\n from .exceptions import (\n     ConnectTimeoutError,\n     SystemTimeWarning,\n-    SecurityWarning,\n+    SubjectAltNameWarning,\n )\n from .packages.ssl_match_hostname import match_hostname\n \n@@ -192,6 +192,9 @@ def set_cert(self, key_file=None, cert_file=None,\n                  cert_reqs=None, ca_certs=None,\n                  assert_hostname=None, assert_fingerprint=None):\n \n+        if ca_certs and cert_reqs is None:\n+            cert_reqs = 'CERT_REQUIRED'\n+\n         self.key_file = key_file\n         self.cert_file = cert_file\n         self.cert_reqs = cert_reqs\n@@ -245,10 +248,11 @@ def connect(self):\n             cert = self.sock.getpeercert()\n             if not cert.get('subjectAltName', ()):\n                 warnings.warn((\n-                    'Certificate has no `subjectAltName`, falling back to check for a `commonName` for now. '\n-                    'This feature is being removed by major browsers and deprecated by RFC 2818. '\n-                    '(See https://github.com/shazow/urllib3/issues/497 for details.)'),\n-                    SecurityWarning\n+                    'Certificate for {0} has no `subjectAltName`, falling back to check for a '\n+                    '`commonName` for now. This feature is being removed by major browsers and '\n+                    'deprecated by RFC 2818. (See https://github.com/shazow/urllib3/issues/497 '\n+                    'for details.)'.format(hostname)),\n+                    SubjectAltNameWarning\n                 )\n             match_hostname(cert, self.assert_hostname or hostname)\n \ndiff --git a/requests/packages/urllib3/connectionpool.py b/requests/packages/urllib3/connectionpool.py\n--- a/requests/packages/urllib3/connectionpool.py\n+++ b/requests/packages/urllib3/connectionpool.py\n@@ -17,6 +17,7 @@\n     ClosedPoolError,\n     ProtocolError,\n     EmptyPoolError,\n+    HeaderParsingError,\n     HostChangedError,\n     LocationValueError,\n     MaxRetryError,\n@@ -38,9 +39,10 @@\n from .response import HTTPResponse\n \n from .util.connection import is_connection_dropped\n+from .util.response import assert_header_parsing\n from .util.retry import Retry\n from .util.timeout import Timeout\n-from .util.url import get_host\n+from .util.url import get_host, Url\n \n \n xrange = six.moves.xrange\n@@ -120,7 +122,7 @@ class HTTPConnectionPool(ConnectionPool, RequestMethods):\n \n     :param maxsize:\n         Number of connections to save that can be reused. More than 1 is useful\n-        in multithreaded situations. If ``block`` is set to false, more\n+        in multithreaded situations. If ``block`` is set to False, more\n         connections will be created but they will not be saved once they've\n         been used.\n \n@@ -381,8 +383,19 @@ def _make_request(self, conn, method, url, timeout=_Default,\n         log.debug(\"\\\"%s %s %s\\\" %s %s\" % (method, url, http_version,\n                                           httplib_response.status,\n                                           httplib_response.length))\n+\n+        try:\n+            assert_header_parsing(httplib_response.msg)\n+        except HeaderParsingError as hpe:  # Platform-specific: Python 3\n+            log.warning(\n+                'Failed to parse headers (url=%s): %s',\n+                self._absolute_url(url), hpe, exc_info=True)\n+\n         return httplib_response\n \n+    def _absolute_url(self, path):\n+        return Url(scheme=self.scheme, host=self.host, port=self.port, path=path).url\n+\n     def close(self):\n         \"\"\"\n         Close all pooled connections and disable the pool.\n@@ -409,7 +422,7 @@ def is_same_host(self, url):\n \n         # TODO: Add optional support for socket.gethostbyname checking.\n         scheme, host, port = get_host(url)\n-\n+ \n         # Use explicit default port for comparison when none is given\n         if self.port and not port:\n             port = port_by_scheme.get(scheme)\n@@ -568,25 +581,22 @@ def urlopen(self, method, url, body=None, headers=None, retries=None,\n             # Close the connection. If a connection is reused on which there\n             # was a Certificate error, the next request will certainly raise\n             # another Certificate error.\n-            if conn:\n-                conn.close()\n-                conn = None\n+            conn = conn and conn.close()\n+            release_conn = True\n             raise SSLError(e)\n \n         except SSLError:\n             # Treat SSLError separately from BaseSSLError to preserve\n             # traceback.\n-            if conn:\n-                conn.close()\n-                conn = None\n+            conn = conn and conn.close()\n+            release_conn = True\n             raise\n \n         except (TimeoutError, HTTPException, SocketError, ConnectionError) as e:\n-            if conn:\n-                # Discard the connection for these exceptions. It will be\n-                # be replaced during the next _get_conn() call.\n-                conn.close()\n-                conn = None\n+            # Discard the connection for these exceptions. It will be\n+            # be replaced during the next _get_conn() call.\n+            conn = conn and conn.close()\n+            release_conn = True\n \n             if isinstance(e, SocketError) and self.proxy:\n                 e = ProxyError('Cannot connect to proxy.', e)\n@@ -626,6 +636,9 @@ def urlopen(self, method, url, body=None, headers=None, retries=None,\n                 retries = retries.increment(method, url, response=response, _pool=self)\n             except MaxRetryError:\n                 if retries.raise_on_redirect:\n+                    # Release the connection for this response, since we're not\n+                    # returning it to be released manually.\n+                    response.release_conn()\n                     raise\n                 return response\n \n@@ -683,6 +696,10 @@ def __init__(self, host, port=None,\n         HTTPConnectionPool.__init__(self, host, port, strict, timeout, maxsize,\n                                     block, headers, retries, _proxy, _proxy_headers,\n                                     **conn_kw)\n+\n+        if ca_certs and cert_reqs is None:\n+            cert_reqs = 'CERT_REQUIRED'\n+\n         self.key_file = key_file\n         self.cert_file = cert_file\n         self.cert_reqs = cert_reqs\ndiff --git a/requests/packages/urllib3/contrib/appengine.py b/requests/packages/urllib3/contrib/appengine.py\nnew file mode 100644\n--- /dev/null\n+++ b/requests/packages/urllib3/contrib/appengine.py\n@@ -0,0 +1,222 @@\n+import logging\n+import os\n+import warnings\n+\n+from ..exceptions import (\n+    HTTPError,\n+    HTTPWarning,\n+    MaxRetryError,\n+    ProtocolError,\n+    TimeoutError,\n+    SSLError\n+)\n+\n+from ..packages.six import BytesIO\n+from ..request import RequestMethods\n+from ..response import HTTPResponse\n+from ..util.timeout import Timeout\n+from ..util.retry import Retry\n+\n+try:\n+    from google.appengine.api import urlfetch\n+except ImportError:\n+    urlfetch = None\n+\n+\n+log = logging.getLogger(__name__)\n+\n+\n+class AppEnginePlatformWarning(HTTPWarning):\n+    pass\n+\n+\n+class AppEnginePlatformError(HTTPError):\n+    pass\n+\n+\n+class AppEngineManager(RequestMethods):\n+    \"\"\"\n+    Connection manager for Google App Engine sandbox applications.\n+\n+    This manager uses the URLFetch service directly instead of using the\n+    emulated httplib, and is subject to URLFetch limitations as described in\n+    the App Engine documentation here:\n+\n+        https://cloud.google.com/appengine/docs/python/urlfetch\n+\n+    Notably it will raise an AppEnginePlatformError if:\n+        * URLFetch is not available.\n+        * If you attempt to use this on GAEv2 (Managed VMs), as full socket\n+          support is available.\n+        * If a request size is more than 10 megabytes.\n+        * If a response size is more than 32 megabtyes.\n+        * If you use an unsupported request method such as OPTIONS.\n+\n+    Beyond those cases, it will raise normal urllib3 errors.\n+    \"\"\"\n+\n+    def __init__(self, headers=None, retries=None, validate_certificate=True):\n+        if not urlfetch:\n+            raise AppEnginePlatformError(\n+                \"URLFetch is not available in this environment.\")\n+\n+        if is_prod_appengine_v2():\n+            raise AppEnginePlatformError(\n+                \"Use normal urllib3.PoolManager instead of AppEngineManager\"\n+                \"on Managed VMs, as using URLFetch is not necessary in \"\n+                \"this environment.\")\n+\n+        warnings.warn(\n+            \"urllib3 is using URLFetch on Google App Engine sandbox instead \"\n+            \"of sockets. To use sockets directly instead of URLFetch see \"\n+            \"https://urllib3.readthedocs.org/en/latest/contrib.html.\",\n+            AppEnginePlatformWarning)\n+\n+        RequestMethods.__init__(self, headers)\n+        self.validate_certificate = validate_certificate\n+\n+        self.retries = retries or Retry.DEFAULT\n+\n+    def __enter__(self):\n+        return self\n+\n+    def __exit__(self, exc_type, exc_val, exc_tb):\n+        # Return False to re-raise any potential exceptions\n+        return False\n+\n+    def urlopen(self, method, url, body=None, headers=None,\n+                retries=None, redirect=True, timeout=Timeout.DEFAULT_TIMEOUT,\n+                **response_kw):\n+\n+        retries = self._get_retries(retries, redirect)\n+\n+        try:\n+            response = urlfetch.fetch(\n+                url,\n+                payload=body,\n+                method=method,\n+                headers=headers or {},\n+                allow_truncated=False,\n+                follow_redirects=(\n+                    redirect and\n+                    retries.redirect != 0 and\n+                    retries.total),\n+                deadline=self._get_absolute_timeout(timeout),\n+                validate_certificate=self.validate_certificate,\n+            )\n+        except urlfetch.DeadlineExceededError as e:\n+            raise TimeoutError(self, e)\n+\n+        except urlfetch.InvalidURLError as e:\n+            if 'too large' in e.message:\n+                raise AppEnginePlatformError(\n+                    \"URLFetch request too large, URLFetch only \"\n+                    \"supports requests up to 10mb in size.\", e)\n+            raise ProtocolError(e)\n+\n+        except urlfetch.DownloadError as e:\n+            if 'Too many redirects' in e.message:\n+                raise MaxRetryError(self, url, reason=e)\n+            raise ProtocolError(e)\n+\n+        except urlfetch.ResponseTooLargeError as e:\n+            raise AppEnginePlatformError(\n+                \"URLFetch response too large, URLFetch only supports\"\n+                \"responses up to 32mb in size.\", e)\n+\n+        except urlfetch.SSLCertificateError as e:\n+            raise SSLError(e)\n+\n+        except urlfetch.InvalidMethodError as e:\n+            raise AppEnginePlatformError(\n+                \"URLFetch does not support method: %s\" % method, e)\n+\n+        http_response = self._urlfetch_response_to_http_response(\n+            response, **response_kw)\n+\n+        # Check for redirect response\n+        if (http_response.get_redirect_location() and\n+                retries.raise_on_redirect and redirect):\n+            raise MaxRetryError(self, url, \"too many redirects\")\n+\n+        # Check if we should retry the HTTP response.\n+        if retries.is_forced_retry(method, status_code=http_response.status):\n+            retries = retries.increment(\n+                method, url, response=http_response, _pool=self)\n+            log.info(\"Forced retry: %s\" % url)\n+            retries.sleep()\n+            return self.urlopen(\n+                method, url,\n+                body=body, headers=headers,\n+                retries=retries, redirect=redirect,\n+                timeout=timeout, **response_kw)\n+\n+        return http_response\n+\n+    def _urlfetch_response_to_http_response(self, urlfetch_resp, **response_kw):\n+\n+        if is_prod_appengine_v1():\n+            # Production GAE handles deflate encoding automatically, but does\n+            # not remove the encoding header.\n+            content_encoding = urlfetch_resp.headers.get('content-encoding')\n+\n+            if content_encoding == 'deflate':\n+                del urlfetch_resp.headers['content-encoding']\n+\n+        return HTTPResponse(\n+            # In order for decoding to work, we must present the content as\n+            # a file-like object.\n+            body=BytesIO(urlfetch_resp.content),\n+            headers=urlfetch_resp.headers,\n+            status=urlfetch_resp.status_code,\n+            **response_kw\n+        )\n+\n+    def _get_absolute_timeout(self, timeout):\n+        if timeout is Timeout.DEFAULT_TIMEOUT:\n+            return 5  # 5s is the default timeout for URLFetch.\n+        if isinstance(timeout, Timeout):\n+            if not timeout.read is timeout.connect:\n+                warnings.warn(\n+                    \"URLFetch does not support granular timeout settings, \"\n+                    \"reverting to total timeout.\", AppEnginePlatformWarning)\n+            return timeout.total\n+        return timeout\n+\n+    def _get_retries(self, retries, redirect):\n+        if not isinstance(retries, Retry):\n+            retries = Retry.from_int(\n+                retries, redirect=redirect, default=self.retries)\n+\n+        if retries.connect or retries.read or retries.redirect:\n+            warnings.warn(\n+                \"URLFetch only supports total retries and does not \"\n+                \"recognize connect, read, or redirect retry parameters.\",\n+                AppEnginePlatformWarning)\n+\n+        return retries\n+\n+\n+def is_appengine():\n+    return (is_local_appengine() or\n+            is_prod_appengine_v1() or\n+            is_prod_appengine_v2())\n+\n+\n+def is_appengine_sandbox():\n+    return is_appengine() and not is_prod_appengine_v2()\n+\n+\n+def is_local_appengine():\n+    return ('APPENGINE_RUNTIME' in os.environ and\n+            'Development/' in os.environ['SERVER_SOFTWARE'])\n+\n+\n+def is_prod_appengine_v1():\n+    return ('APPENGINE_RUNTIME' in os.environ and\n+            'Google App Engine/' in os.environ['SERVER_SOFTWARE'] and\n+            not is_prod_appengine_v2())\n+\n+\n+def is_prod_appengine_v2():\n+    return os.environ.get('GAE_VM', False) == 'true'\ndiff --git a/requests/packages/urllib3/contrib/pyopenssl.py b/requests/packages/urllib3/contrib/pyopenssl.py\n--- a/requests/packages/urllib3/contrib/pyopenssl.py\n+++ b/requests/packages/urllib3/contrib/pyopenssl.py\n@@ -85,6 +85,14 @@\n \n DEFAULT_SSL_CIPHER_LIST = util.ssl_.DEFAULT_CIPHERS\n \n+# OpenSSL will only write 16K at a time\n+SSL_WRITE_BLOCKSIZE = 16384\n+\n+try:\n+    _ = memoryview\n+    has_memoryview = True\n+except NameError:\n+    has_memoryview = False\n \n orig_util_HAS_SNI = util.HAS_SNI\n orig_connection_ssl_wrap_socket = connection.ssl_wrap_socket\n@@ -204,13 +212,21 @@ def _send_until_done(self, data):\n                 continue\n \n     def sendall(self, data):\n-        while len(data):\n-            sent = self._send_until_done(data)\n-            data = data[sent:]\n+        if has_memoryview and not isinstance(data, memoryview):\n+            data = memoryview(data)\n+\n+        total_sent = 0\n+        while total_sent < len(data):\n+            sent = self._send_until_done(data[total_sent:total_sent+SSL_WRITE_BLOCKSIZE])\n+            total_sent += sent\n+\n+    def shutdown(self):\n+        # FIXME rethrow compatible exceptions should we ever use this\n+        self.connection.shutdown()\n \n     def close(self):\n         if self._makefile_refs < 1:\n-            return self.connection.shutdown()\n+            return self.connection.close()\n         else:\n             self._makefile_refs -= 1\n \n@@ -287,7 +303,7 @@ def ssl_wrap_socket(sock, keyfile=None, certfile=None, cert_reqs=None,\n                 raise timeout('select timed out')\n             continue\n         except OpenSSL.SSL.Error as e:\n-            raise ssl.SSLError('bad handshake', e)\n+            raise ssl.SSLError('bad handshake: %r' % e)\n         break\n \n     return WrappedSocket(cnx, sock)\ndiff --git a/requests/packages/urllib3/exceptions.py b/requests/packages/urllib3/exceptions.py\n--- a/requests/packages/urllib3/exceptions.py\n+++ b/requests/packages/urllib3/exceptions.py\n@@ -149,6 +149,11 @@ class SecurityWarning(HTTPWarning):\n     pass\n \n \n+class SubjectAltNameWarning(SecurityWarning):\n+    \"Warned when connecting to a host with a certificate missing a SAN.\"\n+    pass\n+\n+\n class InsecureRequestWarning(SecurityWarning):\n     \"Warned when making an unverified HTTPS request.\"\n     pass\n@@ -167,3 +172,19 @@ class InsecurePlatformWarning(SecurityWarning):\n class ResponseNotChunked(ProtocolError, ValueError):\n     \"Response needs to be chunked in order to read it as chunks.\"\n     pass\n+\n+\n+class ProxySchemeUnknown(AssertionError, ValueError):\n+    \"ProxyManager does not support the supplied scheme\"\n+    # TODO(t-8ch): Stop inheriting from AssertionError in v2.0.\n+\n+    def __init__(self, scheme):\n+        message = \"Not supported proxy scheme %s\" % scheme\n+        super(ProxySchemeUnknown, self).__init__(message)\n+\n+\n+class HeaderParsingError(HTTPError):\n+    \"Raised by assert_header_parsing, but we convert it to a log.warning statement.\"\n+    def __init__(self, defects, unparsed_data):\n+        message = '%s, unparsed data: %r' % (defects or 'Unknown', unparsed_data)\n+        super(HeaderParsingError, self).__init__(message)\ndiff --git a/requests/packages/urllib3/poolmanager.py b/requests/packages/urllib3/poolmanager.py\n--- a/requests/packages/urllib3/poolmanager.py\n+++ b/requests/packages/urllib3/poolmanager.py\n@@ -8,7 +8,7 @@\n from ._collections import RecentlyUsedContainer\n from .connectionpool import HTTPConnectionPool, HTTPSConnectionPool\n from .connectionpool import port_by_scheme\n-from .exceptions import LocationValueError, MaxRetryError\n+from .exceptions import LocationValueError, MaxRetryError, ProxySchemeUnknown\n from .request import RequestMethods\n from .util.url import parse_url\n from .util.retry import Retry\n@@ -227,8 +227,8 @@ def __init__(self, proxy_url, num_pools=10, headers=None,\n             port = port_by_scheme.get(proxy.scheme, 80)\n             proxy = proxy._replace(port=port)\n \n-        assert proxy.scheme in (\"http\", \"https\"), \\\n-            'Not supported proxy scheme %s' % proxy.scheme\n+        if proxy.scheme not in (\"http\", \"https\"):\n+            raise ProxySchemeUnknown(proxy.scheme)\n \n         self.proxy = proxy\n         self.proxy_headers = proxy_headers or {}\ndiff --git a/requests/packages/urllib3/request.py b/requests/packages/urllib3/request.py\n--- a/requests/packages/urllib3/request.py\n+++ b/requests/packages/urllib3/request.py\n@@ -71,14 +71,22 @@ def request(self, method, url, fields=None, headers=None, **urlopen_kw):\n                                             headers=headers,\n                                             **urlopen_kw)\n \n-    def request_encode_url(self, method, url, fields=None, **urlopen_kw):\n+    def request_encode_url(self, method, url, fields=None, headers=None,\n+                           **urlopen_kw):\n         \"\"\"\n         Make a request using :meth:`urlopen` with the ``fields`` encoded in\n         the url. This is useful for request methods like GET, HEAD, DELETE, etc.\n         \"\"\"\n+        if headers is None:\n+            headers = self.headers\n+\n+        extra_kw = {'headers': headers}\n+        extra_kw.update(urlopen_kw)\n+\n         if fields:\n             url += '?' + urlencode(fields)\n-        return self.urlopen(method, url, **urlopen_kw)\n+\n+        return self.urlopen(method, url, **extra_kw)\n \n     def request_encode_body(self, method, url, fields=None, headers=None,\n                             encode_multipart=True, multipart_boundary=None,\ndiff --git a/requests/packages/urllib3/response.py b/requests/packages/urllib3/response.py\n--- a/requests/packages/urllib3/response.py\n+++ b/requests/packages/urllib3/response.py\n@@ -2,6 +2,7 @@\n     import http.client as httplib\n except ImportError:\n     import httplib\n+from contextlib import contextmanager\n import zlib\n import io\n from socket import timeout as SocketTimeout\n@@ -12,7 +13,7 @@\n )\n from .packages.six import string_types as basestring, binary_type, PY3\n from .connection import HTTPException, BaseSSLError\n-from .util.response import is_fp_closed\n+from .util.response import is_fp_closed, is_response_to_head\n \n \n class DeflateDecoder(object):\n@@ -202,6 +203,47 @@ def _decode(self, data, decode_content, flush_decoder):\n \n         return data\n \n+    @contextmanager\n+    def _error_catcher(self):\n+        \"\"\"\n+        Catch low-level python exceptions, instead re-raising urllib3\n+        variants, so that low-level exceptions are not leaked in the\n+        high-level api.\n+\n+        On exit, release the connection back to the pool.\n+        \"\"\"\n+        try:\n+            try:\n+                yield\n+\n+            except SocketTimeout:\n+                # FIXME: Ideally we'd like to include the url in the ReadTimeoutError but\n+                # there is yet no clean way to get at it from this context.\n+                raise ReadTimeoutError(self._pool, None, 'Read timed out.')\n+\n+            except BaseSSLError as e:\n+                # FIXME: Is there a better way to differentiate between SSLErrors?\n+                if 'read operation timed out' not in str(e):  # Defensive:\n+                    # This shouldn't happen but just in case we're missing an edge\n+                    # case, let's avoid swallowing SSL errors.\n+                    raise\n+\n+                raise ReadTimeoutError(self._pool, None, 'Read timed out.')\n+\n+            except HTTPException as e:\n+                # This includes IncompleteRead.\n+                raise ProtocolError('Connection broken: %r' % e, e)\n+        except Exception:\n+            # The response may not be closed but we're not going to use it anymore\n+            # so close it now to ensure that the connection is released back to the pool.\n+            if self._original_response and not self._original_response.isclosed():\n+                self._original_response.close()\n+\n+            raise\n+        finally:\n+            if self._original_response and self._original_response.isclosed():\n+                self.release_conn()\n+\n     def read(self, amt=None, decode_content=None, cache_content=False):\n         \"\"\"\n         Similar to :meth:`httplib.HTTPResponse.read`, but with two additional\n@@ -231,45 +273,28 @@ def read(self, amt=None, decode_content=None, cache_content=False):\n             return\n \n         flush_decoder = False\n-\n-        try:\n-            try:\n-                if amt is None:\n-                    # cStringIO doesn't like amt=None\n-                    data = self._fp.read()\n+        data = None\n+\n+        with self._error_catcher():\n+            if amt is None:\n+                # cStringIO doesn't like amt=None\n+                data = self._fp.read()\n+                flush_decoder = True\n+            else:\n+                cache_content = False\n+                data = self._fp.read(amt)\n+                if amt != 0 and not data:  # Platform-specific: Buggy versions of Python.\n+                    # Close the connection when no data is returned\n+                    #\n+                    # This is redundant to what httplib/http.client _should_\n+                    # already do.  However, versions of python released before\n+                    # December 15, 2012 (http://bugs.python.org/issue16298) do\n+                    # not properly close the connection in all cases. There is\n+                    # no harm in redundantly calling close.\n+                    self._fp.close()\n                     flush_decoder = True\n-                else:\n-                    cache_content = False\n-                    data = self._fp.read(amt)\n-                    if amt != 0 and not data:  # Platform-specific: Buggy versions of Python.\n-                        # Close the connection when no data is returned\n-                        #\n-                        # This is redundant to what httplib/http.client _should_\n-                        # already do.  However, versions of python released before\n-                        # December 15, 2012 (http://bugs.python.org/issue16298) do\n-                        # not properly close the connection in all cases. There is\n-                        # no harm in redundantly calling close.\n-                        self._fp.close()\n-                        flush_decoder = True\n-\n-            except SocketTimeout:\n-                # FIXME: Ideally we'd like to include the url in the ReadTimeoutError but\n-                # there is yet no clean way to get at it from this context.\n-                raise ReadTimeoutError(self._pool, None, 'Read timed out.')\n-\n-            except BaseSSLError as e:\n-                # FIXME: Is there a better way to differentiate between SSLErrors?\n-                if 'read operation timed out' not in str(e):  # Defensive:\n-                    # This shouldn't happen but just in case we're missing an edge\n-                    # case, let's avoid swallowing SSL errors.\n-                    raise\n-\n-                raise ReadTimeoutError(self._pool, None, 'Read timed out.')\n-\n-            except HTTPException as e:\n-                # This includes IncompleteRead.\n-                raise ProtocolError('Connection broken: %r' % e, e)\n \n+        if data:\n             self._fp_bytes_read += len(data)\n \n             data = self._decode(data, decode_content, flush_decoder)\n@@ -277,11 +302,8 @@ def read(self, amt=None, decode_content=None, cache_content=False):\n             if cache_content:\n                 self._body = data\n \n-            return data\n+        return data\n \n-        finally:\n-            if self._original_response and self._original_response.isclosed():\n-                self.release_conn()\n \n     def stream(self, amt=2**16, decode_content=None):\n         \"\"\"\n@@ -319,6 +341,7 @@ def from_httplib(ResponseCls, r, **response_kw):\n         with ``original_response=r``.\n         \"\"\"\n         headers = r.msg\n+\n         if not isinstance(headers, HTTPHeaderDict):\n             if PY3: # Python 3\n                 headers = HTTPHeaderDict(headers.items())\n@@ -437,30 +460,29 @@ def read_chunked(self, amt=None, decode_content=None):\n             raise ResponseNotChunked(\"Response is not chunked. \"\n                 \"Header 'transfer-encoding: chunked' is missing.\")\n \n-        if self._original_response and self._original_response._method.upper() == 'HEAD':\n-            # Don't bother reading the body of a HEAD request.\n-            # FIXME: Can we do this somehow without accessing private httplib _method?\n+        # Don't bother reading the body of a HEAD request.\n+        if self._original_response and is_response_to_head(self._original_response):\n             self._original_response.close()\n             return\n \n-        while True:\n-            self._update_chunk_length()\n-            if self.chunk_left == 0:\n-                break\n-            chunk = self._handle_chunk(amt)\n-            yield self._decode(chunk, decode_content=decode_content,\n-                               flush_decoder=True)\n-\n-        # Chunk content ends with \\r\\n: discard it.\n-        while True:\n-            line = self._fp.fp.readline()\n-            if not line:\n-                # Some sites may not end with '\\r\\n'.\n-                break\n-            if line == b'\\r\\n':\n-                break\n-\n-        # We read everything; close the \"file\".\n-        if self._original_response:\n-            self._original_response.close()\n-        self.release_conn()\n+        with self._error_catcher():\n+            while True:\n+                self._update_chunk_length()\n+                if self.chunk_left == 0:\n+                    break\n+                chunk = self._handle_chunk(amt)\n+                yield self._decode(chunk, decode_content=decode_content,\n+                                   flush_decoder=True)\n+\n+            # Chunk content ends with \\r\\n: discard it.\n+            while True:\n+                line = self._fp.fp.readline()\n+                if not line:\n+                    # Some sites may not end with '\\r\\n'.\n+                    break\n+                if line == b'\\r\\n':\n+                    break\n+\n+            # We read everything; close the \"file\".\n+            if self._original_response:\n+                self._original_response.close()\ndiff --git a/requests/packages/urllib3/util/connection.py b/requests/packages/urllib3/util/connection.py\n--- a/requests/packages/urllib3/util/connection.py\n+++ b/requests/packages/urllib3/util/connection.py\n@@ -60,6 +60,8 @@ def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n     \"\"\"\n \n     host, port = address\n+    if host.startswith('['):\n+        host = host.strip('[]')\n     err = None\n     for res in socket.getaddrinfo(host, port, 0, socket.SOCK_STREAM):\n         af, socktype, proto, canonname, sa = res\ndiff --git a/requests/packages/urllib3/util/response.py b/requests/packages/urllib3/util/response.py\n--- a/requests/packages/urllib3/util/response.py\n+++ b/requests/packages/urllib3/util/response.py\n@@ -1,3 +1,11 @@\n+try:\n+    import http.client as httplib\n+except ImportError:\n+    import httplib\n+\n+from ..exceptions import HeaderParsingError\n+\n+\n def is_fp_closed(obj):\n     \"\"\"\n     Checks whether a given file-like object is closed.\n@@ -20,3 +28,49 @@ def is_fp_closed(obj):\n         pass\n \n     raise ValueError(\"Unable to determine whether fp is closed.\")\n+\n+\n+def assert_header_parsing(headers):\n+    \"\"\"\n+    Asserts whether all headers have been successfully parsed.\n+    Extracts encountered errors from the result of parsing headers.\n+\n+    Only works on Python 3.\n+\n+    :param headers: Headers to verify.\n+    :type headers: `httplib.HTTPMessage`.\n+\n+    :raises urllib3.exceptions.HeaderParsingError:\n+        If parsing errors are found.\n+    \"\"\"\n+\n+    # This will fail silently if we pass in the wrong kind of parameter.\n+    # To make debugging easier add an explicit check.\n+    if not isinstance(headers, httplib.HTTPMessage):\n+        raise TypeError('expected httplib.Message, got {}.'.format(\n+            type(headers)))\n+\n+    defects = getattr(headers, 'defects', None)\n+    get_payload = getattr(headers, 'get_payload', None)\n+\n+    unparsed_data = None\n+    if get_payload:  # Platform-specific: Python 3.\n+        unparsed_data = get_payload()\n+\n+    if defects or unparsed_data:\n+        raise HeaderParsingError(defects=defects, unparsed_data=unparsed_data)\n+\n+\n+def is_response_to_head(response):\n+    \"\"\"\n+    Checks, wether a the request of a response has been a HEAD-request.\n+    Handles the quirks of AppEngine.\n+\n+    :param conn:\n+    :type conn: :class:`httplib.HTTPResponse`\n+    \"\"\"\n+    # FIXME: Can we do this somehow without accessing private httplib _method?\n+    method = response._method\n+    if isinstance(method, int):  # Platform-specific: Appengine\n+        return method == 3\n+    return method.upper() == 'HEAD'\ndiff --git a/requests/packages/urllib3/util/retry.py b/requests/packages/urllib3/util/retry.py\n--- a/requests/packages/urllib3/util/retry.py\n+++ b/requests/packages/urllib3/util/retry.py\n@@ -94,7 +94,7 @@ class Retry(object):\n \n         seconds. If the backoff_factor is 0.1, then :func:`.sleep` will sleep\n         for [0.1s, 0.2s, 0.4s, ...] between retries. It will never be longer\n-        than :attr:`Retry.MAX_BACKOFF`.\n+        than :attr:`Retry.BACKOFF_MAX`.\n \n         By default, backoff is disabled (set to 0).\n \ndiff --git a/requests/packages/urllib3/util/ssl_.py b/requests/packages/urllib3/util/ssl_.py\n--- a/requests/packages/urllib3/util/ssl_.py\n+++ b/requests/packages/urllib3/util/ssl_.py\n@@ -8,6 +8,13 @@\n HAS_SNI = False\n create_default_context = None\n \n+# Maps the length of a digest to a possible hash function producing this digest\n+HASHFUNC_MAP = {\n+    32: md5,\n+    40: sha1,\n+    64: sha256,\n+}\n+\n import errno\n import warnings\n \n@@ -112,31 +119,21 @@ def assert_fingerprint(cert, fingerprint):\n         Fingerprint as string of hexdigits, can be interspersed by colons.\n     \"\"\"\n \n-    # Maps the length of a digest to a possible hash function producing\n-    # this digest.\n-    hashfunc_map = {\n-        16: md5,\n-        20: sha1,\n-        32: sha256,\n-    }\n-\n     fingerprint = fingerprint.replace(':', '').lower()\n-    digest_length, odd = divmod(len(fingerprint), 2)\n-\n-    if odd or digest_length not in hashfunc_map:\n-        raise SSLError('Fingerprint is of invalid length.')\n+    digest_length = len(fingerprint)\n+    hashfunc = HASHFUNC_MAP.get(digest_length)\n+    if not hashfunc:\n+        raise SSLError(\n+            'Fingerprint of invalid length: {0}'.format(fingerprint))\n \n     # We need encode() here for py32; works on py2 and p33.\n     fingerprint_bytes = unhexlify(fingerprint.encode())\n \n-    hashfunc = hashfunc_map[digest_length]\n-\n     cert_digest = hashfunc(cert).digest()\n \n-    if not cert_digest == fingerprint_bytes:\n+    if cert_digest != fingerprint_bytes:\n         raise SSLError('Fingerprints did not match. Expected \"{0}\", got \"{1}\".'\n-                       .format(hexlify(fingerprint_bytes),\n-                               hexlify(cert_digest)))\n+                       .format(fingerprint, hexlify(cert_digest)))\n \n \n def resolve_cert_reqs(candidate):\n",
  "input_step": 26,
  "input": [
    {
      "role": "system",
      "content": "SETTING: You are an autonomous programmer, and you're working directly in the command line with a special interface.\n\nThe special interface consists of a file editor that shows you 100 lines of a file at a time.\nIn addition to typical bash commands, you can also use the following commands to help you navigate and edit files.\n\nCOMMANDS:\nopen:\n  docstring: opens the file at the given path in the editor. If line_number is provided, the window will be move to include that line\n  signature: open <path> [<line_number>]\n  arguments:\n    - path (string) [required]: the path to the file to open\n    - line_number (integer) [optional]: the line number to move the window to (if not provided, the window will start at the top of the file)\n\ngoto:\n  docstring: moves the window to show <line_number>\n  signature: goto <line_number>\n  arguments:\n    - line_number (integer) [required]: the line number to move the window to\n\nscroll_down:\n  docstring: moves the window down 100 lines\n  signature: scroll_down\n\nscroll_up:\n  docstring: moves the window down 100 lines\n  signature: scroll_up\n\ncreate:\n  docstring: creates and opens a new file with the given name\n  signature: create <filename>\n  arguments:\n    - filename (string) [required]: the name of the file to create\n\nsubmit:\n  docstring: submits your current code and terminates the session\n  signature: submit\n\nsearch_dir:\n  docstring: searches for search_term in all files in dir. If dir is not provided, searches in the current directory\n  signature: search_dir <search_term> [<dir>]\n  arguments:\n    - search_term (string) [required]: the term to search for\n    - dir (string) [optional]: the directory to search in (if not provided, searches in the current directory)\n\nsearch_file:\n  docstring: searches for search_term in file. If file is not provided, searches in the current open file\n  signature: search_file <search_term> [<file>]\n  arguments:\n    - search_term (string) [required]: the term to search for\n    - file (string) [optional]: the file to search in (if not provided, searches in the current open file)\n\nfind_file:\n  docstring: finds all files with the given name in dir. If dir is not provided, searches in the current directory\n  signature: find_file <file_name> [<dir>]\n  arguments:\n    - file_name (string) [required]: the name of the file to search for\n    - dir (string) [optional]: the directory to search in (if not provided, searches in the current directory)\n\nedit:\n  docstring: replaces lines <start_line> through <end_line> (inclusive) with the given text in the open file. The replacement text is terminated by a line with only end_of_edit on it. All of the <replacement text> will be entered, so make sure your indentation is formatted properly. Python files will be checked for syntax errors after the edit. If the system detects a syntax error, the edit will not be executed. Simply try to edit the file again, but make sure to read the error message and modify the edit command you issue accordingly. Issuing the same command a second time will just lead to the same error message again.\n  signature: edit <start_line>:<end_line>\n<replacement_text>\nend_of_edit\n  arguments:\n    - start_line (integer) [required]: the line number to start the edit at\n    - end_line (integer) [required]: the line number to end the edit at (inclusive)\n    - replacement_text (string) [required]: the text to replace the current selection with\n\n\n\nPlease note that THE EDIT COMMAND REQUIRES PROPER INDENTATION.\nIf you'd like to add the line '        print(x)' you must fully write that out, with all those spaces before the code! Indentation is important and code that is not indented correctly will fail and require fixing before it can be run.\n\nRESPONSE FORMAT:\nYour shell prompt is formatted as follows:\n(Open file: <path>) <cwd> $\n\nYou need to format your output using two fields; discussion and command.\nYour output should always include _one_ discussion and _one_ command field EXACTLY as in the following example:\nDISCUSSION\nFirst I'll start by using ls to see what files are in the current directory. Then maybe we can look at some relevant files to see what they look like.\n```\nls -a\n```\n\nYou should only include a *SINGLE* command in the command section and then wait for a response from the shell before continuing with more discussion and commands. Everything you include in the DISCUSSION section will be saved for future reference.\nIf you'd like to issue two commands at once, PLEASE DO NOT DO THAT! Please instead first submit just the first command, and then after receiving a response you'll be able to issue the second command.\nYou're free to use any other bash commands you want (e.g. find, grep, cat, ls, cd) in addition to the special commands listed above.\nHowever, the environment does NOT support interactive session commands (e.g. python, vim), so please do not invoke them."
    },
    {
      "role": "user",
      "content": "Here is a demonstration of how to correctly accomplish this task.\nIt is included to show you how to correctly use the interface.\nYou do not need to follow exactly what is done in the demonstration.\n--- DEMONSTRATION ---\nWe're currently solving the following issue within our repository. Here's the issue text:\nISSUE:\nTimeDelta serialization precision\nHi there!\n\nI just found quite strange behaviour of `TimeDelta` field serialization\n\n```python3\nfrom marshmallow.fields import TimeDelta\nfrom datetime import timedelta\n\ntd_field = TimeDelta(precision=\"milliseconds\")\n\nobj = dict()\nobj[\"td_field\"] = timedelta(milliseconds=345)\n\nprint(td_field.serialize(\"td_field\", obj))\n```\n\nOutput of this snippet is `344`, but it seems that `345` is correct.\n\nLooks like a rounding issue here: https://github.com/marshmallow-code/marshmallow/blob/dev/src/marshmallow/fields.py#L1474\n\n\nINSTRUCTIONS:\nNow, you're going to solve this issue on your own. Your terminal session has started and you're in the repository's root directory. You can use any bash commands or the special interface to help you. Edit all the files you need to and run any checks or tests that you want. \nRemember, YOU CAN ONLY ENTER ONE COMMAND AT A TIME. You should always wait for feedback after every command. \nWhen you're satisfied with all of the changes you've made, you can submit your changes to the code base by simply running the submit command.\nNote however that you cannot use any interactive session commands (e.g. python, vim) in this environment, but you can write scripts and run them. E.g. you can write a python script and then run it with `python <script_name>.py`.\n\nNOTE ABOUT THE EDIT COMMAND: Indentation really matters! When editing a file, make sure to insert appropriate indentation before each line! \n\nIMPORTANT TIPS:\n1. Always start by trying to replicate the bug that the issues discusses. \n   If the issue includes code for reproducing the bug, we recommend that you re-implement that in your environment, and run it to make sure you can reproduce the bug.\n   Then start trying to fix it.\n   When you think you've fixed the bug, re-run the bug reproduction script to make sure that the bug has indeed been fixed.\n   \n   If the bug reproduction script does not print anything when it succesfully runs, we recommend adding a print(\"Script completed successfully, no errors.\") command at the end of the file,\n   so that you can be sure that the script indeed ran fine all the way through. \n\n2. If you run a command and it doesn't work, try running a different command. A command that did not work once will not work the second time unless you modify it!\n\n3. If you open a file and need to get to an area around a specific line that is not in the first 100 lines, say line 583, don't just use the scroll_down command multiple times. Instead, use the goto 583 command. It's much quicker. \n   \n4. If the bug reproduction script requires inputting/reading a specific file, such as buggy-input.png, and you'd like to understand how to input that file, conduct a search in the existing repo code, to see whether someone else has already done that. Do this by running the command: find_file \"buggy-input.png\" If that doensn't work, use the linux 'find' command. \n\n5. Always make sure to look at the currently open file and the current working directory (which appears right after the currently open file). The currently open file might be in a different directory than the working directory! Note that some commands, such as 'create', open files, so they might change the current  open file.\n\n6. When editing files, it is easy to accidentally specify a wrong line number or to write code with incorrect indentation. Always check the code after you issue an edit to make sure that it reflects what you wanted to accomplish. If it didn't, issue another command to fix it.\n   \n\n(Open file: n/a)\n(Current directory: /marshmallow-code__marshmallow)\nbash-$\nLet's first start by reproducing the results of the issue. The issue includes some example code for reproduction, which we can use. We'll create a new file called `reproduce.py` and paste the example code into it.\n```\ncreate reproduce.py\n```\n[File: /marshmallow-code__marshmallow/reproduce.py (1 lines total)]\n1:\n\n(Open file: /marshmallow-code__marshmallow/reproduce.py)\n(Current directory: /marshmallow-code__marshmallow)\nbash-$\nNow let's paste in the example code from the issue.\n```\nedit 1:1\nfrom marshmallow.fields import TimeDelta\nfrom datetime import timedelta\n\ntd_field = TimeDelta(precision=\"milliseconds\")\n\nobj = dict()\nobj[\"td_field\"] = timedelta(milliseconds=345)\n\nprint(td_field.serialize(\"td_field\", obj))\nend_of_edit\n```\n[File: /marshmallow-code__marshmallow/reproduce.py (9 lines total)]\n1:from marshmallow.fields import TimeDelta\n2:from datetime import timedelta\n3:\n4:td_field = TimeDelta(precision=\"milliseconds\")\n5:\n6:obj = dict()\n7:obj[\"td_field\"] = timedelta(milliseconds=345)\n8:\n9:print(td_field.serialize(\"td_field\", obj))\nFile updated. Please review the changes and make sure they are correct (correct indentation, no duplicate lines, etc). Edit the file again if necessary.\n\n(Open file: /marshmallow-code__marshmallow/reproduce.py)\n(Current directory: /marshmallow-code__marshmallow)\nbash-$\nNow let's run the code to see if we see the same output as the issue.\n```\npython reproduce.py\n```\n344\n\n(Open file: /marshmallow-code__marshmallow/reproduce.py)\n(Current directory: /marshmallow-code__marshmallow)\nbash-$\nWe are indeed seeing the same output as the issue. The issue suggests that we should look at line 1474 of the `fields.py` file to see if there is a rounding issue. Let's open the `fields.py` file and navigate to line 1474 to see the relevant code. First we should find the `fields.py` file in the repository. It is likely to be in the `src/marshmallow` directory, but we should check to be sure.\n```\nls -F\n```\nAUTHORS.rst\nCHANGELOG.rst\nCODE_OF_CONDUCT.md\nCONTRIBUTING.rst\nLICENSE\nMANIFEST.in\nNOTICE\nREADME.rst\nRELEASING.md\nazure-pipelines.yml\ndocs/\nexamples/\nperformance/\npyproject.toml\nreproduce.py\nsetup.cfg\nsetup.py\nsrc/\ntests/\ntox.ini\n\n(Open file: /marshmallow-code__marshmallow/reproduce.py)\n(Current directory: /marshmallow-code__marshmallow)\nbash-$\nIt looks like the `src` directory is present, which suggests that the `fields.py` file is likely to be in the `src` directory. Let's use find_file to see where it is.\n```\nfind_file \"fields.py\" src\n```\nFound 1 matches for \"fields.py\" in /marshmallow-code__marshmallow/src:\n/marshmallow-code__marshmallow/src/marshmallow/fields.py\n\n(Open file: /marshmallow-code__marshmallow/reproduce.py)\n(Current directory: /marshmallow-code__marshmallow)\nbash-$\nIt looks like the `fields.py` file is present in the `./src/marshmallow/` directory. The issue also points to a specific URL with line number 1474. We should navigate to that line in fields.py to see the relevant code for the `TimeDelta` serialization.\n```\nopen src/marshmallow/fields.py 1474\n```\n[File: /marshmallow-code__marshmallow/src/marshmallow/fields.py (1997 lines total)]\n(1458 more lines above)\n1459:            self.WEEKS,\n1460:        )\n1461:\n1462:        if precision not in units:\n1463:            msg = 'The precision must be {} or \"{}\".'.format(\n1464:                \", \".join([f'\"{each}\"' for each in units[:-1]]), units[-1]\n1465:            )\n1466:            raise ValueError(msg)\n1467:\n1468:        self.precision = precision\n1469:        super().__init__(**kwargs)\n1470:\n1471:    def _serialize(self, value, attr, obj, **kwargs):\n1472:        if value is None:\n1473:            return None\n1474:        base_unit = dt.timedelta(**{self.precision: 1})\n1475:        return int(value.total_seconds() / base_unit.total_seconds())\n1476:\n1477:    def _deserialize(self, value, attr, data, **kwargs):\n1478:        try:\n1479:            value = int(value)\n1480:        except (TypeError, ValueError) as error:\n1481:            raise self.make_error(\"invalid\") from error\n1482:\n1483:        kwargs = {self.precision: value}\n1484:\n1485:        try:\n1486:            return dt.timedelta(**kwargs)\n1487:        except OverflowError as error:\n1488:            raise self.make_error(\"invalid\") from error\n1489:\n1490:\n1491:class Mapping(Field):\n1492:    \"\"\"An abstract class for objects with key-value pairs.\n1493:\n1494:    :param keys: A field class or instance for dict keys.\n1495:    :param values: A field class or instance for dict values.\n1496:    :param kwargs: The same keyword arguments that :class:`Field` receives.\n1497:\n1498:    .. note::\n1499:        When the structure of nested data is not known, you may omit the\n1500:        `keys` and `values` arguments to prevent content validation.\n1501:\n1502:    .. versionadded:: 3.0.0rc4\n1503:    \"\"\"\n1504:\n1505:    mapping_type = dict\n1506:\n1507:    #: Default error messages.\n1508:    default_error_messages = {\"invalid\": \"Not a valid mapping type.\"}\n1509:\n1510:    def __init__(\n1511:        self,\n1512:        keys: typing.Optional[typing.Union[Field, type]] = None,\n1513:        values: typing.Optional[typing.Union[Field, type]] = None,\n1514:        **kwargs,\n1515:    ):\n1516:        super().__init__(**kwargs)\n1517:        if keys is None:\n1518:            self.key_field = None\n1519:        else:\n1520:            try:\n1521:                self.key_field = resolve_field_instance(keys)\n1522:            except FieldInstanceResolutionError as error:\n1523:                raise ValueError(\n1524:                    '\"keys\" must be a subclass or instance of '\n1525:                    \"marshmallow.base.FieldABC.\"\n1526:                ) from error\n1527:\n1528:        if values is None:\n1529:            self.value_field = None\n1530:        else:\n1531:            try:\n1532:                self.value_field = resolve_field_instance(values)\n1533:            except FieldInstanceResolutionError as error:\n1534:                raise ValueError(\n1535:                    '\"values\" must be a subclass or instance of '\n1536:                    \"marshmallow.base.FieldABC.\"\n1537:                ) from error\n1538:            if isinstance(self.value_field, Nested):\n1539:                self.only = self.value_field.only\n1540:                self.exclude = self.value_field.exclude\n1541:\n1542:    def _bind_to_schema(self, field_name, schema):\n1543:        super()._bind_to_schema(field_name, schema)\n1544:        if self.value_field:\n1545:            self.value_field = copy.deepcopy(self.value_field)\n1546:            self.value_field._bind_to_schema(field_name, self)\n1547:        if isinstance(self.value_field, Nested):\n1548:            self.value_field.only = self.only\n1549:            self.value_field.exclude = self.exclude\n1550:        if self.key_field:\n1551:            self.key_field = copy.deepcopy(self.key_field)\n1552:            self.key_field._bind_to_schema(field_name, self)\n1553:\n1554:    def _serialize(self, value, attr, obj, **kwargs):\n1555:        if value is None:\n1556:            return None\n1557:        if not self.value_field and not self.key_field:\n1558:            return self.mapping_type(value)\n(439 more lines below)\n\n(Open file: /marshmallow-code__marshmallow/src/marshmallow/fields.py)\n(Current directory: /marshmallow-code__marshmallow)\nbash-$\nWe are now looking at the relevant section of the `fields.py` file where the `TimeDelta` serialization occurs. The issue suggests that there is a rounding problem near line 1474. The current implementation uses integer division, which truncates the decimal part and can lead to incorrect rounding on line 1475.To fix this issue, we should ensure that the division results in a float, and then round the result to the nearest integer before converting it to an int. This should preserve the milliseconds precision as expected. Let's make the necessary edit to the code.\n```\nedit 1475:1475\nreturn int(round(value.total_seconds() / base_unit.total_seconds()))  # round to nearest int\nend_of_edit\n```\nYour proposed edit has introduced new syntax error(s). Please understand the fixes and retry your edit commmand.\n\nERRORS:\n- E999 IndentationError: unexpected indent\n\nThis is how your edit would have looked if applied\n-------------------------------------------------\n[File: /marshmallow-code__marshmallow/src/marshmallow/fields.py (1997 lines total)]\n(1468 more lines above)\n1469:        super().__init__(**kwargs)\n1470:\n1471:    def _serialize(self, value, attr, obj, **kwargs):\n1472:        if value is None:\n1473:            return None\n1474:        base_unit = dt.timedelta(**{self.precision: 1})\n1475:return int(round(value.total_seconds() / base_unit.total_seconds()))  # round to nearest int\n1476:\n1477:    def _deserialize(self, value, attr, data, **kwargs):\n1478:        try:\n1479:            value = int(value)\n(518 more lines below)\n-------------------------------------------------\n\nThis is the original code before your edit\n-------------------------------------------------\n[File: /marshmallow-code__marshmallow/src/marshmallow/fields.py (1997 lines total)]\n(1469 more lines above)\n1470:\n1471:    def _serialize(self, value, attr, obj, **kwargs):\n1472:        if value is None:\n1473:            return None\n1474:        base_unit = dt.timedelta(**{self.precision: 1})\n1475:        return int(value.total_seconds() / base_unit.total_seconds())\n1476:\n1477:    def _deserialize(self, value, attr, data, **kwargs):\n1478:        try:\n1479:            value = int(value)\n1480:        except (TypeError, ValueError) as error:\n(517 more lines below)\n-------------------------------------------------\nYour changes have NOT been applied. Please fix your edit command and try again.\nYou either need to 1) Specify the correct start/end line arguments or 2) Correct your edit code.\nDO NOT re-run the same failed edit command. Running it again will lead to the same error.\n\n(Open file: /marshmallow-code__marshmallow/src/marshmallow/fields.py)\n(Current directory: /marshmallow-code__marshmallow)\nbash-$\nMy edit command did not use the proper indentation, I will fix my syntax in this follow up edit command.\n```\nedit 1475:1475\n        return int(round(value.total_seconds() / base_unit.total_seconds()))  # round to nearest int\nend_of_edit\n```\n[File: /marshmallow-code__marshmallow/src/marshmallow/fields.py (1997 lines total)]\n(1424 more lines above)\n1425:\n1426:    :param precision: Influences how the integer is interpreted during\n1427:        (de)serialization. Must be 'days', 'seconds', 'microseconds',\n1428:        'milliseconds', 'minutes', 'hours' or 'weeks'.\n1429:    :param kwargs: The same keyword arguments that :class:`Field` receives.\n1430:\n1431:    .. versionchanged:: 2.0.0\n1432:        Always serializes to an integer value to avoid rounding errors.\n1433:        Add `precision` parameter.\n1434:    \"\"\"\n1435:\n1436:    DAYS = \"days\"\n1437:    SECONDS = \"seconds\"\n1438:    MICROSECONDS = \"microseconds\"\n1439:    MILLISECONDS = \"milliseconds\"\n1440:    MINUTES = \"minutes\"\n1441:    HOURS = \"hours\"\n1442:    WEEKS = \"weeks\"\n1443:\n1444:    #: Default error messages.\n1445:    default_error_messages = {\n1446:        \"invalid\": \"Not a valid period of time.\",\n1447:        \"format\": \"{input!r} cannot be formatted as a timedelta.\",\n1448:    }\n1449:\n1450:    def __init__(self, precision: str = SECONDS, **kwargs):\n1451:        precision = precision.lower()\n1452:        units = (\n1453:            self.DAYS,\n1454:            self.SECONDS,\n1455:            self.MICROSECONDS,\n1456:            self.MILLISECONDS,\n1457:            self.MINUTES,\n1458:            self.HOURS,\n1459:            self.WEEKS,\n1460:        )\n1461:\n1462:        if precision not in units:\n1463:            msg = 'The precision must be {} or \"{}\".'.format(\n1464:                \", \".join([f'\"{each}\"' for each in units[:-1]]), units[-1]\n1465:            )\n1466:            raise ValueError(msg)\n1467:\n1468:        self.precision = precision\n1469:        super().__init__(**kwargs)\n1470:\n1471:    def _serialize(self, value, attr, obj, **kwargs):\n1472:        if value is None:\n1473:            return None\n1474:        base_unit = dt.timedelta(**{self.precision: 1})\n1475:        return int(round(value.total_seconds() / base_unit.total_seconds()))  # round to nearest int\n1476:\n1477:    def _deserialize(self, value, attr, data, **kwargs):\n1478:        try:\n1479:            value = int(value)\n1480:        except (TypeError, ValueError) as error:\n1481:            raise self.make_error(\"invalid\") from error\n1482:\n1483:        kwargs = {self.precision: value}\n1484:\n1485:        try:\n1486:            return dt.timedelta(**kwargs)\n1487:        except OverflowError as error:\n1488:            raise self.make_error(\"invalid\") from error\n1489:\n1490:\n1491:class Mapping(Field):\n1492:    \"\"\"An abstract class for objects with key-value pairs.\n1493:\n1494:    :param keys: A field class or instance for dict keys.\n1495:    :param values: A field class or instance for dict values.\n1496:    :param kwargs: The same keyword arguments that :class:`Field` receives.\n1497:\n1498:    .. note::\n1499:        When the structure of nested data is not known, you may omit the\n1500:        `keys` and `values` arguments to prevent content validation.\n1501:\n1502:    .. versionadded:: 3.0.0rc4\n1503:    \"\"\"\n1504:\n1505:    mapping_type = dict\n1506:\n1507:    #: Default error messages.\n1508:    default_error_messages = {\"invalid\": \"Not a valid mapping type.\"}\n1509:\n1510:    def __init__(\n1511:        self,\n1512:        keys: typing.Optional[typing.Union[Field, type]] = None,\n1513:        values: typing.Optional[typing.Union[Field, type]] = None,\n1514:        **kwargs,\n1515:    ):\n1516:        super().__init__(**kwargs)\n1517:        if keys is None:\n1518:            self.key_field = None\n1519:        else:\n1520:            try:\n1521:                self.key_field = resolve_field_instance(keys)\n1522:            except FieldInstanceResolutionError as error:\n1523:                raise ValueError(\n1524:                    '\"keys\" must be a subclass or instance of '\n(473 more lines below)\nFile updated. Please review the changes and make sure they are correct (correct indentation, no duplicate lines, etc). Edit the file again if necessary.\n\n(Open file: /marshmallow-code__marshmallow/src/marshmallow/fields.py)\n(Current directory: /marshmallow-code__marshmallow)\nbash-$\nThe code has been updated to use the `round` function, which should fix the rounding issue. Before submitting the changes, it would be prudent to run the reproduce.py code again to ensure that this change has the desired effect. I see that \"Current directory\" is still `/marshmallow-code__marshmallow`, so we can just run `reproduce.py` directly.\n```\npython reproduce.py\n```\n345\n\n(Open file: /marshmallow-code__marshmallow/src/marshmallow/fields.py)\n(Current directory: /marshmallow-code__marshmallow)\nbash-$\nThe output has changed from 344 to 345, which suggests that the rounding issue has been fixed. Let's remove the reproduce.py file since it is no longer needed.\n```\nrm reproduce.py\n```\nYour command ran successfully and did not produce any output.\n(Open file: /marshmallow-code__marshmallow/src/marshmallow/fields.py)\n(Current directory: /marshmallow-code__marshmallow)\nbash-$\nrm doesn't have any output when it deletes successfully, so that must have worked. Now that we have fixed the issue, we should submit our changes to the code base. Let's submit the changes using the `submit` command.\n```\nsubmit\n```\n--- END OF DEMONSTRATION ---"
    },
    {
      "role": "user",
      "content": "We're currently solving the following issue within our repository. Here's the issue text:\nISSUE:\nurllib3 exceptions passing through requests API\nI don't know if it's a design goal of requests to hide urllib3's exceptions and wrap them around requests.exceptions types.\n\n(If it's not IMHO it should be, but that's another discussion)\n\nIf it is, I have at least two of them passing through that I have to catch in addition to requests' exceptions. They are requests.packages.urllib3.exceptions.DecodeError and requests.packages.urllib3.exceptions.TimeoutError (this one I get when a proxy timeouts)\n\nThanks!\n\n\n\nINSTRUCTIONS:\nNow, you're going to solve this issue on your own. Your terminal session has started and you're in the repository's root directory. You can use any bash commands or the special interface to help you. Edit all the files you need to and run any checks or tests that you want.\nRemember, YOU CAN ONLY ENTER ONE COMMAND AT A TIME. You should always wait for feedback after every command.\nWhen you're satisfied with all of the changes you've made, you can submit your changes to the code base by simply running the submit command.\nNote however that you cannot use any interactive session commands (e.g. python, vim) in this environment, but you can write scripts and run them. E.g. you can write a python script and then run it with `python <script_name>.py`.\n\nNOTE ABOUT THE EDIT COMMAND: Indentation really matters! When editing a file, make sure to insert appropriate indentation before each line!\n\nIMPORTANT TIPS:\n1. Always start by trying to replicate the bug that the issues discusses.\n   If the issue includes code for reproducing the bug, we recommend that you re-implement that in your environment, and run it to make sure you can reproduce the bug.\n   Then start trying to fix it.\n   When you think you've fixed the bug, re-run the bug reproduction script to make sure that the bug has indeed been fixed.\n\n   If the bug reproduction script does not print anything when it successfully runs, we recommend adding a print(\"Script completed successfully, no errors.\") command at the end of the file,\n   so that you can be sure that the script indeed ran fine all the way through.\n\n2. If you run a command and it doesn't work, try running a different command. A command that did not work once will not work the second time unless you modify it!\n\n3. If you open a file and need to get to an area around a specific line that is not in the first 100 lines, say line 583, don't just use the scroll_down command multiple times. Instead, use the goto 583 command. It's much quicker.\n\n4. If the bug reproduction script requires inputting/reading a specific file, such as buggy-input.png, and you'd like to understand how to input that file, conduct a search in the existing repo code, to see whether someone else has already done that. Do this by running the command: find_file \"buggy-input.png\" If that doesn't work, use the linux 'find' command.\n\n5. Always make sure to look at the currently open file and the current working directory (which appears right after the currently open file). The currently open file might be in a different directory than the working directory! Note that some commands, such as 'create', open files, so they might change the current  open file.\n\n6. When editing files, it is easy to accidentally specify a wrong line number or to write code with incorrect indentation. Always check the code after you issue an edit to make sure that it reflects what you wanted to accomplish. If it didn't, issue another command to fix it.\n\n\n(Open file: n/a)\n(Current directory: /psf__requests)\nbash-$"
    },
    {
      "role": "assistant",
      "content": "To start addressing the issue, we need to reproduce the problem first. The issue mentions that `requests.packages.urllib3.exceptions.DecodeError` and `requests.packages.urllib3.exceptions.TimeoutError` are passing through the `requests` API. Let's create a script to reproduce this issue.\n\nWe'll create a new file called `reproduce.py` and add code to simulate the conditions mentioned in the issue.",
      "tool_calls": [
        {
          "type": "function",
          "function": {
            "name": "create",
            "arguments": "{\"filename\": \"reproduce.py\"}"
          },
          "id": "call_c7bcc6d89856"
        }
      ]
    },
    {
      "role": "tool",
      "tool_call_id": "call_c7bcc6d89856",
      "content": "[File: /psf__requests/reproduce.py (1 lines total)]\n1:\n(Open file: /psf__requests/reproduce.py)\n(Current directory: /psf__requests)\nbash-$"
    },
    {
      "role": "assistant",
      "content": "Let's add the code to `reproduce.py` to simulate the conditions mentioned in the issue. We'll try to trigger `DecodeError` and `TimeoutError` from `urllib3` and see if they pass through the `requests` API.",
      "tool_calls": [
        {
          "type": "function",
          "function": {
            "name": "edit",
            "arguments": "{\"start_line\": 1, \"end_line\": 1, \"replacement_text\": \"import requests\\nfrom requests.packages.urllib3.exceptions import DecodeError, TimeoutError\\n\\ndef trigger_decode_error():\\n    try:\\n        # Simulate a decode error\\n        response = requests.get('http://httpbin.org/stream/20', stream=True)\\n        for line in response.iter_lines(decode_unicode=True):\\n            pass\\n    except DecodeError as e:\\n        print(\\\"Caught DecodeError:\\\", e)\\n    except requests.exceptions.RequestException as e:\\n        print(\\\"Caught requests exception:\\\", e)\\n\\ndef trigger_timeout_error():\\n    try:\\n        # Simulate a timeout error\\n        requests.get('http://httpbin.org/delay/10', timeout=1)\\n    except TimeoutError as e:\\n        print(\\\"Caught TimeoutError:\\\", e)\\n    except requests.exceptions.RequestException as e:\\n        print(\\\"Caught requests exception:\\\", e)\\n\\ntrigger_decode_error()\\ntrigger_timeout_error()\\nend_of_edit\"}"
          },
          "id": "call_f5d447dbd6dd"
        }
      ]
    },
    {
      "role": "tool",
      "tool_call_id": "call_f5d447dbd6dd",
      "content": "[File: /psf__requests/reproduce.py (25 lines total)]\n1:import requests\n2:from requests.packages.urllib3.exceptions import DecodeError, TimeoutError\n3:\n4:def trigger_decode_error():\n5:    try:\n6:        # Simulate a decode error\n7:        response = requests.get('http://httpbin.org/stream/20', stream=True)\n8:        for line in response.iter_lines(decode_unicode=True):\n9:            pass\n10:    except DecodeError as e:\n11:        print(\"Caught DecodeError:\", e)\n12:    except requests.exceptions.RequestException as e:\n13:        print(\"Caught requests exception:\", e)\n14:\n15:def trigger_timeout_error():\n16:    try:\n17:        # Simulate a timeout error\n18:        requests.get('http://httpbin.org/delay/10', timeout=1)\n19:    except TimeoutError as e:\n20:        print(\"Caught TimeoutError:\", e)\n21:    except requests.exceptions.RequestException as e:\n22:        print(\"Caught requests exception:\", e)\n23:\n24:trigger_decode_error()\n25:trigger_timeout_error()\nFile updated. Please review the changes and make sure they are correct (correct indentation, no duplicate lines, etc). Edit the file again if necessary.\n(Open file: /psf__requests/reproduce.py)\n(Current directory: /psf__requests)\nbash-$"
    },
    {
      "role": "assistant",
      "content": "Now that we have the reproduction script ready, let's run it to see if the `DecodeError` and `TimeoutError` exceptions are indeed passing through the `requests` API.",
      "tool_calls": [
        {
          "type": "function",
          "function": {
            "name": "unknown",
            "arguments": "{\"raw\": \"python reproduce.py\"}"
          },
          "id": "call_d3039449bb38"
        }
      ]
    },
    {
      "role": "tool",
      "tool_call_id": "call_d3039449bb38",
      "content": "Caught requests exception: HTTPConnectionPool(host='httpbin.org', port=80): Read timed out. (read timeout=1)\n(Open file: /psf__requests/reproduce.py)\n(Current directory: /psf__requests)\nbash-$"
    },
    {
      "role": "assistant",
      "content": "The output indicates that the `TimeoutError` is being caught as a `requests.exceptions.RequestException`, which is expected. However, we didn't see any output for `DecodeError`. This might be because the `DecodeError` wasn't triggered in our test.\n\nLet's modify the `trigger_decode_error` function to ensure that a `DecodeError` is triggered. We can do this by attempting to decode a non-UTF-8 response as UTF-8.",
      "tool_calls": [
        {
          "type": "function",
          "function": {
            "name": "edit",
            "arguments": "{\"start_line\": 7, \"end_line\": 9, \"replacement_text\": \"response = requests.get('http://httpbin.org/bytes/20', stream=True)\\n        for line in response.iter_lines(decode_unicode=True):\\n            pass\\nend_of_edit\"}"
          },
          "id": "call_294fb277d9ca"
        }
      ]
    },
    {
      "role": "tool",
      "tool_call_id": "call_294fb277d9ca",
      "content": "[File: /psf__requests/reproduce.py (25 lines total)]\n1:import requests\n2:from requests.packages.urllib3.exceptions import DecodeError, TimeoutError\n3:\n4:def trigger_decode_error():\n5:    try:\n6:        # Simulate a decode error\n7:        response = requests.get('http://httpbin.org/bytes/20', stream=True)\n8:        for line in response.iter_lines(decode_unicode=True):\n9:            pass\n10:    except DecodeError as e:\n11:        print(\"Caught DecodeError:\", e)\n12:    except requests.exceptions.RequestException as e:\n13:        print(\"Caught requests exception:\", e)\n14:\n15:def trigger_timeout_error():\n16:    try:\n17:        # Simulate a timeout error\n18:        requests.get('http://httpbin.org/delay/10', timeout=1)\n19:    except TimeoutError as e:\n20:        print(\"Caught TimeoutError:\", e)\n21:    except requests.exceptions.RequestException as e:\n22:        print(\"Caught requests exception:\", e)\n23:\n24:trigger_decode_error()\n25:trigger_timeout_error()\nFile updated. Please review the changes and make sure they are correct (correct indentation, no duplicate lines, etc). Edit the file again if necessary.\n(Open file: /psf__requests/reproduce.py)\n(Current directory: /psf__requests)\nbash-$"
    },
    {
      "role": "assistant",
      "content": "Let's run the modified `reproduce.py` script again to see if we can trigger and catch the `DecodeError`.",
      "tool_calls": [
        {
          "type": "function",
          "function": {
            "name": "unknown",
            "arguments": "{\"raw\": \"python reproduce.py\"}"
          },
          "id": "call_1575c2ad1439"
        }
      ]
    },
    {
      "role": "tool",
      "tool_call_id": "call_1575c2ad1439",
      "content": "Caught requests exception: HTTPConnectionPool(host='httpbin.org', port=80): Read timed out. (read timeout=1)\n(Open file: /psf__requests/reproduce.py)\n(Current directory: /psf__requests)\nbash-$"
    },
    {
      "role": "assistant",
      "content": "It seems that the `DecodeError` is still not being triggered. To ensure that we are testing correctly, let's add a print statement before the loop to confirm that the response is being received and processed.",
      "tool_calls": [
        {
          "type": "function",
          "function": {
            "name": "edit",
            "arguments": "{\"start_line\": 7, \"end_line\": 9, \"replacement_text\": \"response = requests.get('http://httpbin.org/bytes/20', stream=True)\\n        print(\\\"Response received, starting to decode...\\\")\\n        for line in response.iter_lines(decode_unicode=True):\\n            pass\\nend_of_edit\"}"
          },
          "id": "call_9462960c6abc"
        }
      ]
    },
    {
      "role": "tool",
      "tool_call_id": "call_9462960c6abc",
      "content": "[File: /psf__requests/reproduce.py (26 lines total)]\n1:import requests\n2:from requests.packages.urllib3.exceptions import DecodeError, TimeoutError\n3:\n4:def trigger_decode_error():\n5:    try:\n6:        # Simulate a decode error\n7:        response = requests.get('http://httpbin.org/bytes/20', stream=True)\n8:        print(\"Response received, starting to decode...\")\n9:        for line in response.iter_lines(decode_unicode=True):\n10:            pass\n11:    except DecodeError as e:\n12:        print(\"Caught DecodeError:\", e)\n13:    except requests.exceptions.RequestException as e:\n14:        print(\"Caught requests exception:\", e)\n15:\n16:def trigger_timeout_error():\n17:    try:\n18:        # Simulate a timeout error\n19:        requests.get('http://httpbin.org/delay/10', timeout=1)\n20:    except TimeoutError as e:\n21:        print(\"Caught TimeoutError:\", e)\n22:    except requests.exceptions.RequestException as e:\n23:        print(\"Caught requests exception:\", e)\n24:\n25:trigger_decode_error()\n26:trigger_timeout_error()\nFile updated. Please review the changes and make sure they are correct (correct indentation, no duplicate lines, etc). Edit the file again if necessary.\n(Open file: /psf__requests/reproduce.py)\n(Current directory: /psf__requests)\nbash-$"
    },
    {
      "role": "assistant",
      "content": "Let's run the modified `reproduce.py` script again to see if the print statement helps us understand why the `DecodeError` is not being triggered.",
      "tool_calls": [
        {
          "type": "function",
          "function": {
            "name": "unknown",
            "arguments": "{\"raw\": \"python reproduce.py\"}"
          },
          "id": "call_4fec90bc3efa"
        }
      ]
    },
    {
      "role": "tool",
      "tool_call_id": "call_4fec90bc3efa",
      "content": "Response received, starting to decode...\nCaught requests exception: HTTPConnectionPool(host='httpbin.org', port=80): Read timed out. (read timeout=1)\n(Open file: /psf__requests/reproduce.py)\n(Current directory: /psf__requests)\nbash-$"
    },
    {
      "role": "assistant",
      "content": "The print statement confirms that the response is being received and processed, but the `DecodeError` is still not being triggered. This suggests that the response from `http://httpbin.org/bytes/20` is not causing a decode error.\n\nLet's modify the URL to one that is more likely to cause a decode error. We can use a URL that returns binary data that is not valid UTF-8.",
      "tool_calls": [
        {
          "type": "function",
          "function": {
            "name": "edit",
            "arguments": "{\"start_line\": 7, \"end_line\": 7, \"replacement_text\": \"response = requests.get('http://httpbin.org/image/png', stream=True)\\nend_of_edit\"}"
          },
          "id": "call_187417993e6c"
        }
      ]
    },
    {
      "role": "tool",
      "tool_call_id": "call_187417993e6c",
      "content": "[File: /psf__requests/reproduce.py (26 lines total)]\n1:import requests\n2:from requests.packages.urllib3.exceptions import DecodeError, TimeoutError\n3:\n4:def trigger_decode_error():\n5:    try:\n6:        # Simulate a decode error\n7:        response = requests.get('http://httpbin.org/image/png', stream=True)\n8:        print(\"Response received, starting to decode...\")\n9:        for line in response.iter_lines(decode_unicode=True):\n10:            pass\n11:    except DecodeError as e:\n12:        print(\"Caught DecodeError:\", e)\n13:    except requests.exceptions.RequestException as e:\n14:        print(\"Caught requests exception:\", e)\n15:\n16:def trigger_timeout_error():\n17:    try:\n18:        # Simulate a timeout error\n19:        requests.get('http://httpbin.org/delay/10', timeout=1)\n20:    except TimeoutError as e:\n21:        print(\"Caught TimeoutError:\", e)\n22:    except requests.exceptions.RequestException as e:\n23:        print(\"Caught requests exception:\", e)\n24:\n25:trigger_decode_error()\n26:trigger_timeout_error()\nFile updated. Please review the changes and make sure they are correct (correct indentation, no duplicate lines, etc). Edit the file again if necessary.\n(Open file: /psf__requests/reproduce.py)\n(Current directory: /psf__requests)\nbash-$"
    },
    {
      "role": "assistant",
      "content": "Let's run the modified `reproduce.py` script again to see if the new URL triggers a `DecodeError`.",
      "tool_calls": [
        {
          "type": "function",
          "function": {
            "name": "unknown",
            "arguments": "{\"raw\": \"python reproduce.py\"}"
          },
          "id": "call_98ce10ddbbe4"
        }
      ]
    },
    {
      "role": "tool",
      "tool_call_id": "call_98ce10ddbbe4",
      "content": "Response received, starting to decode...\nCaught requests exception: HTTPConnectionPool(host='httpbin.org', port=80): Read timed out. (read timeout=1)\n(Open file: /psf__requests/reproduce.py)\n(Current directory: /psf__requests)\nbash-$"
    },
    {
      "role": "assistant",
      "content": "It seems that the `TimeoutError` is still being caught, but the `DecodeError` is not being triggered. To ensure that we are testing correctly, let's add a print statement inside the loop to confirm that the decoding process is being attempted.",
      "tool_calls": [
        {
          "type": "function",
          "function": {
            "name": "edit",
            "arguments": "{\"start_line\": 9, \"end_line\": 9, \"replacement_text\": \"print(line)\\nend_of_edit\"}"
          },
          "id": "call_544ac9269fd0"
        }
      ]
    },
    {
      "role": "tool",
      "tool_call_id": "call_544ac9269fd0",
      "content": "Your proposed edit has introduced new syntax error(s). Please read this error message carefully and then retry editing the file.\n\nERRORS:\n- E999 IndentationError: unexpected indent\n\nThis is how your edit would have looked if applied\n-------------------------------------------------\n[File: /psf__requests/reproduce.py (26 lines total)]\n(2 more lines above)\n3:\n4:def trigger_decode_error():\n5:    try:\n6:        # Simulate a decode error\n7:        response = requests.get('http://httpbin.org/image/png', stream=True)\n8:        print(\"Response received, starting to decode...\")\n9:            print(line)\n10:            pass\n11:    except DecodeError as e:\n12:        print(\"Caught DecodeError:\", e)\n13:    except requests.exceptions.RequestException as e:\n(13 more lines below)\n-------------------------------------------------\n\nThis is the original code before your edit\n-------------------------------------------------\n[File: /psf__requests/reproduce.py (26 lines total)]\n(3 more lines above)\n4:def trigger_decode_error():\n5:    try:\n6:        # Simulate a decode error\n7:        response = requests.get('http://httpbin.org/image/png', stream=True)\n8:        print(\"Response received, starting to decode...\")\n9:        for line in response.iter_lines(decode_unicode=True):\n10:            pass\n11:    except DecodeError as e:\n12:        print(\"Caught DecodeError:\", e)\n13:    except requests.exceptions.RequestException as e:\n14:        print(\"Caught requests exception:\", e)\n(12 more lines below)\n-------------------------------------------------\nYour changes have NOT been applied. Please fix your edit command and try again.\nYou either need to 1) Specify the correct start/end line arguments or 2) Correct your edit code.\nDO NOT re-run the same failed edit command. Running it again will lead to the same error.\n(Open file: /psf__requests/reproduce.py)\n(Current directory: /psf__requests)\nbash-$"
    },
    {
      "role": "assistant",
      "content": "It looks like I made an indentation error. Let's correct the indentation and add the print statement inside the loop properly.",
      "tool_calls": [
        {
          "type": "function",
          "function": {
            "name": "edit",
            "arguments": "{\"start_line\": 9, \"end_line\": 9, \"replacement_text\": \"print(line)\\nend_of_edit\"}"
          },
          "id": "call_76282f1ba9bf"
        }
      ]
    },
    {
      "role": "tool",
      "tool_call_id": "call_76282f1ba9bf",
      "content": "Your proposed edit has introduced new syntax error(s). Please read this error message carefully and then retry editing the file.\n\nERRORS:\n- E999 IndentationError: unexpected indent\n\nThis is how your edit would have looked if applied\n-------------------------------------------------\n[File: /psf__requests/reproduce.py (26 lines total)]\n(2 more lines above)\n3:\n4:def trigger_decode_error():\n5:    try:\n6:        # Simulate a decode error\n7:        response = requests.get('http://httpbin.org/image/png', stream=True)\n8:        print(\"Response received, starting to decode...\")\n9:            print(line)\n10:            pass\n11:    except DecodeError as e:\n12:        print(\"Caught DecodeError:\", e)\n13:    except requests.exceptions.RequestException as e:\n(13 more lines below)\n-------------------------------------------------\n\nThis is the original code before your edit\n-------------------------------------------------\n[File: /psf__requests/reproduce.py (26 lines total)]\n(3 more lines above)\n4:def trigger_decode_error():\n5:    try:\n6:        # Simulate a decode error\n7:        response = requests.get('http://httpbin.org/image/png', stream=True)\n8:        print(\"Response received, starting to decode...\")\n9:        for line in response.iter_lines(decode_unicode=True):\n10:            pass\n11:    except DecodeError as e:\n12:        print(\"Caught DecodeError:\", e)\n13:    except requests.exceptions.RequestException as e:\n14:        print(\"Caught requests exception:\", e)\n(12 more lines below)\n-------------------------------------------------\nYour changes have NOT been applied. Please fix your edit command and try again.\nYou either need to 1) Specify the correct start/end line arguments or 2) Correct your edit code.\nDO NOT re-run the same failed edit command. Running it again will lead to the same error.\n(Open file: /psf__requests/reproduce.py)\n(Current directory: /psf__requests)\nbash-$"
    },
    {
      "role": "assistant",
      "content": "It seems I made the same mistake again. Let's correct the indentation properly this time.",
      "tool_calls": [
        {
          "type": "function",
          "function": {
            "name": "edit",
            "arguments": "{\"start_line\": 9, \"end_line\": 10, \"replacement_text\": \"for line in response.iter_lines(decode_unicode=True):\\n            print(line)\\n            pass\\nend_of_edit\"}"
          },
          "id": "call_cbcf46acd2ec"
        }
      ]
    },
    {
      "role": "tool",
      "tool_call_id": "call_cbcf46acd2ec",
      "content": "[File: /psf__requests/reproduce.py (27 lines total)]\n1:import requests\n2:from requests.packages.urllib3.exceptions import DecodeError, TimeoutError\n3:\n4:def trigger_decode_error():\n5:    try:\n6:        # Simulate a decode error\n7:        response = requests.get('http://httpbin.org/image/png', stream=True)\n8:        print(\"Response received, starting to decode...\")\n9:        for line in response.iter_lines(decode_unicode=True):\n10:            print(line)\n11:            pass\n12:    except DecodeError as e:\n13:        print(\"Caught DecodeError:\", e)\n14:    except requests.exceptions.RequestException as e:\n15:        print(\"Caught requests exception:\", e)\n16:\n17:def trigger_timeout_error():\n18:    try:\n19:        # Simulate a timeout error\n20:        requests.get('http://httpbin.org/delay/10', timeout=1)\n21:    except TimeoutError as e:\n22:        print(\"Caught TimeoutError:\", e)\n23:    except requests.exceptions.RequestException as e:\n24:        print(\"Caught requests exception:\", e)\n25:\n26:trigger_decode_error()\n27:trigger_timeout_error()\nFile updated. Please review the changes and make sure they are correct (correct indentation, no duplicate lines, etc). Edit the file again if necessary.\n(Open file: /psf__requests/reproduce.py)\n(Current directory: /psf__requests)\nbash-$"
    },
    {
      "role": "assistant",
      "content": "Let's run the modified `reproduce.py` script again to see if the new URL triggers a `DecodeError` and to observe the printed lines.",
      "tool_calls": [
        {
          "type": "function",
          "function": {
            "name": "unknown",
            "arguments": "{\"raw\": \"python reproduce.py\"}"
          },
          "id": "call_75e53e62d67c"
        }
      ]
    },
    {
      "role": "tool",
      "tool_call_id": "call_75e53e62d67c",
      "content": "Response received, starting to decode...\nb'\\x89PNG'\nb'\\x1a'\nb'\\x00\\x00\\x00'\nb'IHDR\\x00\\x00\\x00d\\x00\\x00\\x00d\\x08\\x02\\x00\\x00\\x00\\xff\\x80\\x02\\x03\\x00\\x00\\x1faIDATx\\x9c\\xdd}wXS\\xd9\\xd6\\xfeJ#\\xa1\\x17\\xc1 \\x02\\xa1\\x08\\xc1J\\x19\\x11E\\x10\\x1c\\x11\\x14\\x10\\xf8tl(\\xea\\xd8FGGT\\xac\\x9f\\\\\\xeb\\x8c\\x0eV\\xd4\\xb1\\xdca\\xe4'\nb'\\xb6\\x11\\x1bEA\\x14QA\\x94&\\x82\\xa2B\\x00EzoI \\x10\\x92\\xf3\\xfbc\\x87\\x10!\\xc4$D\\x7fw\\xbe\\xf7\\xe1\\xe199gg\\xadu\\xde\\xb3\\xf7>{\\xaf\\xbd\\xd6\\x0e\\x0e\\xc30\\x00`\\xb3\\xd9\\xc7\\x8e\\x1dKJJ\\xca\\xc9\\xc9\\xe9\\xec\\xec$\\x93\\xc9\\x14'\nb'\\x85\\xdc\\x03UUU\\x1a\\x8dfjjjbbbjj\\x8a\\x0eTTT`\\x10\\xc00\\xac\\xbc\\xbc\\xbc\\xb0\\xb0\\x90\\xc1`0\\x18\\x8c\\xf2\\xf2r&\\x93\\xc9b\\xb1\\x98L&\\x93\\xc9\\xe4\\xf3\\xf9\\xea\"000\\xb0\\xec\\x81\\x89\\x89\\t\\x81@\\x18\\x8c\\xea\\xf6\\xf6\\xf6\\xd2\\xd2\\xd2\\x8f\\x1f?~\\xfc\\xf8\\x11\\x1d|\\xfa\\xf4\\x89\\xcdfw\\x8a\\x80\\xc3\\xe1\\x90\\xc9d;;;77\\xb7\\xa0\\xa0 UUU\\x81\\xd1\\xa9\\xa9\\xa9&&&2\\xe9\\xc3\\xe3\\xf1vvvAAAw\\xef\\xdemmm\\xc5\\xa4Fyy\\xf9\\x993g\\xa6O\\x9f\\xae\\xac\\xac,\\xdf\\xad*))9;;\\x1f;v\\xac\\xa4\\xa4Dz\\xbd\\xad\\xad\\xadw\\xef\\xde'\nb''\nb\"\\xb2\\xb3\\xb3\\xc3\\xe3\\xf12i411IMM\\xc50\\x0c\\xc7f\\xb3\\xad\\xac\\xac\\xca\\xcb\\xcb\\x01\\xc0\\xd6\\xd4t2\\x9d\\xae\\xa9\\xa2\\xc2\\xe1r;\\xb9\\xdcN.\\x17\\x1d\\xb4wu\\x9574|\\xac\\xabk\\xeb\\xe8\\xe8/\\x8b@ \\xd8\\xd9\\xd9yyy-_\\xbe\\xdc\\xc8\\xc8H\\xac\\xbe\\xfc\\xfc\\xfc\\xe8\\xe8\\xe8\\x98\\x98\\x98\\xec\\xec\\xec\\xfeWU\\xc9d\\x9a\\x9e\\x9e\\x86\\xb2\\xb2\\x86\\x8a\\x8a:\\x85\\xa2\\xa1\\xa2\\x82\\x03`r8m\\xed\\xed\\xe8\\x7fYC\\x83X\\xd5c\\xc6\\x8c\\xf1\\xf3\\xf3\\xf3\\xf5\\xf5\\x1d?~\\xbcX\\xbd\\xe5\\xe5\\xe5\\xe1\\xe1\\xe1\\xf7\\xee\\xdd\\xcb\\xc9\\xc9\\xe1\\xf1x\\xfd\\x0bh(+\\x9b\\x0e\\x1dj\\xa4\\xab\\xab\\xa2\\xa4D&\\x91($\\x12\\x99DB\\x07\\xad\\xed\\xedi\\x85\\x85\\xaf>~\\x04\\x00##\\xa3\\x82\\x82\\x02\\xdc\\xbe}\\xfb\\xf6\\xec\\xd9\\x03\\x00!\\x8b\\x16m\\xf3\\xf5\\x1d\\x90^\\x00\\x00hb\\xb1J\\xeb\\xeb?\\xd6\\xd5\\xbd)+{\\xf2\\xf6mzQQ'\\x97+\\xbc\\x8a\\xc7\\xe3g\\xce\\x9c\\xb9z\\xf5j///\\x02\\x81\\xc0\\xe3\\xf1\\xd2\\xd2\\xd2bbbbbbJJJD\\xe5\\x18\\xeb\\xea\\xce\\xb0\\xb1\\x19cdd5|\\xb8\\xd5\\xf0\\xe1\\x86::8\\x1cN\\xb2\\xea\\xea\\xe6\\xe6\\x82\\xaa\\xaa\\xc2\\xaa\\xaaw\\x15\\x15\\x0f\\xf2\\xf2\"\nb'\\xab\\xaaD\\xaf\\x1a\\x1a\\x1a\\xfa\\xf8\\xf8\\xf8\\xf9\\xf9\\xb9\\xba\\xba\\x92H$\\x1e\\x8fw\\xef\\xde\\xbd?\\xff\\xfc3!!\\x81\\xcf\\xe7\\x0b\\x8b\\x91I\\xa4\\x89\\x16\\x16\\xae\\xa3G\\x8f566\\x1d:\\xd4DOOGMM\\xb2\\xde\\xc311\\xdb\\xaf\\\\\\x01\\x80}\\xfb\\xf6\\xe1\\xa6L\\x99\\x92\\x92\\x922\\x8eF\\xcb=|\\x18Y\\\\\\xd1\\xd8\\xf8Wr\\xf2\\xd3w\\xef\\xf08\\x1c\\x1e\\x87\\xc3\\xe3\\xf1d\"\\xd1\\xd6\\xd4t\\x92\\xa5\\xa5\\x83\\x85\\x856j\\xbd\\x00\\x00\\xc0\\xe1r\\x9f\\x17\\x16>~\\xfb6177K\\x84\\x0e\\x03\\x03\\x03{{\\xfb\\x97/_VTT\\x88*\\xb6\\xa6\\xd1|\\xed\\xed\\xfd\\xec\\xedmMM%\\x9b\\xf8E\\x14TV\\xc6dgGgff\\x14\\x17\\xa3n\\x17AWW\\xd7\\xde\\xde>77\\xb7\\xba\\xbaZx\\xd2\\xde\\xdc\\xdc\\xc3\\xc6f\\xea\\xe8\\xd1\\x8et:\\x85D\\x02\\x80f6;\\x9d\\xc1H/*z\\xc1`d\\x16\\x17\\xb7\\xb6\\xb7\\x0b\\x0b\\x9bQ\\xa9\\xcb\\xa7N\\xdd0s\\xa6\\xba\\xb22\\x00`\\x18f\\xb3m\\xdb\\xebO\\x9f\\xa6L\\x99\\x82\\xb3\\xb0\\xb0(**'\nb\"\\x982%r\\xfdz\\x00\\xc8\\xfb\\xf4i\\xfc\\x8e\\x1d\\xdd\\xe2j,\\x00\\xe0p8\\xba\\x81\\xc1\\xb41c\\xd6\\xcd\\x981r\\xf8p\\xd1Ko\\xca\\xca\\xfeLJ\\xba\\x9c\\x9a\\xda\\xc2f\\x8b\\x9e'\\x12\\x08\\xceVV~\\x13&\\xf8\\x8c\\x1fo\\xa2\\xa77H\\x8e\\xfa\\xa3\\xa6\\xa5%6;;:++9?_\\xb4\\x9a\\x03\\x80\\x96\\xaa\\xeabg\\xe7\\xd5nnc\\x8d\\x8d\\xd1\\x19>\\x86\\xdd\\xcb\\xc99\\x9d\\x90\\x90\\xf4\\xe6\\x8d(\\xc5\\xfd\\xb1r\\xda\\xb4\\xb0\\x9f~B\\xc7K\\xfe\\xf8\\xe3RJ\\x8a\\x85\\x85\\x05\\x11=\\x01}--taOT\\x14bj\\x8c\\x91\\x91\\x8e\\x9a\\x1a\\x8f\\xcf\\xe7cX\\x0b\\x9b]XU\\xc5\\xc70\\x0c\\xc3\"\nb\"*+\\x0b*+\\xcf>x\\xe0>n\\xdcfoowkk\\xf4\\xc5\\xb1\\xc6\\xc6^vv\\xe1\\x8f\\x1f\\x0b\\xf5\\x19\\x0e\\x19\\xf2\\xaf9s\\xe6N\\x9a$Z\\x19\\x15\\x0e}-\\xad\\xd5nn\\xab\\xdd\\xdc\\x98\\x1d\\x1d1\\xd9\\xd9\\x07n\\xded\\xf4\\xd4)\\x0e\\x97\\x8bZ\\x1c\\xfax95u\\xf7\\xf5\\xeb\\x1f\\xeb\\xea\\x84\\xdfE\\xcf\\xde\\xd1\\xd2\\xd2HW\\x17\\x9d\\xe1\\xf1\\xf97\\xd3\\xd3\\x0b*+/$'\\xff\\xba`\\x01USSHNuu5\\xb1\\xbb\\xbb\\x1b\\x00\\x08=/\\x08\\x1e\\x9f\\x0f\\x00;\\xff\\xe7\\x7f\\x0e.\\\\(jS[GGVqqzQ\\xd1\\xe3\\xb7o\\x93\\xf3\\xf31\\x0cK\\xcc\\xcbK\\xcc\\xcb{\\x10\\x1c<}\\xdc\\xb8\\xa2\\xea\\xea\\xa0\\xc8\\xc8\\xb8\\x97/QaM\\x15\\x95\\x1d~~\\x81\\x9e\\x9e\\xcaJJ_\\x8b\\xa4~PWV^\\xec\\xec\\xbc\\xc0\\xd11\\xec\\xd1\\xa3}7n\\xd4\\xb6\\xb6r\\xba\\xba~8vl\\xea\\xe8\\xd1'\\x96-\\xa3jj.\\xfd\\xe3\\x0f>\\x86!\\xf3\\x96\\xba\\xb8L\\x1f7n\\x92\\xa5\\xe5\\x10u\\xf5>rV\\xbb\\xb9y\\xff\\xfe\\xbb\\x8e\\x9a\\xdaP\"\nb''\nb't\\x06\\x91\\xd3\\xdd\\xdd\\x8d\\xa3R\\xa9\\xb5\\xb5\\xb5k\\xdd\\xdd\\xcf\\xae\\\\\\t\\x00,\\x0e\\xe7S}\\xfd(CC\\t=nQu\\xf5\\x99\\xc4\\xc4\\x8bO\\x9e\\xb08\\x9c\\x87\\xff\\xfa\\xd7\\xcd\\xf4\\xf4?\\x1f>\\xec\\xe6\\xf3\\x01@\\x89H\\\\\\xeb\\xee\\xfe\\xaf9s\\xfa\\x1b\\xf1-\\xc1\\xe2p\\x8e\\xc5\\xc5\\x1d\\x8d\\x8bcq8\\x00\\x80\\xc3\\xe1\\xfc\\x9d\\x9c\\xda\\xda\\xdbK\\xeb\\xebW\\xbb\\xb9-suU\\xa3P\\xa4\\x97\\xf6\\xf3_\\x7f\\x9d{\\xf0\\x80J\\xa5\\xe2\\xe8tzaa\\xa1\\xbf\\x93\\xd3\\x95'\nb'\\x1bd2\\x88\\xc3\\xe5\\x96\\xd6\\xd7/:y2\\xe7\\xe3Gd\\xd0|G\\xc7\\xdf\\x16,0\\xa3Re\\x92\\xf3\\xf5P\\xd7\\xda\\xba\\xef\\xe6\\xcd\\xb0\\xa4$.\\x8f\\x07\\x00\\x16\\xc3\\x86\\xc5n\\xdbf\\xf5yW+'\nb'\\x16\\x9f>}%5\\x95N\\xa7\\xe3555\\x01@\\xec(F2r>|p\\xdd\\xb3\\x071\\xe5<rd\\xe6\\xc1\\x83\\xd7\\x02\\x03\\xff{\\x98\\x02\\x80\\xa1\\x9a\\x9agV\\xacx{\\xfc\\xb8\\x9f\\xbd=\\x00\\x14UWO\\xdc\\xb5+\\xe1\\xd5+Y\\xe5\\xa0w\\xa5\\xa6\\xa6\\xa6\\x80,\\xd1w\\xa74\\xb8\\xf8\\xe4\\xc9\\xd4}\\xfbj[[\\x01`\\xb3\\xb7\\xf7\\xe3={\\xc6\\x9b\\x9b\\xcbj\\xc4\\xb7\\x81\\xc5\\xb0aw\\xb6n=\\x12\\x10\\x80\\xc7\\xe1Z\\xdb\\xdb\\xbd\\x7f\\xff\\xfdh\\\\\\x9cL\\x12z\\xc9\\xd2\\xd2\\xd2\\x02\\x80&\\x16K\\xcao\\xf2\\xf8\\xfc\\xa0\\xc8\\xc8\\x1f\\xcf\\x9e\\xed\\xea\\xeeV\"\\x12\\xc3\\xd7\\xae=\\xb6d\\tA\\xc6\\t\\xc4\\xb7\\xc7\\x96Y\\xb3\\xe2v\\xec\\xd0PV\\xe6c\\xd8\\xd6K\\x97\\x96\\x9e9\\xd3g\\x9c!\\x01\\x88\\x1c---<\\x9a\\xa0|\\xa8\\xad\\x95<\\xee@hmo\\xf7:t\\xe8\\xf8\\xdd\\xbb\\x00@\\xd5\\xd4|\\xbcg\\xcf\\x8fS\\xa7\\x0e\\xe2\\x16\\xbe)<mm_\\xfc\\xf6\\x1b\\xea(\"\\x9f>u\\xdd\\xbb\\xb7\\xa6\\xa5\\xe5\\x8b\\xdf\\xc20\\xecCm-\\x00\\x18\\x1b\\x1b\\xe3\\xad\\xac\\xac\\x00\\xa0\\xa3\\xab\\xab\\xb2\\xa9I\\xf2\\xd7Jjk\\x1d\\xfe\\xf7\\x7f\\x13\\xf3\\xf2\\x00\\xc0\\xc6\\xc4$\\xeb\\xf7\\xdf\\x1d\\xe9\\xf4\\xc1\\xdf\\xc3\\xb7\\xc4(C\\xc3\\xcc\\x83\\x07]G\\x8f\\x06\\x80\\xf4\\xa2\"\\xfb\\x9d;sKK%\\x7f\\xa5\\xb2\\xa9\\xa9\\xa3\\xab\\x0b\\x00\\xe8t:\\x9e\\xdes\\xc3E55\\x12\\xbe\\x83\\xea\\x14\\x9a\\x91\\xfd0qb\\xda\\x81\\x03FC\\x86(\\xe4\\x06\\xbe1\\x86\\xa8\\xab?\\x08\\x0e\\xfei\\xfat\\x00\\xa8hl\\xf4<tHr-\\x11\\xd2\\xf2\\x19Y\\x8c\\xcf\\xa7\\xa6\\xa2\\xe0\\xf1\\xf9\\xf3O\\x9c@Lm\\x995+j\\xd3&\\x152Ya\\xe6\\x7fs\\x90\\x08\\x84\\xf3\\xabV\\x1d\\t\\x08\\x00\\x80\\xea\\xe6f\\xbf#GP\\xdd\\x11\\x0b!-t:\\x1dO\\xa5RQ\\x1f/\\xa1fm\\xbb|\\x19\\xb5\\xbe\\x1f&N<\\xbcx\\xf1\\x17=\\x04\\xff\\x08l\\x995k\\x9d\\x87\\x07\\x00d\\x97\\x94\\xfcx\\xf6\\xec@\\xc5\\x10-ZZZT*\\x15\\x0f\\x00\\xa8\\xdbz\\xc1`\\x88-}\\xf1\\xc9\\x13\\xd4\\xa3\\xdb\\x98\\x98D\\xac[\\xf7\\x7f\\x83)\\x84\\xd0e\\xcb\\xa6\\x8d\\x1d\\x0b\\x00\\xd7\\x9f?\\xff\\xf5\\xd6-\\xb1e\\x10-\\x88\"<\\x00\\xb8\\xb8\\xb8\\x00@fq1\\xb3\\xdf\\xd0\\xf4ya\\xe1O\\x7f\\xfe\\t\\x00TM\\xcd\\xd8\\xed\\xdb\\xff\\xd1\\xad\\xaf?\\x88\\x04\\xc2\\x8d\\xcd\\x9bG\\xe8\\xeb\\x03\\xc0\\xee\\xa8\\xa8;\\x99\\x99}'\nb'0;:2\\x8b\\x8b\\xa1\\x87\"<\\x00L\\x9b6'\nb'\\x00\\xbay\\xbc\\xa7\\xef\\xde\\x89\\x16-ol\\x9c}\\xf4(\\x1aO\\xdd\\xde\\xb2\\xe5\\x1f\\xda\\xa3K\\x86\\xb6\\xaaj\\xdc\\xf6\\xed\\x9a**\\x18\\x86\\x05\\x9c>\\x9d\\xf7\\xe9\\x93\\xe8\\xd5\\xa7\\xef\\xde!\\x1f\\x0c\\xa2\\x08\\x0f\\x00NNNd2\\x19\\x00\\x92\\xde\\xbc\\x11\\x96k\\xef\\xec\\xf4;|\\x18\\x8d\\xd1\\xcf\\xafZ\\xf5\\x8f\\x1b%H\\x0f\\xab\\xe1\\xc3\\xff\\xde\\xb8\\x91\\x80\\xc7\\xb3;;}BB\\xeaZ[\\x85\\x97\\x10!d2\\xd9\\xc9\\xc9\\t\\x10Y\\xca\\xca\\xca\\x8e\\x8e\\x8e\\x00\\xf0H\\x84\\xac\\xad\\x97/\\xa3y\\xdffo\\xef\\x7f\\xd0\\xc8S>\\xcc\\xb0\\xb19\\xbcx1\\x00\\x9454\\xac\\t\\x0b\\x13\\x9eG\\x848::\\xa2\\xe5\\x15\\xc14\\x05U\\xb3\\xfc\\xf2r4Z-\\xaa\\xae\\xfe3)\\t\\x00\\x9cG\\x8eDR\\xfe\\xcfc\\xb3\\xb7\\xb7\\xbf\\x93\\x13\\x00\\xdc\\xc9\\xcc|^X\\x08\\x00\\x1fjk\\xf3\\xcb\\xcb\\xa1\\x87\\x1c\\x10\\x925w\\xee\\\\tp\\xf1\\xc9\\x13\\x00\\xd8q\\xf5j7\\x8f\\x87\\xc3\\xe1\\x8e\\xff\\x13\\xe6}\\x8a\\xc2\\xd1\\x80\\x00\\xf4\\x06\\xdbz\\xf92\\xf4P\\x01\"\\xe4\\x08\\x88\\xb0\\xb4\\xb4D\\xcd2\\xe2\\xe9\\xd3g\\x05\\x05\\xb732\\x00`\\xbe\\xa3\\xe3\\x7f\\xad/\\xe1k`\\x98\\xb6\\xf6FOO\\x00x^Xx\\xe3\\xc5\\x8b\\x88\\xa7O\\x01\\xc0\\xc9\\xc9\\xc9\\xd2\\xd2\\x12\\x15\\xc0\\t\\xe7\\xcf\\xe1\\xe1\\xe1+V\\xac\\x00\\x005'\nb'\\x85\\xc5\\xe1(\\x11\\x89\\xefO\\x9c\\xf8\\xaf\\xf2O}\\x03\\xb4ut\\x98\\xad_\\xdf\\xc8dRH$\\x0e\\x97\\x0b\\x00\\x17.\\\\X\\xbe|9\\xba\\xdaK\\x16\\x8b\\xc5\\x1a6l\\x18\\xab\\xc7W\\xb3\\xd1\\xcb\\xeb\\xc4\\xd2\\xa5\\x83W\\xcf\\xe3\\xf3\\xdfUT\\xa0\\x852{s\\xf3Q\\x86\\x86'\nb'l\\xd7\\xf5mmB\\xc9z=.\\xf3A\"\\xf4\\xde\\xbdM\\x11\\x11\\xe8XMM\\xad\\xba\\xbaZ\\xadgm\\x11\\'\\xea\\x99\\xf9\\xf1\\xc7\\x1f/^\\xbc\\x08\\x00\\x9a**%\\xa7O\\x0f\\xd2\\x8f\\xce\\xe5\\xf1~\\xbd}\\xfbD|\\xbc\\x81\\xbe\\xbe\\x8d\\x8d'\nb\"\\x00\\xe4\\xe6\\xe6V\\xd5\\xd4l\\xf2\\xf4\\x0c\\x9e=\\x9b4\\x88x\\x05\\x0c\\xc3\\xce'%\\x85\\xc4\\xc5\\xb18\\x9c\\xeflm\\x01\\xe0\\xe5\\xabWj\\x14\\xca\\xf6Y\\xb3\\xd6\\xb8\\xb9\"\nb\"r\\x8e\\xd1\\xd5\\xddM\\x0f\\x0c,\\xad\\xaf\\x07\\x80\\x80\\x80\\x80\\xc8\\xc8H\\xe1%\\xa2h9CCCt\\xb0\\xc3\\xcfo\\x90L\\x15UW\\xcf;u\\xca\\xd0\\xc2\\xa2\\x80\\xc1000\\x10\\x9e\\xaf\\xaa\\xaa\\xfai\\xc5\\x8a\\t\\xc1\\xc1Q\\x1b6X\\x0c\\x1b&\\x87\\xe4\\xaa\\xe6\\xe6\\xa5\\xe7\\xcf\\xb7\\xe1p1\\xf7\\xef[\\xf7,\\xc4\\x01@^^\\xde\\xea\\xe5\\xcboggG\\xacYc\\xa0\\xad-\\xb7\\xe5JD\\xe2\\x81\\x05\\x0b\\x02N\\x9f\\x06\\x00\\xf2\\xe73\\x96\\xde\\x16\\xc1\\xe3\\xf1.]\\xba\\x04\\x00\\x86C\\x86\\x04zz\\xca\\xad\\x0c\\x00\\xb8<\\xde\\xdcS\\xa7\\x96\\xae[\\x17\\x97\\x90PUU\\xb5p\\xe1Bsssss\\xf3\\x85\\x0b\\x17VUU\\xc5%$,]\\xb7n\\xee\\xa9S\\xdc\\x01\\x96r%\\x80\\x8fa\\xf3N\\x9d\\xb2\\xf7\\xf0x\\x9e\\x99\\xc9\\xe5rE%s\\xb9\\xdc\\xe7\\x99\\x99\\xf6\\x1e\\x1e\\xf3N\\x9d\\xe2K\\xe1\\xc8\\x94\\x00\\x7f''k\\x1a\"\nb'\\x00\\xae_\\xbf\\xde\"\\xe2 \\xecm\\x86)))h\\x06\\xf4\\xef\\xd5\\xabW\\xbb\\xb9'\nb\"FY\\xf0\\xf5\\xebo::b\\xee\\xdd;q\\xe2\\xc4\\xb6m\\xdb\\xd0\\xd2$\\x02\\x91H<|\\xf8\\xf0\\xa6M\\x9b|\\xbd\\xbc\\xc6*+\\xff:\\x7f\\xbeL\\x92\\x8f\\xdd\\xbd\\x1b_Z\\x9a\\xf4\\xe4Ihh\\xa8X\\xc9\\x1b7ntsu\\xf541\\t\\xf2\\xf6\\x1e\\xcc-\\xc4fg\\xfb\\x1e>\\x0c\\x00\\x11\\x11\\x11K\\x96,A'{\\xc9\"\nb''\nb''\nb':~\\xfc8\\x91@\\xa8\\xfb\\xeb\\xaf\\xc1\\xac!wuw\\xeb\\xaeZ\\xc5(..++stt\\xec\\x1f\\xbbB \\x10\\x9e?\\x7fnlll9bDCX\\x98\\x12\\x91(VN\\x7f\\xf0\\xf8\\xfc!+W\\xbez\\xfd\\xba\\xbe\\xbe^\\x82d===\\xdbq\\xe3\\x1a\\xff\\xfak0o\\x12.\\x8f7t\\xe5\\xca\\x166{\\xf6\\xec\\xd9\\xb7z\\x1c\\x12\\xbd\\xe2bbb\\x00\\xc0\\xd9\\xcaj\\x90\\xab\\xedo\\xca\\xcaL\\x8d\\x8d\\xf5\\xf5\\xf5CBB\\xc4F\\xf9\\xf0x\\xbc\\x90\\x90\\x10}}}Sc\\xe37ee\\xd2K~[^n\\xa0\\xafojj*Y\\xb2\\xa9\\xa9\\xa9\\x81\\xbe\\xfe\\xdb\\xf2r\\xf9\\xef\\x01\\x80D x\\xda\\xda\\x02@bb\"\\x87\\xc3A\\'\\x05d\\xe5\\xe7\\xe7\\xa3\\xa8 \\xbf\\t\\x13\\x06\\xa3\\x03\\x00\\xb2JJl\\xec\\xec\\x00 \\xb3\\x9f\\xc7C\\x08t\\xc9\\xc6\\xce.\\xeb\\xf3P\\xa4/K\\xb6\\xb5\\x95J\\xb2\\xad\\xadL\\x92\\xc5\\x02\\xad6\\xb2\\xd9\\xec\\xa4\\xa4$tF@Vtt4:\\xf0\\x19 *Lz\\xf0\\xf8|\\x14\\xc6(\\xf6\\xe1\\x0b\\xca\\xf0x\\x00@ \\x10x\"\\xc1S_\\x04\\x8b\\xc3QSW\\x97F\\xb2\\x9a\\xba:\\xab\\xa7:\\xc8\\x8d\\x1966d\\x12\\tD\\xc8\\x11\\x90\\x85\\xda\\xa05\\x8d6\\xf8\\xa8\\xa0\\xf1ff\\xb999\\x00`oo?P\\x19t)7\\'\\xe7;33\\xe9%\\x7f\\xf7\\xd5$\\x8b\\x85\\xba\\xb2\\xf2\\xf7c\\xc6\\x00@\\\\\\\\\\x1c\\x8a\\x88\\xc3\\x03@EE\\x05\\x8a^\\xf4\\x1d\\xd8\\x08\\xe9amb\\xc2()ijj\\xda\\xbcy\\xb3\\xd8\\xf1!\\x0e\\x87\\xdb\\xbcysSS\\x13\\xa3\\xa4\\xc4F\\x96XV;S\\xd3\\xf7\\x0c\\x06\\x9b\\xcd\\x96,\\x99\\xcdf\\xbfg0\\xec\\x06\\x1d/\\x07=-\\xb1\\xae\\xae\\xee\\xc5\\x8b\\x17\\x80\\xc8\\x8a\\x8d\\x8d\\x15\\xbd6HPH\\xa4Unn\\x1b~\\xfe\\xd9\\xc5\\xc5e\\xf7\\xee\\xdd\\xfd\\x0b\\xec\\xde\\xbd\\xdb\\xc5\\xc5e\\xc3\\xcf?\\xafrsCqxRB\\x85L\\x9e;i\\xd2\\xf6-[$K\\xde\\xbee\\xcb\\xdcI\\x93\\x14\\xe2\\x01\\xf7\\x19?\\x1e=\\x15\\xd4\\xf2\\xf0\\xd0\\xd3&\\x8duu\\x07\\x1f\\xbd\\x88\\xf0\\xdb\\xbcy\\x19\\xcf\\x9eEDD\\xec\\xdd\\xbb711\\xf1\\xfb\\xef\\xbf\\xd7\\xd6\\xd6\\xd6\\xd6\\xd6\\xfe\\xfe\\xfb\\xef\\x13\\x13\\x13\\xf7\\xee\\xdd\\x1b\\x11\\x11\\x91\\xf1\\xec\\xd9o\\xf3\\xe6\\xc9*\\xf9D@@\\xdc\\x9d;\\xf1\\xf1\\xf1\\x03I\\x8e\\x8f\\x8f\\x8f\\xbbs\\xe7D@\\x80BnD_K\\xcba\\xc4\\x08\\xe8!\\x0b\\xc7\\xe7\\xf3UUU;::V\\xbb\\xb9\\xfd{\\xf5j\\x85\\xe8\\x00\\x80\\xbcO\\x9f\\xe6\\x9e<i?y\\xf2\\x1f\\xe7\\xcei\\x8bL>\\x9a\\x9b\\x9b\\xd7\\xaf]\\x9b\\x95\\x96v#0\\x10\\x8d\\x92eEZa\\xe1\\xdc\\x93\\'\\x17.^\\xfc\\xdb\\xa1C\\x14\\x910+\\x0e\\x87\\xb3k\\xe7\\xcek\\x97/\\xdf\\x08\\x0c\\x9c\\xac8\\'\\xf8o\\xb7o\\x07\\xff\\xfd7\\x00455\\x11\\xcb\\xcb\\xcb;::\\x00`\\xcc\\x00Q\\xd9}\\xd1\\xdd'\nb'--\\xc0b\\x01\\x87\\x03<\\x1e\\x10\\x08@\\xa1\\x80\\x9a\\x1ahk\\x83\\xc8\\xdc\\xd8\\x9aF\\xcb=th\\xe7\\xf5\\xeb4#\\xa3q\\xa3G\\x7f7a\\x02\\x00\\xbc\\xcc\\xcc|\\xfd\\xf6\\xed\\x8fS\\xa7\\xe6\\x1e:$w3\\x99L\\xa7\\xbf\\t\\t\\xf9\\xf9\\xe2E3\\x1a\\xcdq\\xe2\\xc4\\xef\\x1c\\x1c\\x00\\xe0eF\\xc6\\xf3\\xf4tg:\\xfdMH\\x88\\x98Y\\xadt6\\x8b\\x850\\xca\\xb2\\xa0\\xa0\\x00\\xf7\\xe0\\xc1\\x03www\\x00@\\x01\\x8f_\\xb0\\xb4\\xa6\\x06\\x1a\\x1b\\x01\\xbd\\xef1\\x0c0\\x0cp8@}-\\x1e\\x0f\\xba\\xba\\xd0\\xcf\\xff\\xc5\\xee\\xec\\xcc\\xf9\\xf0A\\xe8H\\xb133SU\\xd0zZi}}Vqq\\xd6\\xc7\\x8f\\x00`ojj?b\\x84\\xf8W\\xb9\\xec6\\x8b\\xa2\\xa0\\xb2r\\xe4\\xa6M\\x00\\x10\\x1e\\x1eNd\\xf4\\xac\\xad~!$\\x8e\\xc7\\x83\\xb22`\\xb3\\x81\\xcf\\x07>\\x1fx<\\x81V\\xf4\\x9f@\\x00\\x0c\\x83\\xfazho\\x07\\x1a'\nb'D\\xe6\\x19\\xaad\\xb2\\xf3\\xc8\\x91\\xce#G\\xcaD\\x8440\\xd1\\xd33\\xd1\\xd3\\x9b;i\\x92\\xc2m\\x16\\x85\\x19\\x95J\\xc0\\xe3y|~AA\\x01\\xb1\\xb0\\xb0\\x10\\xdd\\x92\\xa1\\x8e\\x8e$\\xd3\\x90\\xd6\\xee\\xee^\\xad|\\xbe@+\\x1e\\x0f|>\\x10\\x08\\x80\\xc7\\x03\\x9b'\nb'\\xe5\\xe5 cg\\xd4\\xd6\\xd1\\xf1\\x82\\xc1(\\xa9\\xa9\\xa9okk`2\\x1b\\x98L\\x00\\xd0UW\\xd7UW\\xd7\\xd3\\xd00\\xd7\\xd7\\x9fdi\\xa9!G\\xfa\\x8a\"lV\"\\x12M\\xf4\\xf4Jjk\\x0b\\x0b\\x0b\\x89(\\xae\\x9f\\xa6\\xa7\\'\\xc9gVS#\\xd0\\xda\\xdd'\nb'<\\x9e@7\\x80@1\\x00\\x10\\x08\\x02\\xdd\\x00\\xc0dBc#|iE\\x16\\xc3\\xb0\\xe4\\xfc\\xfc[\\x19\\x19i\\x85\\x85\\xf9ee\\x92\\x9d*x\\x1cn\\x8c\\xb1\\xf1d:}\\x8e\\x83\\xc3\\xf7c\\xc6H\\xe5\\xdeS\\x9c\\xcd4=\\xbd\\x92\\xda\\xda\\xba\\xba:\"\\x93\\xc9\\x04\\x00I\\xcf\\x8d\\xcb\\x85\\xa6&AMF*\\x85\\xbaQ\\x95F\\xf5\\x99@\\x00\\x1cNP\\xa6\\xb6\\x16tt`\\x80[\\xaaok\\xfb\\xcf\\xe3\\xc7a\\x8f\\x1e\\x15\\xf7\\x0bE\\xc1\\xe3\\xf1\\xda\\x1a\\x1a\\xba\\xda\\xda\\x00\\xd0\\xd0\\xdc\\xdc\\xdc\\xd6\\x86\\x86\\xce|\\x0c{\\xfd\\xe9\\xd3\\xebO\\x9f\\xce=x0B_\\x7f\\xd5\\xb4i?N\\x9d*\\xc9\\x8f\\xacP\\x9b\\x119L&\\xb3\\x87,\\t\\xf9p--\\x02e<\\x9e\\xe0)\\tu\\xf3\\xf9\\x80\\xc7\\x0b\\xb4\"\\xa0\\xbe\\x13\\x87\\x83\\x8e\\x0e\\xe8\\'\\x93\\xc7\\xe7\\x9fNH\\xd8\\x1d\\x15%\\x0c\\xaaP\\xa1P\\x1cmm\\'\\xdb\\xda:\\xda\\xda\\xdaXY\\xe9ji\\x89\\xa6l\\xf1\\xf9\\xfc\\x86\\x96\\x96\\xdc\\x82\\x82\\xe7\\xaf^\\xa5\\xbdz\\xf5\\xfc\\xd5\\xabv\\x0e\\xa7\\xb8\\xa6f\\xfb\\x95+\\xbf\\xde\\xbe\\xbd\\x7f\\xde\\xbc_f\\xce\\x14\\xef\\x87Q\\x9c\\xcdBrX,\\x16\\x11\\xadP\\xa8K\\x88\\x0bg2\\x05\\xad]\\xf4Aq\\xb9\\xbd\\x8a\\x91\\xb9H\\x1f:\\x89a\\xd0\\xd6\\xd6GqvI\\xc9\\xaa\\x7f\\xff[\\x18i7z\\xc4\\x885\\xf3\\xe7/\\xf1\\xf1\\xd1\\x188\\xd5\\x08\\x8f\\xc7\\x0f\\xd5\\xd1qwttwt\\x04\\x806\\x16+26\\xf6\\xfc\\xf5\\xebo\\x8b\\x8b\\x99\\x1d\\x1d\\x9b\"\"\"\\x9e>'\nb\"\\xfb\\xe9'1\\xebu\"\nb'\\xb2\\x19\\x01\\x91\\xc3d2\\xf1_\\xaeY\\x9d\\x9d\\x00=/]\\x80\\xcf\\x9e\\x98\\xb0G@\\x7f\\xa2\\xc5\\x98LQ\\x19\\xb732\\x9cw\\xefFLY\\xd0h\\xf1\\xe7\\xcf\\xe7\\xc7\\xc4\\xac\\xf7\\xf7\\x97\\xc0T\\x7fh\\xa8\\xa9\\xad\\xf7\\xf7\\xcf\\x8f\\x89\\x89?\\x7f\\xde\\x82F\\x03\\x80\\xdc\\xd2R\\xe7\\xdd\\xbb\\xd1*\\xa7\\xc2m\\xee\\xd5\\xab\\xa2\" \\x0bu'\nb'\\x92:L\\xc4\\xba\\xf0\\x18\\x01=7\\xf4\\xa2\\x11{U\\xa4\\xc3>\\x9b\\x988\\xf7\\xf8q\\x0e\\x97K\"\\x12\\x0f\\xfc\\xf2\\xcb\\x9b\\xe8\\xe8\\x99\\xce\\xce_\\xe6f`\\xcctv~\\x13\\x1d}\\xe0\\x97_HD\"\\x87\\xcb\\x9d{\\xfc\\xf8\\xd9\\xc4D\\xc5\\xda,'\nb'\\x9c\\xa0 \\x1f\\xaf\\xae\\xae\\x0e\\x00\\xcc/z\\x7fP\\xbf(\\xec P\\x05F\\x1d\\xa4\\xb0SD}\\x01\\xfa\\xd8\\xd3\\xae/\\xa7\\xa6\\xae\\xbbp\\x81\\x8fa\\xea\\xaa\\xaa\\xf7\\xce\\x9d\\x0b^\\xb3\\x86\\xac\\x88\\x84\\x1e\\xb2\\x92R\\xf0\\x9a5\\xf7\\xce\\x9dSWU\\xe5c\\xd8\\xba\\x0b\\x17.\\xa7\\xa6*\\xca\\xe6>@\\xe4\\xa8\\xab\\xab\\x0b\\xc8j\\x93\\x904@&\\x0b\\xa4\\xe3\\xf1\\x82\\xffx<\\x10\\x89@\"\\x81\\x92\\x12\\x90H@$'\nb'N'\nb'\\xcb\\xe0p\\xa0\\xa6\\x06\\x00E\\xd5\\xd5k\\xc3\\xc2\\x00`\\x88\\x96VJd\\xe4tGG\\xf9\\xe9\\x11\\x87\\xe9\\x8e\\x8e)\\x91\\x91C\\xb4\\xb4\\x00`mXX\\x910\\xc7p\\x106\\xf7\\x07\"\\xa7\\x97,I5KM\\xadW\\x1c\\x12M \\x08\\xfe\\x88\\xc4\\xde\\xe3>eTUy|\\xfe\\x82\\xd0P\\x16\\x87\\x83\\xc3\\xe1\"\\x0e\\x1e\\xb4\\xb1\\xb2R,S\\x086VV\\x11\\x07\\x0f\\xe2p8\\x16\\x87\\xb3 4T\\xe0z\\x95\\xd7f\\xb1*d\\xa9Y::\\x82\\x87 \\xaa\\x89H\\x04%\\xa5\\xde\\xff\\xa2v\\xe0\\xf1\\xa0\\xa2\\x02d\\xf2\\xed\\x8c\\x0c\\x14\\xe1\\xb51 \\xc0\\xcb\\xc5\\xe5+\\x10%\\x80\\x97\\x8b\\xcb\\xc6\\x80\\x00\\x00\\xc8\\xf9\\xf8Q\\xd0\\xd9\\xcbk\\xb3X\\xf9\\xbd5\\x0b-\\x17\\x9754\\x0ch\\x8b\\x92\\x12hk\\xf7>\\x1cT\\x99QMFZ\\x85\\x1f\\x85O\\xcc\\xc8\\x08\\x00N\\xdf\\xbf\\x0f\\x00:\\x9a\\x9a\\xbf\\x06\\x06*\\x9c\\xa0>\\xf850PGSS\\xa8Tn\\x9b\\xc5\\xa2\\xbc\\xb1\\x11\\x00tuu\\xf1(\\x9e\\xa6\\xad\\xa3\\xa3\\xba\\xb9y@[\\xf4\\xf5AYY\\xf0\\x04D\\x9f\\x89\\xa8>\\xd4\\x0b\\x10\\x080|8\\x90Ho\\xca\\xcaR\\xdf\\xbf\\x07\\x80U?\\xfc\\xa0\"Kr\\x9f|P\\xa1PV\\xfd\\xf0\\x03\\x00\\xa4\\xbe\\x7f/X^\\x93\\xddf\\xb1\\x92\\xbby<\\x14\\xe0gii\\x89\\x17\\x06\\x1f\\x15\\x0c\\x9c4\\x008\\x1c\\x98\\x9a\\x82\\x8a'\nb'\\x10\\x89\\x82?%\\xa5\\xde*\\x8d\\x0e\\xd0\\xf1\\xf0\\xe1\\xa0\\xad'\nb'\\x00\\xc2\\x95\\xa8\\x15s\\xe6(\\x90\\x14\\t\\x10*\\x12\\xa8\\x96\\xddf\\xb1(\\xad\\xafGa\\x06VVV\\xbdd\\x15J \\x0b\\x00\\x08\\x0403\\x83\\xa1C\\x05'\nb'\\xd0cA\\x7f\\x04\\x02()\\x81\\x8a'\nb'XZB\\x8f\\xeb\\x02\\xcd\\xfb\\x94H$s)}\\x8a\\x83\\x86\\xb9\\x91\\x91\\x12\\x89$T-\\x87\\xcdb!\\xcc\\xb8\\xb6\\xb2\\xb2\"\\x9a\\x98\\x98())uuu\\xbd\\xfb|[\\x011\\xc0\\xe1\\x80J\\x85!C\\xa0\\xbd\\x1dZ[\\x81\\xc5\\x02\\x1c\\x0e\\xc8dPS\\x0355\\xa0PDg\\xa1%55\\x00@30\\x90u{\\x0e\\xb9\\x81\\xc7\\xe3i\\x06\\x06E\\x9f>\\x95\\x88\\xce\\xcfe\\xb1Y,\\x84\\xb4\\xd0\\xe9t\"\\x81@pppHMM}\\x90\\x97\\'\\x95QD\"hh\\xc0\\x97\"\\xc7P\\xd5%\\xf6s\\xda6\\xb6\\xb4\\x9c\\x88\\x8c\\xbc\\x93\\x94\\xf4?nn\\x9b\\x96,\\x19\\xd2\\x93\\xf5/%\\x1a[ZB.\\\\\\xb8\\xfd\\xf0\\xe1\\xec\\xe9\\xd3\\xb7-_\\xae\\xfby\\xf3A\\xea\\xc4\\x04\\xe7Hg\\xb3X\\xa0\\xccW\\x1a\\x8d6t\\xe8P\"\\x00\\xf8\\xf9\\xf9\\xa5\\xa6\\xa6\\x16VU\\x15TV\\xca\\x91B,\\x16(m\\xa1\\xb4\\xaa'\nb'\\xc30Q\\xf7\\xd3\\x81\\xf3\\xe7O^\\xba\\x04\\x00\\xefJJX\\xed\\xed\\xa1;v\\xc8$6\\xe4\\xc2\\x85#\\xe1\\xe1\\x00p$<\\x9c\\xc7\\xe3\\x1d\\xdb\\xb6Mx\\t\\xc3\\xb0\\xd2\\xaa*\\xa1j\\x85\\xa0\\x99\\xcdNy\\xff\\x1e\\x00|||\\x00-\\x85\\xf9\\xf9\\xf9\\xa1k1\\xe26\\x8a\\x91\\x0f\\xe6T*\\x00tp8\\x15\\xb5\\xb5\\xa2\\xe7o\\x88L\\xe2n\\xf4\\x99\\xd0I\\x81[\\x0f\\x1e\\x08\\x8f\\xaf\\xa3QB\\x0f*jk;8\\x1c\\xa1j\\x85\\xe0\\xee\\xcb\\x97(\\xc3\\x02Q\\x84\\x07\\x0033\\xb31c\\xc6\\x00@\\xf4\\xc0\\x01\\x17\\xb2B\\xb8\\xd4|\\xa9g\\x05\\x17\\xc1]d\\xc6\\xe3.\\xfb\\xec\\xc7}\\xf2d\\xe1\\xb1\\xe7\\xe7\\xb3q\\xa1\"\\x99V\\xb9%#:+\\x0b\\x00\\xb4\\xb5\\xb5\\xa7L\\x99\\x02\\xc2X\\x07\\xc4\\\\Fq\\xb14\\x99\\xb0\\xd2\\xc0\\xc1\\xc2\\x02\\x19}\\xe6\\xda5\\xaeH\\xc8Y\\xf0\\x9a5s\\xa6O\\xa7\\x90\\xc9s\\xa6O\\x0f^\\xb3FV\\xb1;V\\xae\\\\\\xe8\\xe9\\xa9\\xa6\\xa2\\xb2\\xd0\\xd3sW\\xcf\\xf6\\'\\x00\\xc0\\xed\\xee>s\\xed\\x1a\\x00\\xd8\\x98\\x988XX(\\xe0\\x06\\x008\\\\nbn.\\x00xyy\\x11\\x89D\\x10\\x92\\xe5\\xeb\\xeb\\x0b\\x00\\x18\\x86\\xc5*\\xae%\\xfe2s&\\x00T\\xd5\\xd5\\x1d\\xef\\t\\xfe\\x05\\x00s#\\xa3\\x9b\\xa1\\xa1m\\x99\\x997CC\\xe5\\x18U\\xd0\\x0c\\x0c\\xae\\x1e9\\xd2\\x9a\\x91q\\xf5\\xc8\\x11\\x9aH\\xa8\\xea\\xf1\\x88\\x88\\xaa\\xba:\\xa1R\\x85\\xe0\\xe1\\xeb\\xd7\\xec\\xceN\\xe8!\\x07\\x84d\\x8d\\x1f?\\x1eE\\xdf\\xa2\\x8a\\xa7\\x10\\xf8;9\\xa10\\xfa\\xe0\\x93\\'\\xd3?\\x7f\\xd5\\x92\\xa4\\x8e\\xf6\\x13\\x8b>\\xc3\\x91\\xf4\\xbc\\xbc\\xe0\\x93\\'\\x01\\xc0\\x8cJE)%'\nb'\\x01\\xea\\x94\\xc8d\\xf2\\x8c\\x193\\x04z\\x85\\xd7P\\x87\\x9f\\x9c\\x9f\\xdf?\\xebP>PH\\xa4\\xbf7n$\\x11\\x08\\xdd<\\xde\\xc2\\xad[\\xcb%\\xe6`\\xcb\\x8d\\xf2\\x9a\\x9a\\x85[\\xb7v\\xf3x$\\x02\\xe1\\xef\\x8d\\x1be\\x8a4\\x91\\x00>\\x86\\xa1\\xadu\\xa6M\\x9b&\\x8c\\x83\\xef%\\x0bu[\\x9d\\\\\\xae\\x02\\xdf\\x89\\xf6\\xe6\\xe6\\x07\\xfd\\xfd\\x01\\xa0\\xb4\\xb2r\\x92\\xbf\\xff\\xeb\\x01\\x92e\\xe5\\xc6k\\x06c\\x92\\xbf\\x7fie%\\x00\\x1c\\xf4\\xf7\\xb7W\\\\\\xf2\\xcc\\xe3\\xfc\\xfc\\xfa\\xb66\\x10\\x19*\\x80(Y\\xae\\xae\\xaeT*\\x15\\x00\\x0e\\xdc\\xbc9\\xd0\\xfeYr \\xc8\\xdb{\\xab\\x8f\\x0f\\x00T\\xd6\\xd6:\\x07\\x04\\\\\\x96q\\xb7\\x0e\\t\\xb8\\x1c\\x17\\xe7\\x1c\\x10PY[\\x0b\\x00[}|\\x06\\x19\\x9e\\xdc\\x07\\xbb\\xa3\\xa2\\x00\\x80B\\xa1\\xf8\\x8a\\xecV\\xd7K\\x16\\x89DBAO\\x8c\\xea\\xea\\xb0G\\x8f\\x14\\xa5\\x15\\x87\\xc3\\x1d^\\xbc\\xf8\\xc4\\xd2\\xa58\\x1c\\xae\\x8d\\xc5'\nb'\\xd8\\xb1\\xc3u\\xd9\\xb2\\xfc\\xa2\\xa2\\xc1\\xc8\\xcc/*r]\\xb6,`\\xc7\\x8e6\\x16\\x0b\\x87\\xc3\\x9dX\\xbaT\\xb1i\\xee1YY(\\x8bn\\xc3\\x86'\nb'C\\x87\\x0e\\x15\\x9e\\xff,\\x1d\\x85\\xcb\\xe5\\x8e\\x1a5\\xaa\\xb8\\xb8\\x98\\xaa\\xa9Y|\\xfa\\xb4L\\xfb&}\\x11\\xb1\\xd9\\xd9k\\xc3\\xc2\\xaa\\x9a\\x9b\\x01\\xed\\x0e\\xe8\\xec\\xbcf\\xfe|Ogg\\xe9\\'\\x8f|>?>5\\xf5\\xfc\\xf5\\xeb\\t\\xa9\\xa9h\\x9d\\xc5@[\\xfb\\xdc\\xaaU\\x83\\x8f\\x83\\x15\\x05\\x8f\\xcf\\x1f\\x1b\\x14\\xf4\\xbe\\xb2R[[\\xfb\\xc3\\x87\\x0fZ\"\\x132\\\\\\x9f]U\\xa2\\xa2\\xa2\\xe6\\xcf\\x9f\\x0f\\x00{\\xe7\\xce\\xdd\\xd3\\x93g\\xa7(0;:vGE\\x9dNH\\x10\\xc6\\xdd\\x1a\\xe9\\xeb{89M\\xb6\\xb5u\\xb4\\xb1\\xb1\\x1c`0\\xc9(-}\\x9e\\x9b\\x9b\\xf6\\xeaU\\xe2\\xb3g\\xc2\\xb7\\x04\\x01\\x8f\\xffe\\xe6\\xcc\\xfd\\xf3\\xe6\\xa9\\xcb\\xbb\\x85\\xe7@\\xb8\\x90\\x9c\\xbc\\xf2\\xfcy\\x008z\\xf4hPP\\x90\\xe8\\xa5\\xbeda\\x186a\\xc2\\x84\\xec\\xecl5'\nb'\\xa5\\xe4\\xf4\\xe9\\xa1\\x9a\\x9a\\x8a5\\x05\\x00\\xdeUT\\xfcq\\xff\\xfe\\x95\\xd4\\xd4>\\xfbP)S(Cutt\\xb5\\xb5u\\xb5\\xb4\\x00\\xa0\\xa1\\xa5\\xa5\\xa1\\xb9\\xb9\\xae\\xa9\\xa9\\xe3\\xf3\\xf5\\x01'\nb'e\\xe5E\\xce\\xce\\xebg\\xcc\\x18\\xd5\\x93i\\xa4@ttuYl\\xd8P\\xd9\\xd4D\\xa3\\xd1'\nb\"\\x0b\\x0b\\xfb\\xe4\\xee\\xf4%\\x0b\\x00\\x92\\x93\\x93Q\\xa2\\xeb\\xcf\\x1e\\x1egV\\xacP\\xb8A\\x08\\xec\\xce\\xce\\xbf\\xd3\\xd2ned\\xbc`0\\xfa\\xec\\xa9(\\x16Z\\xaa\\xaa\\x93,-\\xe788,\\x98<YQ\\x11^\\xfd\\xf1{t\\xf4\\xce\\xabW\\x01 222\\xa0_\\xac\\xa5\\x18\\xb2\\x00`\\xc6\\x8c\\x19\\x89\\x89\\x89$\\x02\\xe1\\xed\\xf1\\xe3\\xf2\\xe5n\\x01\\xc0\\xce\\xabW\\x9f\\x15\\x14\\x04\\xcf\\x99\\xe3!\\x92\\xbb\\xd5\\x1f\\x18\\x86\\xbd\\xad\\xa8H+((\\xa9\\xad\\x15\\x84\\x1c\\xb5\\xb5\\x01\\x80\\xae\\x86\\x86 \\xe4\\x88J\\x9dle5Z\\xe2\\xcez\\x00p/'g\\xfb\\x95+>\\xe3\\xc7\\xf7\\xd9\\xadPz4\\xb1X\\xe6\\xbf\\xfc\\xd2\\xc2f[[[\\xe7\\xe4\\xe4\\xf4\\xefL\\xc5\\x93\\x95\\x97\\x97gkk\\x8ba\\x98\\x9f\\xbd\\xfd\\x9d\\xad[\\xe5\\xd3m\\x19\\x18\\x88\\x16\\xf2\\x96\\xb9\\xba\\x1e_\\xba\\xf4\\xeb\\xed)\\xd9\\xccf\\x07\\xfe\\xe7?\\x97RR\\x00\\xc0\\xd6\\xd44'$D>9k\\xc3\\xc2\\xce?|\\x08\\x00\\xf7\\xef\\xdf\\xf7\\xf0\\xf0\\xe8_@\\xfc\\x9b\\xc8\\xda\\xdaz\\xd1\\xa2E\\x00\\x10\\x9d\\x95%\\xeb>fB\\xdc\"\nb''\nb\"B\\xe1\\xcf\\x17\\x9f<\\x19\\xb5i\\x93\\x02'R\\xa2\\x88\\xc9\\xca\\x1a\\xb5i\\x13b\\xca\\xc1\\xc2\\xe2\\x9a\\xbc+I\\xe1\\x8f\\x1f#\\xa6\\xdc\\xdc\\xdc\\xc42\\x05\\x03\\xd5,\\x00hnnvpp(**\\xc2\\xe3pq;v\\xa0\\xac\\x1fY\\xd1\\xcd\\xe3\\x1d\\x89\\x8d\\xddw\\xf3&\\xda\\x06\\xcd\\xfb\\xbb\\xefB\\x16-RT\\xc7\\\\PY\\xb9\\xe3\\xea\\xd5\\x98\\xac,\\x00\\xa0\\x90H\\xfb\\xe7\\xcf\\xdf\\xec\\xed-_&\\xd8\\xb3\\x82\\x82i\\xfb\\xf7wuw\\xeb\\xe9\\xe9eff\\x0e\\xb4-\\xf7\\x80d\\x01@AA\\xc1\\xc4\\x89\\x13[[[5\\x94\\x95_\\xfc\\xf6\\x9b\\xdc7\\xf9\\xbe\\xb2r\\xc5\\xb9sh\\x07\\x1c\\x02\\x1e\\xbf|\\xea\\xd4}\\xf3\\xe6\"\nb'\\x1bD\\xb2iMK\\xcb\\x9e\\xa8\\xa8\\x0b\\xc9\\xc9h\\x08\\xe2H\\xa7\\x87\\xaf]K\\x17qB\\xc8\\x84\\xb2\\x86\\x06\\xfb\\x9d;\\xebZ[I$\\xd2\\xa3G\\x8f\\x9c\\x07\\x0eZ\\x91D\\x16\\x00$$$x{{\\xf3\\xf9|3*5\\xf3\\xe0A\\xb9s\\x81\\xf9\\x18v!9yoT\\x14\\x1a\\x94\\xaa\\x92\\xc9k\\xdc\\xdd\\x97L\\x992N\\xc6\\xe8\\xd3\\xf7\\x95\\x95\\xe1\\xc9\\xc9\\xe7\\x1e<@\\xce\\x93\\xe1::\\xfb\\xe7\\xcf_\\xe6\\xea\\x8a\\x97w\\xf8\\xce\\xee\\xec\\x9c\\x1c\\x1c\\x8c\\xb6\\xa0\\t\\x0b\\x0b[\\xb9r\\xa5\\x84\\xc2_ \\x0b\\x00\\x8e\\x1e=\\xbau\\xebV\\x00p\\x1d=\\xfaAp\\xf0`\\x12\\xc1;\\xba\\xbaB\\xef\\xdd\\x0b\\x89\\x89\\x11n^9\\xca\\xd0\\xd0\\xdf\\xc9i\\xc1\\xe4\\xc9\\x92}\\xc1\\x8dL\\xe6\\xb5\\xb4\\xb4\\xc8\\xa7O\\x85\\xcb\\x91\\x1a\\xca\\xca;\\xfc\\xfc6zy'\nb\"f\\x93]\\x0c\\xc3~8~\\x1c\\xad\\xf8\\x07\\x06\\x06\\x86\\x86\\x86J.\\xffe\\xb2\\x00`\\xe9\\xd2\\xa5(\\t\\xfd\\xa7\\xe9\\xd3\\xcf\\xafZ%\\xb7q\\x08M,\\xd6\\xb1\\xb8\\xb8\\xc8\\x94\\x94\\x8a\\xc6F\\xe1Is*u\\x84\\xbe\\xbe\\x19\\x95jN\\xa5\\x9a\\xeb\\xeb\\xabS(\\xc555\\x8c\\xeajFu5\\xa3\\xaa\\xeaC]\\x9dpno\\xa0\\xad\\xbd\\xc4\\xc5%h\\xd6,\\xddAo\\xb2\\xbb'*j\\xff\\xcd\\x9b\\x00\\xe0\\xee\\xee\\x1e\\x1f\\x1f\\xff\\xc5\\x1f0\\x90\\x8a\\xac\\xce\\xceNWW\\xd7\\xf4\\xf4t\\x008\\x12\\x10\\xb0e\\xd6\\xacAZ\\t\\x00|\\x0c{\\xfa\\xee\\xdd\\x95\\xd4\\xd4\\x9b\\xe9\\xe9\\xd2\\xec\\x92\\xaaB&\\xcf\\x9e0a\\x89\\x8b\\xcb\\xb4\\xb1c\\xe5nt\\xa2\\xb8\\x94\\x92\\xb2\\xf4\\xcc\\x19\\x0c\\xc3\\xe8tzzz\\xba\\x96\\x14\\x8brR\\x91\\x05\\x00555\\xf6\\xf6\\xf6(\\x0e|\\x9d\\x87G\\xe8\\xb2e\\xfd\\xd7\\x04\\xe5C'\\x97\\xfb\\xf0\\xf5\\xeb\\xb7\\x15\\x15\\x1fjkKjk?\\xd4\\xd6\\x9654\\xf01l\\x98\\x96\\xd6\\x08}}s}}s*\\xd5j\\xf8p\\x0fkkEM\\xec1\\x0c\\xdb{\\xe3\\xc6\\x81[\\xb70\\x0c\\xd3\\xd2\\xd2\\xca\\xc8\\xc8\\x10.\\xcbK\\x86\\xb4d\\x01@nn\\xae\\xa7\\xa7'\\xda\\x12}\\xda\\xd8\\xb176o\\xfeJ\\xe3\\xccn\\x1e\\x8f\\xcb\\xe3}\\xa5\\x1d\\xbf\\xd9\\x9d\\x9dK\\xfe\\xf8\\x03\\xf5SZZZ\\xd1\\xd1\\xd1.R\\x87C\\xc9@\\x16\\x00TVV\\xfa\\xf9\\xf9\\xa1L\\xce\\x11\\xfa\\xfaq\\xdb\\xb7+jQ\\xf6\\xdb\\xa0\\xac\\xa1\\xc1'$\\x04\\xbd\\xfb\\xe8tzll\\xac\\x94u\"\nb'A\\xb6!\\xdc\\xf0\\xe1\\xc3SRR\\x90\\x0f\\xa7\\xb8\\xa6f\\xe2\\xae]\\xf7sse\\x92\\xf0\\xff\\x11\\xcf'\nb''\nb'\\xecw\\xeeDL\\xb9\\xbb\\xbb\\xa7\\xa7\\xa7\\xcb\\xc4\\x14\\xc8J\\x16\\x00(++\\xff\\xfd\\xf7\\xdf\\x07\\x0e\\x1c\\xc0\\xf5\\xec\\xeb\\x8c\\xf6\\x9a\\xfc/G\\xf8\\xe3\\xc7\\xd3\\xf6\\xefG[\\xd4\\x05\\x06\\x06\\xc6\\xc7\\xc7K\\xd3\\xa3\\xf7\\x81l\\xcdP\\x14w\\xee\\xdc\\t\\x08\\x08`\\xb3\\xd9\\x00\\xe0\\xef\\xe4t4 `0\\x83\\xf2\\xaf\\x87&\\x16k\\xd7\\xb5kh\\xdeG\"\\x91\\xce\\x9e=+y\\xe4)\\x01\\xf2\\x93\\x05\\x00yyy>>>eee\\x00\\xa0B&o\\xf4\\xf4\\xdc\\xee\\xe7\\'O\\xfa\\xd6\\xd7AGW\\xd7\\xc9\\xf8\\xf8\\x90\\x98\\x18\\xe4/\\xd3\\xd3\\xd3\\xbbu\\xeb\\x96\\x84\\xd9\\xcc\\x171(\\xb2\\x00\\xa0\\xae\\xaen\\xcd\\x9a5w\\xee\\xdcA\\x1f\\x87\\xa8\\xab\\x07\\xcf\\x9e\\xfd\\xb3\\x87\\x87\\xf4\\x9b\\xa6|'\nb'\\xf0\\xf8\\xfc\\xff<~\\xbc\\xf7\\xc6'\nb'\\xe1\\xbe\\xc9nnnaaa\\xb2\\xfepU\\x1f\\x0c\\x96,\\x84\\xe7\\xcf\\x9fo\\xdb\\xb6---'\nb'}4\\xd1\\xd3;\\xb0`\\x81\\xbf\\x93\\x93BF\\x8f\\xb2\"&+k\\xe7\\xd5\\xab\\xef++\\xd1Gkk\\xeb\\x90\\x90\\x90\\x81\\xbc.2A1d!DGG\\xef\\xdc\\xb9\\xb3\\xa0\\xa0\\x00}\\xb4\\xa6\\xd1\\xf6\\xcf\\x9f?\\xd3\\xd6v0\\xd3I\\xe9\\xc1\\xc7\\xb0\\xc7\\xf9\\xf9\\xbb\\xa3\\xa2\\xd0*\\x16\\x00\\xd0h\\xb4\\x03\\x07\\x0e,Z\\xb4HQ\\xd1\\x87\\x8a$\\x0b\\x00x<\\xde\\x85\\x0b\\x17\\xf6\\xee\\xdd+\\xfcA%-UUO[[?{\\xfb\\x1966'\nb'_\\x89\\x01\\x00\\x0e\\x97\\xfb\\xf0\\xf5\\xeb\\xe8\\xcc\\xcc\\xb8\\x97/\\xd1\\x1a2\\x00hkk\\xef\\xda\\xb5k\\xfd\\xfa\\xf5d\\x85z\\xeb\\x15L\\x16\\x02\\x9b\\xcd>q\\xe2\\xc4\\xe1\\xc3\\x87\\x99\"yVd\\x12\\xe9\\xfb1c\\xfc\\xec\\xed}\\xc6\\x8f\\xd7\\x97\\xfd\\xb5\\xdd\\x07\\xcdl\\xf6\\xdd\\x97/\\xa3\\xb3\\xb2\\x12ss\\x91\\xbb\\x06\\x81B\\xa1l\\xd8\\xb0a\\xe7\\xce\\x9dr\\x8c\\x0c\\xbe\\x88\\xafB\\x16BKKK\\\\\\\\\\\\LLLbb\"K\\xe472p8\\x9c\\xc3\\x88\\x11\\xde\\xdf}7\\xd6\\xd8\\xd8r\\xd803*U\\x9a\\xb7A7\\x8fWZ_\\xcf\\xa8\\xae~WQ\\x91\\xf0\\xeaU\\xca\\xfb\\xf7\\xa21\\x06\\x14'\nb'\\xc5\\xcd\\xcd\\xcd\\xd7\\xd7\\xd7\\xd7\\xd7W\\xef+\\xfc\\xc8\\x96\\xc0\\xf2\\xafG\\x96\\x10\\x9d\\x9d\\x9d\\xc9\\xc9\\xc9\\xb1\\xb1\\xb1\\xb1\\xb1\\xb1U\\xfd\\x02\\xc8\\tx\\xbc\\x89\\x9e\\x9e\\xe4\\x9f\\xec+ol\\xfcP[\\xdb?\\xb2VWW\\xd7\\xdb\\xdb\\xdb\\xd7\\xd7\\xd7\\xdd\\xdd}\\x90?N)'\nb'\\xbe\\x05YB`\\x18\\x96\\x9d\\x9d\\x1d\\x1b\\x1b\\x1b\\x13\\x13\\xf3Fd\\x1fgYaaa\\x81*\\x91\\xa3\\xa3\\xe37\\x0b\\x1d\\x87oL\\x96(ZZZ\\x18\\x0c\\x06\\xfa\\x99\\xd1\\xc2\\xc2\\xc2\\x8a\\x8a'\nb')\\x7ff\\xd4\\xd2\\xd2\\xf2\\xeb54\\xc9\\xf8\\x7f\\xba\\xe7w\\xc2\\x98Sl\\xa3\\x00\\x00\\x00\\x00IEND\\xaeB`\\x82'\nCaught requests exception: HTTPConnectionPool(host='httpbin.org', port=80): Read timed out. (read timeout=1)\n(Open file: /psf__requests/reproduce.py)\n(Current directory: /psf__requests)\nbash-$"
    },
    {
      "role": "assistant",
      "content": "The output shows that the `DecodeError` is not being triggered, and instead, the response is being decoded without any issues. This suggests that the `DecodeError` might not be easily reproducible with the current approach.\n\nSince the `TimeoutError` is being caught as a `requests.exceptions.RequestException`, we can focus on ensuring that `DecodeError` is also wrapped in a `requests.exceptions.RequestException`.\n\nLet's inspect the `requests` library code to see where exceptions from `urllib3` might be passing through. We'll start by searching for `DecodeError` in the `requests` codebase to identify where it might be handled.",
      "tool_calls": [
        {
          "type": "function",
          "function": {
            "name": "search_dir",
            "arguments": "{\"raw\": \"search_dir \\\"DecodeError\\\"\"}"
          },
          "id": "call_520fa6b58a43"
        }
      ]
    },
    {
      "role": "tool",
      "tool_call_id": "call_520fa6b58a43",
      "content": "Found 19 matches for \"DecodeError\" in /psf__requests:\n/psf__requests/HISTORY.rst (2 matches)\n/psf__requests/build/lib/requests/models.py (3 matches)\n/psf__requests/build/lib/requests/packages/urllib3/exceptions.py (1 matches)\n/psf__requests/build/lib/requests/packages/urllib3/response.py (2 matches)\n/psf__requests/reproduce.py (3 matches)\n/psf__requests/requests.egg-info/PKG-INFO (2 matches)\n/psf__requests/requests/models.py (3 matches)\n/psf__requests/requests/packages/urllib3/exceptions.py (1 matches)\n/psf__requests/requests/packages/urllib3/response.py (2 matches)\nEnd of matches for \"DecodeError\" in /psf__requests\n(Open file: /psf__requests/reproduce.py)\n(Current directory: /psf__requests)\nbash-$"
    },
    {
      "role": "assistant",
      "content": "The `DecodeError` is mentioned in several files, but the most relevant ones for our purpose are likely to be in `requests/models.py`. Let's open that file and inspect the relevant lines to see how `DecodeError` is being handled.",
      "tool_calls": [
        {
          "type": "function",
          "function": {
            "name": "open",
            "arguments": "{\"path\": \"requests/models.py\"}"
          },
          "id": "call_7c9a2b5c7b08"
        }
      ]
    },
    {
      "role": "tool",
      "tool_call_id": "call_7c9a2b5c7b08",
      "content": "[File: /psf__requests/requests/models.py (848 lines total)]\n1:# -*- coding: utf-8 -*-\n2:\n3:\"\"\"\n4:requests.models\n5:~~~~~~~~~~~~~~~\n6:\n7:This module contains the primary objects that power Requests.\n8:\"\"\"\n9:\n10:import collections\n11:import datetime\n12:\n13:from io import BytesIO, UnsupportedOperation\n14:from .hooks import default_hooks\n15:from .structures import CaseInsensitiveDict\n16:\n17:from .auth import HTTPBasicAuth\n18:from .cookies import cookiejar_from_dict, get_cookie_header, _copy_cookie_jar\n19:from .packages.urllib3.fields import RequestField\n20:from .packages.urllib3.filepost import encode_multipart_formdata\n21:from .packages.urllib3.util import parse_url\n22:from .packages.urllib3.exceptions import (\n23:    DecodeError, ReadTimeoutError, ProtocolError, LocationParseError)\n24:from .exceptions import (\n25:    HTTPError, MissingSchema, InvalidURL, ChunkedEncodingError,\n26:    ContentDecodingError, ConnectionError, StreamConsumedError)\n27:from .utils import (\n28:    guess_filename, get_auth_from_url, requote_uri,\n29:    stream_decode_response_unicode, to_key_val_list, parse_header_links,\n30:    iter_slices, guess_json_utf, super_len, to_native_string)\n31:from .compat import (\n32:    cookielib, urlunparse, urlsplit, urlencode, str, bytes, StringIO,\n33:    is_py2, chardet, builtin_str, basestring)\n34:from .compat import json as complexjson\n35:from .status_codes import codes\n36:\n37:#: The set of HTTP status codes that indicate an automatically\n38:#: processable redirect.\n39:REDIRECT_STATI = (\n40:    codes.moved,              # 301\n41:    codes.found,              # 302\n42:    codes.other,              # 303\n43:    codes.temporary_redirect, # 307\n44:    codes.permanent_redirect, # 308\n45:)\n46:\n47:DEFAULT_REDIRECT_LIMIT = 30\n48:CONTENT_CHUNK_SIZE = 10 * 1024\n49:ITER_CHUNK_SIZE = 512\n50:\n51:\n52:class RequestEncodingMixin(object):\n53:    @property\n54:    def path_url(self):\n55:        \"\"\"Build the path URL to use.\"\"\"\n56:\n57:        url = []\n58:\n59:        p = urlsplit(self.url)\n60:\n61:        path = p.path\n62:        if not path:\n63:            path = '/'\n64:\n65:        url.append(path)\n66:\n67:        query = p.query\n68:        if query:\n69:            url.append('?')\n70:            url.append(query)\n71:\n72:        return ''.join(url)\n73:\n74:    @staticmethod\n75:    def _encode_params(data):\n76:        \"\"\"Encode parameters in a piece of data.\n77:\n78:        Will successfully encode parameters when passed as a dict or a list of\n79:        2-tuples. Order is retained if data is a list of 2-tuples but arbitrary\n80:        if parameters are supplied as a dict.\n81:        \"\"\"\n82:\n83:        if isinstance(data, (str, bytes)):\n84:            return data\n85:        elif hasattr(data, 'read'):\n86:            return data\n87:        elif hasattr(data, '__iter__'):\n88:            result = []\n89:            for k, vs in to_key_val_list(data):\n90:                if isinstance(vs, basestring) or not hasattr(vs, '__iter__'):\n91:                    vs = [vs]\n92:                for v in vs:\n93:                    if v is not None:\n94:                        result.append(\n95:                            (k.encode('utf-8') if isinstance(k, str) else k,\n96:                             v.encode('utf-8') if isinstance(v, str) else v))\n97:            return urlencode(result, doseq=True)\n98:        else:\n99:            return data\n100:\n(748 more lines below)\n(Open file: /psf__requests/requests/models.py)\n(Current directory: /psf__requests)\nbash-$"
    },
    {
      "role": "assistant",
      "content": "To locate the specific lines where `DecodeError` is being handled, let's search within this file for the term `DecodeError`.",
      "tool_calls": [
        {
          "type": "function",
          "function": {
            "name": "search_file",
            "arguments": "{\"raw\": \"search_file \\\"DecodeError\\\"\"}"
          },
          "id": "call_1f0ff11e24d6"
        }
      ]
    },
    {
      "role": "tool",
      "tool_call_id": "call_1f0ff11e24d6",
      "content": "Found 3 matches for \"DecodeError\" in /psf__requests/requests/models.py:\nLine 23:    DecodeError, ReadTimeoutError, ProtocolError, LocationParseError)\nLine 661:                except DecodeError as e:\nLine 799:                except UnicodeDecodeError:\nEnd of matches for \"DecodeError\" in /psf__requests/requests/models.py\n(Open file: /psf__requests/requests/models.py)\n(Current directory: /psf__requests)\nbash-$"
    },
    {
      "role": "assistant",
      "content": "The relevant line where `DecodeError` is being handled is line 661. Let's navigate to that line to inspect the context and see how the exception is being managed.",
      "tool_calls": [
        {
          "type": "function",
          "function": {
            "name": "goto",
            "arguments": "{\"line_number\": 661}"
          },
          "id": "call_18d4b78d0793"
        }
      ]
    },
    {
      "role": "tool",
      "tool_call_id": "call_18d4b78d0793",
      "content": "[File: /psf__requests/requests/models.py (848 lines total)]\n(645 more lines above)\n646:        read into memory.  This is not necessarily the length of each item\n647:        returned as decoding can take place.\n648:\n649:        If decode_unicode is True, content will be decoded using the best\n650:        available encoding based on the response.\n651:        \"\"\"\n652:\n653:        def generate():\n654:            # Special case for urllib3.\n655:            if hasattr(self.raw, 'stream'):\n656:                try:\n657:                    for chunk in self.raw.stream(chunk_size, decode_content=True):\n658:                        yield chunk\n659:                except ProtocolError as e:\n660:                    raise ChunkedEncodingError(e)\n661:                except DecodeError as e:\n662:                    raise ContentDecodingError(e)\n663:                except ReadTimeoutError as e:\n664:                    raise ConnectionError(e)\n665:            else:\n666:                # Standard file-like object.\n667:                while True:\n668:                    chunk = self.raw.read(chunk_size)\n669:                    if not chunk:\n670:                        break\n671:                    yield chunk\n672:\n673:            self._content_consumed = True\n674:\n675:        if self._content_consumed and isinstance(self._content, bool):\n676:            raise StreamConsumedError()\n677:        # simulate reading small chunks of the content\n678:        reused_chunks = iter_slices(self._content, chunk_size)\n679:\n680:        stream_chunks = generate()\n681:\n682:        chunks = reused_chunks if self._content_consumed else stream_chunks\n683:\n684:        if decode_unicode:\n685:            chunks = stream_decode_response_unicode(chunks, self)\n686:\n687:        return chunks\n688:\n689:    def iter_lines(self, chunk_size=ITER_CHUNK_SIZE, decode_unicode=None, delimiter=None):\n690:        \"\"\"Iterates over the response data, one line at a time.  When\n691:        stream=True is set on the request, this avoids reading the\n692:        content at once into memory for large responses.\n693:\n694:        .. note:: This method is not reentrant safe.\n695:        \"\"\"\n696:\n697:        pending = None\n698:\n699:        for chunk in self.iter_content(chunk_size=chunk_size, decode_unicode=decode_unicode):\n700:\n701:            if pending is not None:\n702:                chunk = pending + chunk\n703:\n704:            if delimiter:\n705:                lines = chunk.split(delimiter)\n706:            else:\n707:                lines = chunk.splitlines()\n708:\n709:            if lines and lines[-1] and chunk and lines[-1][-1] == chunk[-1]:\n710:                pending = lines.pop()\n711:            else:\n712:                pending = None\n713:\n714:            for line in lines:\n715:                yield line\n716:\n717:        if pending is not None:\n718:            yield pending\n719:\n720:    @property\n721:    def content(self):\n722:        \"\"\"Content of the response, in bytes.\"\"\"\n723:\n724:        if self._content is False:\n725:            # Read the contents.\n726:            try:\n727:                if self._content_consumed:\n728:                    raise RuntimeError(\n729:                        'The content for this response was already consumed')\n730:\n731:                if self.status_code == 0:\n732:                    self._content = None\n733:                else:\n734:                    self._content = bytes().join(self.iter_content(CONTENT_CHUNK_SIZE)) or bytes()\n735:\n736:            except AttributeError:\n737:                self._content = None\n738:\n739:        self._content_consumed = True\n740:        # don't need to release the connection; that's been handled by urllib3\n741:        # since we exhausted the data.\n742:        return self._content\n743:\n744:    @property\n745:    def text(self):\n(103 more lines below)\n(Open file: /psf__requests/requests/models.py)\n(Current directory: /psf__requests)\nbash-$"
    },
    {
      "role": "assistant",
      "content": "The `DecodeError` is being caught and re-raised as a `ContentDecodingError` in the `generate` function. This means that `DecodeError` is already being wrapped in a `requests` exception.\n\nTo ensure that `TimeoutError` is also wrapped in a `requests` exception, we should check if it is being handled similarly. We can see that `ReadTimeoutError` is being caught and re-raised as a `ConnectionError`.\n\nLet's search for `TimeoutError` in this file to see if it is being handled elsewhere.",
      "tool_calls": [
        {
          "type": "function",
          "function": {
            "name": "search_file",
            "arguments": "{\"raw\": \"search_file \\\"TimeoutError\\\"\"}"
          },
          "id": "call_aab260c92169"
        }
      ]
    },
    {
      "role": "tool",
      "tool_call_id": "call_aab260c92169",
      "content": "Found 2 matches for \"TimeoutError\" in /psf__requests/requests/models.py:\nLine 23:    DecodeError, ReadTimeoutError, ProtocolError, LocationParseError)\nLine 663:                except ReadTimeoutError as e:\nEnd of matches for \"TimeoutError\" in /psf__requests/requests/models.py\n(Open file: /psf__requests/requests/models.py)\n(Current directory: /psf__requests)\nbash-$"
    },
    {
      "role": "assistant",
      "content": "It appears that `TimeoutError` is not explicitly handled in this file. To ensure that `TimeoutError` is wrapped in a `requests` exception, we should add a similar exception handling block for `TimeoutError` as we have for `ReadTimeoutError`.\n\nLet's add the necessary exception handling for `TimeoutError` in the `generate` function.",
      "tool_calls": [
        {
          "type": "function",
          "function": {
            "name": "edit",
            "arguments": "{\"start_line\": 664, \"end_line\": 664, \"replacement_text\": \"except TimeoutError as e:\\n                    raise ConnectionError(e)\\nend_of_edit\"}"
          },
          "id": "call_cb0746763dfb"
        }
      ]
    },
    {
      "role": "tool",
      "tool_call_id": "call_cb0746763dfb",
      "content": "Your proposed edit has introduced new syntax error(s). Please read this error message carefully and then retry editing the file.\n\nERRORS:\n- E999 IndentationError: expected an indented block\n\nThis is how your edit would have looked if applied\n-------------------------------------------------\n[File: /psf__requests/requests/models.py (849 lines total)]\n(658 more lines above)\n659:                except ProtocolError as e:\n660:                    raise ChunkedEncodingError(e)\n661:                except DecodeError as e:\n662:                    raise ContentDecodingError(e)\n663:                except ReadTimeoutError as e:\n664:                except TimeoutError as e:\n665:                    raise ConnectionError(e)\n666:            else:\n667:                # Standard file-like object.\n668:                while True:\n669:                    chunk = self.raw.read(chunk_size)\n670:                    if not chunk:\n(179 more lines below)\n-------------------------------------------------\n\nThis is the original code before your edit\n-------------------------------------------------\n[File: /psf__requests/requests/models.py (848 lines total)]\n(658 more lines above)\n659:                except ProtocolError as e:\n660:                    raise ChunkedEncodingError(e)\n661:                except DecodeError as e:\n662:                    raise ContentDecodingError(e)\n663:                except ReadTimeoutError as e:\n664:                    raise ConnectionError(e)\n665:            else:\n666:                # Standard file-like object.\n667:                while True:\n668:                    chunk = self.raw.read(chunk_size)\n669:                    if not chunk:\n(179 more lines below)\n-------------------------------------------------\nYour changes have NOT been applied. Please fix your edit command and try again.\nYou either need to 1) Specify the correct start/end line arguments or 2) Correct your edit code.\nDO NOT re-run the same failed edit command. Running it again will lead to the same error.\n(Open file: /psf__requests/requests/models.py)\n(Current directory: /psf__requests)\nbash-$"
    },
    {
      "role": "assistant",
      "content": "It looks like I missed the indentation for the `raise ConnectionError(e)` line. Let's correct the indentation and try again.",
      "tool_calls": [
        {
          "type": "function",
          "function": {
            "name": "edit",
            "arguments": "{\"start_line\": 664, \"end_line\": 665, \"replacement_text\": \"except TimeoutError as e:\\n                    raise ConnectionError(e)\\nend_of_edit\"}"
          },
          "id": "call_4f58ab81da72"
        }
      ]
    },
    {
      "role": "tool",
      "tool_call_id": "call_4f58ab81da72",
      "content": "Your proposed edit has introduced new syntax error(s). Please read this error message carefully and then retry editing the file.\n\nERRORS:\n- E999 IndentationError: expected an indented block\n\nThis is how your edit would have looked if applied\n-------------------------------------------------\n[File: /psf__requests/requests/models.py (848 lines total)]\n(658 more lines above)\n659:                except ProtocolError as e:\n660:                    raise ChunkedEncodingError(e)\n661:                except DecodeError as e:\n662:                    raise ContentDecodingError(e)\n663:                except ReadTimeoutError as e:\n664:                except TimeoutError as e:\n665:                    raise ConnectionError(e)\n666:                # Standard file-like object.\n667:                while True:\n668:                    chunk = self.raw.read(chunk_size)\n669:                    if not chunk:\n670:                        break\n(178 more lines below)\n-------------------------------------------------\n\nThis is the original code before your edit\n-------------------------------------------------\n[File: /psf__requests/requests/models.py (848 lines total)]\n(658 more lines above)\n659:                except ProtocolError as e:\n660:                    raise ChunkedEncodingError(e)\n661:                except DecodeError as e:\n662:                    raise ContentDecodingError(e)\n663:                except ReadTimeoutError as e:\n664:                    raise ConnectionError(e)\n665:            else:\n666:                # Standard file-like object.\n667:                while True:\n668:                    chunk = self.raw.read(chunk_size)\n669:                    if not chunk:\n670:                        break\n(178 more lines below)\n-------------------------------------------------\nYour changes have NOT been applied. Please fix your edit command and try again.\nYou either need to 1) Specify the correct start/end line arguments or 2) Correct your edit code.\nDO NOT re-run the same failed edit command. Running it again will lead to the same error.\n(Open file: /psf__requests/requests/models.py)\n(Current directory: /psf__requests)\nbash-$"
    },
    {
      "role": "assistant",
      "content": "It seems I made an indentation error again. Let's correct the indentation properly this time.",
      "tool_calls": [
        {
          "type": "function",
          "function": {
            "name": "edit",
            "arguments": "{\"start_line\": 664, \"end_line\": 665, \"replacement_text\": \"except TimeoutError as e:\\n                        raise ConnectionError(e)\\nend_of_edit\"}"
          },
          "id": "call_433a5bd6adf4"
        }
      ]
    },
    {
      "role": "tool",
      "tool_call_id": "call_433a5bd6adf4",
      "content": "Your proposed edit has introduced new syntax error(s). Please read this error message carefully and then retry editing the file.\n\nERRORS:\n- E999 SyntaxError: invalid syntax\n\nThis is how your edit would have looked if applied\n-------------------------------------------------\n[File: /psf__requests/requests/models.py (848 lines total)]\n(658 more lines above)\n659:                except ProtocolError as e:\n660:                    raise ChunkedEncodingError(e)\n661:                except DecodeError as e:\n662:                    raise ContentDecodingError(e)\n663:                except ReadTimeoutError as e:\n664:                    except TimeoutError as e:\n665:                        raise ConnectionError(e)\n666:                # Standard file-like object.\n667:                while True:\n668:                    chunk = self.raw.read(chunk_size)\n669:                    if not chunk:\n670:                        break\n(178 more lines below)\n-------------------------------------------------\n\nThis is the original code before your edit\n-------------------------------------------------\n[File: /psf__requests/requests/models.py (848 lines total)]\n(658 more lines above)\n659:                except ProtocolError as e:\n660:                    raise ChunkedEncodingError(e)\n661:                except DecodeError as e:\n662:                    raise ContentDecodingError(e)\n663:                except ReadTimeoutError as e:\n664:                    raise ConnectionError(e)\n665:            else:\n666:                # Standard file-like object.\n667:                while True:\n668:                    chunk = self.raw.read(chunk_size)\n669:                    if not chunk:\n670:                        break\n(178 more lines below)\n-------------------------------------------------\nYour changes have NOT been applied. Please fix your edit command and try again.\nYou either need to 1) Specify the correct start/end line arguments or 2) Correct your edit code.\nDO NOT re-run the same failed edit command. Running it again will lead to the same error.\n(Open file: /psf__requests/requests/models.py)\n(Current directory: /psf__requests)\nbash-$"
    },
    {
      "role": "assistant",
      "content": "It seems I made a syntax error by incorrectly placing the `except` block. Let's correct the placement and indentation properly this time.",
      "tool_calls": [
        {
          "type": "function",
          "function": {
            "name": "edit",
            "arguments": "{\"start_line\": 664, \"end_line\": 665, \"replacement_text\": \"except ReadTimeoutError as e:\\n                    raise ConnectionError(e)\\n                except TimeoutError as e:\\n                    raise ConnectionError(e)\\nend_of_edit\"}"
          },
          "id": "call_4873d88b64d0"
        }
      ]
    },
    {
      "role": "tool",
      "tool_call_id": "call_4873d88b64d0",
      "content": "Your proposed edit has introduced new syntax error(s). Please read this error message carefully and then retry editing the file.\n\nERRORS:\n- E999 IndentationError: expected an indented block\n\nThis is how your edit would have looked if applied\n-------------------------------------------------\n[File: /psf__requests/requests/models.py (850 lines total)]\n(658 more lines above)\n659:                except ProtocolError as e:\n660:                    raise ChunkedEncodingError(e)\n661:                except DecodeError as e:\n662:                    raise ContentDecodingError(e)\n663:                except ReadTimeoutError as e:\n664:                except ReadTimeoutError as e:\n665:                    raise ConnectionError(e)\n666:                except TimeoutError as e:\n667:                    raise ConnectionError(e)\n668:                # Standard file-like object.\n669:                while True:\n670:                    chunk = self.raw.read(chunk_size)\n671:                    if not chunk:\n672:                        break\n(178 more lines below)\n-------------------------------------------------\n\nThis is the original code before your edit\n-------------------------------------------------\n[File: /psf__requests/requests/models.py (848 lines total)]\n(658 more lines above)\n659:                except ProtocolError as e:\n660:                    raise ChunkedEncodingError(e)\n661:                except DecodeError as e:\n662:                    raise ContentDecodingError(e)\n663:                except ReadTimeoutError as e:\n664:                    raise ConnectionError(e)\n665:            else:\n666:                # Standard file-like object.\n667:                while True:\n668:                    chunk = self.raw.read(chunk_size)\n669:                    if not chunk:\n670:                        break\n(178 more lines below)\n-------------------------------------------------\nYour changes have NOT been applied. Please fix your edit command and try again.\nYou either need to 1) Specify the correct start/end line arguments or 2) Correct your edit code.\nDO NOT re-run the same failed edit command. Running it again will lead to the same error.\n(Open file: /psf__requests/requests/models.py)\n(Current directory: /psf__requests)\nbash-$"
    },
    {
      "role": "assistant",
      "content": "It seems I made an indentation error again. Let's correct the indentation properly this time.",
      "tool_calls": [
        {
          "type": "function",
          "function": {
            "name": "edit",
            "arguments": "{\"start_line\": 664, \"end_line\": 665, \"replacement_text\": \"except TimeoutError as e:\\n                        raise ConnectionError(e)\\nend_of_edit\"}"
          },
          "id": "call_b538b459ceef"
        }
      ]
    },
    {
      "role": "tool",
      "tool_call_id": "call_b538b459ceef",
      "content": "Your proposed edit has introduced new syntax error(s). Please read this error message carefully and then retry editing the file.\n\nERRORS:\n- E999 SyntaxError: invalid syntax\n\nThis is how your edit would have looked if applied\n-------------------------------------------------\n[File: /psf__requests/requests/models.py (848 lines total)]\n(658 more lines above)\n659:                except ProtocolError as e:\n660:                    raise ChunkedEncodingError(e)\n661:                except DecodeError as e:\n662:                    raise ContentDecodingError(e)\n663:                except ReadTimeoutError as e:\n664:                    except TimeoutError as e:\n665:                        raise ConnectionError(e)\n666:                # Standard file-like object.\n667:                while True:\n668:                    chunk = self.raw.read(chunk_size)\n669:                    if not chunk:\n670:                        break\n(178 more lines below)\n-------------------------------------------------\n\nThis is the original code before your edit\n-------------------------------------------------\n[File: /psf__requests/requests/models.py (848 lines total)]\n(658 more lines above)\n659:                except ProtocolError as e:\n660:                    raise ChunkedEncodingError(e)\n661:                except DecodeError as e:\n662:                    raise ContentDecodingError(e)\n663:                except ReadTimeoutError as e:\n664:                    raise ConnectionError(e)\n665:            else:\n666:                # Standard file-like object.\n667:                while True:\n668:                    chunk = self.raw.read(chunk_size)\n669:                    if not chunk:\n670:                        break\n(178 more lines below)\n-------------------------------------------------\nYour changes have NOT been applied. Please fix your edit command and try again.\nYou either need to 1) Specify the correct start/end line arguments or 2) Correct your edit code.\nDO NOT re-run the same failed edit command. Running it again will lead to the same error.\n(Open file: /psf__requests/requests/models.py)\n(Current directory: /psf__requests)\nbash-$"
    },
    {
      "role": "assistant",
      "content": "It seems I made a syntax error by incorrectly placing the `except` block. Let's correct the placement and indentation properly this time.",
      "tool_calls": [
        {
          "type": "function",
          "function": {
            "name": "edit",
            "arguments": "{\"start_line\": 664, \"end_line\": 665, \"replacement_text\": \"except ReadTimeoutError as e:\\n                    raise ConnectionError(e)\\n                except TimeoutError as e:\\n                    raise ConnectionError(e)\\nend_of_edit\"}"
          },
          "id": "call_f504867b870c"
        }
      ]
    },
    {
      "role": "tool",
      "tool_call_id": "call_f504867b870c",
      "content": "Your proposed edit has introduced new syntax error(s). Please read this error message carefully and then retry editing the file.\n\nERRORS:\n- E999 IndentationError: expected an indented block\n\nThis is how your edit would have looked if applied\n-------------------------------------------------\n[File: /psf__requests/requests/models.py (850 lines total)]\n(658 more lines above)\n659:                except ProtocolError as e:\n660:                    raise ChunkedEncodingError(e)\n661:                except DecodeError as e:\n662:                    raise ContentDecodingError(e)\n663:                except ReadTimeoutError as e:\n664:                except ReadTimeoutError as e:\n665:                    raise ConnectionError(e)\n666:                except TimeoutError as e:\n667:                    raise ConnectionError(e)\n668:                # Standard file-like object.\n669:                while True:\n670:                    chunk = self.raw.read(chunk_size)\n671:                    if not chunk:\n672:                        break\n(178 more lines below)\n-------------------------------------------------\n\nThis is the original code before your edit\n-------------------------------------------------\n[File: /psf__requests/requests/models.py (848 lines total)]\n(658 more lines above)\n659:                except ProtocolError as e:\n660:                    raise ChunkedEncodingError(e)\n661:                except DecodeError as e:\n662:                    raise ContentDecodingError(e)\n663:                except ReadTimeoutError as e:\n664:                    raise ConnectionError(e)\n665:            else:\n666:                # Standard file-like object.\n667:                while True:\n668:                    chunk = self.raw.read(chunk_size)\n669:                    if not chunk:\n670:                        break\n(178 more lines below)\n-------------------------------------------------\nYour changes have NOT been applied. Please fix your edit command and try again.\nYou either need to 1) Specify the correct start/end line arguments or 2) Correct your edit code.\nDO NOT re-run the same failed edit command. Running it again will lead to the same error.\n(Open file: /psf__requests/requests/models.py)\n(Current directory: /psf__requests)\nbash-$"
    },
    {
      "role": "assistant",
      "content": "It seems I made a mistake by duplicating the `except ReadTimeoutError as e:` line. Let's correct this by properly adding the `except TimeoutError as e:` block.",
      "tool_calls": [
        {
          "type": "function",
          "function": {
            "name": "edit",
            "arguments": "{\"start_line\": 665, \"end_line\": 666, \"replacement_text\": \"except TimeoutError as e:\\n                    raise ConnectionError(e)\\nend_of_edit\"}"
          },
          "id": "call_bb867f5c8f01"
        }
      ]
    },
    {
      "role": "tool",
      "tool_call_id": "call_bb867f5c8f01",
      "content": "[File: /psf__requests/requests/models.py (848 lines total)]\n(614 more lines above)\n615:        return self.iter_content(128)\n616:\n617:    @property\n618:    def ok(self):\n619:        try:\n620:            self.raise_for_status()\n621:        except HTTPError:\n622:            return False\n623:        return True\n624:\n625:    @property\n626:    def is_redirect(self):\n627:        \"\"\"True if this Response is a well-formed HTTP redirect that could have\n628:        been processed automatically (by :meth:`Session.resolve_redirects`).\n629:        \"\"\"\n630:        return ('location' in self.headers and self.status_code in REDIRECT_STATI)\n631:\n632:    @property\n633:    def is_permanent_redirect(self):\n634:        \"\"\"True if this Response one of the permanant versions of redirect\"\"\"\n635:        return ('location' in self.headers and self.status_code in (codes.moved_permanently, codes.permanent_redirect))\n636:\n637:    @property\n638:    def apparent_encoding(self):\n639:        \"\"\"The apparent encoding, provided by the chardet library\"\"\"\n640:        return chardet.detect(self.content)['encoding']\n641:\n642:    def iter_content(self, chunk_size=1, decode_unicode=False):\n643:        \"\"\"Iterates over the response data.  When stream=True is set on the\n644:        request, this avoids reading the content at once into memory for\n645:        large responses.  The chunk size is the number of bytes it should\n646:        read into memory.  This is not necessarily the length of each item\n647:        returned as decoding can take place.\n648:\n649:        If decode_unicode is True, content will be decoded using the best\n650:        available encoding based on the response.\n651:        \"\"\"\n652:\n653:        def generate():\n654:            # Special case for urllib3.\n655:            if hasattr(self.raw, 'stream'):\n656:                try:\n657:                    for chunk in self.raw.stream(chunk_size, decode_content=True):\n658:                        yield chunk\n659:                except ProtocolError as e:\n660:                    raise ChunkedEncodingError(e)\n661:                except DecodeError as e:\n662:                    raise ContentDecodingError(e)\n663:                except ReadTimeoutError as e:\n664:                    raise ConnectionError(e)\n665:                except TimeoutError as e:\n666:                    raise ConnectionError(e)\n667:                while True:\n668:                    chunk = self.raw.read(chunk_size)\n669:                    if not chunk:\n670:                        break\n671:                    yield chunk\n672:\n673:            self._content_consumed = True\n674:\n675:        if self._content_consumed and isinstance(self._content, bool):\n676:            raise StreamConsumedError()\n677:        # simulate reading small chunks of the content\n678:        reused_chunks = iter_slices(self._content, chunk_size)\n679:\n680:        stream_chunks = generate()\n681:\n682:        chunks = reused_chunks if self._content_consumed else stream_chunks\n683:\n684:        if decode_unicode:\n685:            chunks = stream_decode_response_unicode(chunks, self)\n686:\n687:        return chunks\n688:\n689:    def iter_lines(self, chunk_size=ITER_CHUNK_SIZE, decode_unicode=None, delimiter=None):\n690:        \"\"\"Iterates over the response data, one line at a time.  When\n691:        stream=True is set on the request, this avoids reading the\n692:        content at once into memory for large responses.\n693:\n694:        .. note:: This method is not reentrant safe.\n695:        \"\"\"\n696:\n697:        pending = None\n698:\n699:        for chunk in self.iter_content(chunk_size=chunk_size, decode_unicode=decode_unicode):\n700:\n701:            if pending is not None:\n702:                chunk = pending + chunk\n703:\n704:            if delimiter:\n705:                lines = chunk.split(delimiter)\n706:            else:\n707:                lines = chunk.splitlines()\n708:\n709:            if lines and lines[-1] and chunk and lines[-1][-1] == chunk[-1]:\n710:                pending = lines.pop()\n711:            else:\n712:                pending = None\n713:\n714:            for line in lines:\n(134 more lines below)\nFile updated. Please review the changes and make sure they are correct (correct indentation, no duplicate lines, etc). Edit the file again if necessary.\n(Open file: /psf__requests/requests/models.py)\n(Current directory: /psf__requests)\nbash-$"
    },
    {
      "role": "assistant",
      "content": "The code has been updated to handle `TimeoutError` by raising a `ConnectionError`. Now, let's run the `reproduce.py` script again to ensure that the changes have the desired effect.",
      "tool_calls": [
        {
          "type": "function",
          "function": {
            "name": "unknown",
            "arguments": "{\"raw\": \"python reproduce.py\"}"
          },
          "id": "call_ea5613609a05"
        }
      ]
    },
    {
      "role": "tool",
      "tool_call_id": "call_ea5613609a05",
      "content": "Response received, starting to decode...\nb'\\x89PNG'\nb'\\x1a'\nb'\\x00\\x00\\x00'\nb'IHDR\\x00\\x00\\x00d\\x00\\x00\\x00d\\x08\\x02\\x00\\x00\\x00\\xff\\x80\\x02\\x03\\x00\\x00\\x1faIDATx\\x9c\\xdd}wXS\\xd9\\xd6\\xfeJ#\\xa1\\x17\\xc1 \\x02\\xa1\\x08\\xc1J\\x19\\x11E\\x10\\x1c\\x11\\x14\\x10\\xf8tl(\\xea\\xd8FGGT\\xac\\x9f\\\\\\xeb\\x8c\\x0eV\\xd4\\xb1\\xdca\\xe4'\nb'\\xb6\\x11\\x1bEA\\x14QA\\x94&\\x82\\xa2B\\x00EzoI \\x10\\x92\\xf3\\xfbc\\x87\\x10!\\xc4$D\\x7fw\\xbe\\xf7\\xe1\\xe199gg\\xadu\\xde\\xb3\\xf7>{\\xaf\\xbd\\xd6\\x0e\\x0e\\xc30\\x00`\\xb3\\xd9\\xc7\\x8e\\x1dKJJ\\xca\\xc9\\xc9\\xe9\\xec\\xec$\\x93\\xc9\\x14'\nb'\\x85\\xdc\\x03UUU\\x1a\\x8dfjjjbbbjj\\x8a\\x0eTTT`\\x10\\xc00\\xac\\xbc\\xbc\\xbc\\xb0\\xb0\\x90\\xc1`0\\x18\\x8c\\xf2\\xf2r&\\x93\\xc9b\\xb1\\x98L&\\x93\\xc9\\xe4\\xf3\\xf9\\xea\"000\\xb0\\xec\\x81\\x89\\x89\\t\\x81@\\x18\\x8c\\xea\\xf6\\xf6\\xf6\\xd2\\xd2\\xd2\\x8f\\x1f?~\\xfc\\xf8\\x11\\x1d|\\xfa\\xf4\\x89\\xcdfw\\x8a\\x80\\xc3\\xe1\\x90\\xc9d;;;77\\xb7\\xa0\\xa0 UUU\\x81\\xd1\\xa9\\xa9\\xa9&&&2\\xe9\\xc3\\xe3\\xf1vvvAAAw\\xef\\xdemmm\\xc5\\xa4Fyy\\xf9\\x993g\\xa6O\\x9f\\xae\\xac\\xac,\\xdf\\xad*))9;;\\x1f;v\\xac\\xa4\\xa4Dz\\xbd\\xad\\xad\\xadw\\xef\\xde'\nb''\nb\"\\xb2\\xb3\\xb3\\xc3\\xe3\\xf12i411IMM\\xc50\\x0c\\xc7f\\xb3\\xad\\xac\\xac\\xca\\xcb\\xcb\\x01\\xc0\\xd6\\xd4t2\\x9d\\xae\\xa9\\xa2\\xc2\\xe1r;\\xb9\\xdcN.\\x17\\x1d\\xb4wu\\x9574|\\xac\\xabk\\xeb\\xe8\\xe8/\\x8b@ \\xd8\\xd9\\xd9yyy-_\\xbe\\xdc\\xc8\\xc8H\\xac\\xbe\\xfc\\xfc\\xfc\\xe8\\xe8\\xe8\\x98\\x98\\x98\\xec\\xec\\xec\\xfeWU\\xc9d\\x9a\\x9e\\x9e\\x86\\xb2\\xb2\\x86\\x8a\\x8a:\\x85\\xa2\\xa1\\xa2\\x82\\x03`r8m\\xed\\xed\\xe8\\x7fYC\\x83X\\xd5c\\xc6\\x8c\\xf1\\xf3\\xf3\\xf3\\xf5\\xf5\\x1d?~\\xbcX\\xbd\\xe5\\xe5\\xe5\\xe1\\xe1\\xe1\\xf7\\xee\\xdd\\xcb\\xc9\\xc9\\xe1\\xf1x\\xfd\\x0bh(+\\x9b\\x0e\\x1dj\\xa4\\xab\\xab\\xa2\\xa4D&\\x91($\\x12\\x99DB\\x07\\xad\\xed\\xedi\\x85\\x85\\xaf>~\\x04\\x00##\\xa3\\x82\\x82\\x02\\xdc\\xbe}\\xfb\\xf6\\xec\\xd9\\x03\\x00!\\x8b\\x16m\\xf3\\xf5\\x1d\\x90^\\x00\\x00hb\\xb1J\\xeb\\xeb?\\xd6\\xd5\\xbd)+{\\xf2\\xf6mzQQ'\\x97+\\xbc\\x8a\\xc7\\xe3g\\xce\\x9c\\xb9z\\xf5j///\\x02\\x81\\xc0\\xe3\\xf1\\xd2\\xd2\\xd2bbbbbbJJJD\\xe5\\x18\\xeb\\xea\\xce\\xb0\\xb1\\x19cdd5|\\xb8\\xd5\\xf0\\xe1\\x86::8\\x1cN\\xb2\\xea\\xea\\xe6\\xe6\\x82\\xaa\\xaa\\xc2\\xaa\\xaaw\\x15\\x15\\x0f\\xf2\\xf2\"\nb'\\xab\\xaaD\\xaf\\x1a\\x1a\\x1a\\xfa\\xf8\\xf8\\xf8\\xf9\\xf9\\xb9\\xba\\xba\\x92H$\\x1e\\x8fw\\xef\\xde\\xbd?\\xff\\xfc3!!\\x81\\xcf\\xe7\\x0b\\x8b\\x91I\\xa4\\x89\\x16\\x16\\xae\\xa3G\\x8f566\\x1d:\\xd4DOOGMM\\xb2\\xde\\xc311\\xdb\\xaf\\\\\\x01\\x80}\\xfb\\xf6\\xe1\\xa6L\\x99\\x92\\x92\\x922\\x8eF\\xcb=|\\x18Y\\\\\\xd1\\xd8\\xf8Wr\\xf2\\xd3w\\xef\\xf08\\x1c\\x1e\\x87\\xc3\\xe3\\xf1d\"\\xd1\\xd6\\xd4t\\x92\\xa5\\xa5\\x83\\x85\\x856j\\xbd\\x00\\x00\\xc0\\xe1r\\x9f\\x17\\x16>~\\xfb6177K\\x84\\x0e\\x03\\x03\\x03{{\\xfb\\x97/_VTT\\x88*\\xb6\\xa6\\xd1|\\xed\\xed\\xfd\\xec\\xedmMM%\\x9b\\xf8E\\x14TV\\xc6dgGgff\\x14\\x17\\xa3n\\x17AWW\\xd7\\xde\\xde>77\\xb7\\xba\\xbaZx\\xd2\\xde\\xdc\\xdc\\xc3\\xc6f\\xea\\xe8\\xd1\\x8et:\\x85D\\x02\\x80f6;\\x9d\\xc1H/*z\\xc1`d\\x16\\x17\\xb7\\xb6\\xb7\\x0b\\x0b\\x9bQ\\xa9\\xcb\\xa7N\\xdd0s\\xa6\\xba\\xb22\\x00`\\x18f\\xb3m\\xdb\\xebO\\x9f\\xa6L\\x99\\x82\\xb3\\xb0\\xb0(**'\nb\"\\x982%r\\xfdz\\x00\\xc8\\xfb\\xf4i\\xfc\\x8e\\x1d\\xdd\\xe2j,\\x00\\xe0p8\\xba\\x81\\xc1\\xb41c\\xd6\\xcd\\x981r\\xf8p\\xd1Ko\\xca\\xca\\xfeLJ\\xba\\x9c\\x9a\\xda\\xc2f\\x8b\\x9e'\\x12\\x08\\xceVV~\\x13&\\xf8\\x8c\\x1fo\\xa2\\xa77H\\x8e\\xfa\\xa3\\xa6\\xa5%6;;:++9?_\\xb4\\x9a\\x03\\x80\\x96\\xaa\\xeabg\\xe7\\xd5nnc\\x8d\\x8d\\xd1\\x19>\\x86\\xdd\\xcb\\xc99\\x9d\\x90\\x90\\xf4\\xe6\\x8d(\\xc5\\xfd\\xb1r\\xda\\xb4\\xb0\\x9f~B\\xc7K\\xfe\\xf8\\xe3RJ\\x8a\\x85\\x85\\x05\\x11=\\x01}--taOT\\x14bj\\x8c\\x91\\x91\\x8e\\x9a\\x1a\\x8f\\xcf\\xe7cX\\x0b\\x9b]XU\\xc5\\xc70\\x0c\\xc3\"\nb\"*+\\x0b*+\\xcf>x\\xe0>n\\xdcfoowkk\\xf4\\xc5\\xb1\\xc6\\xc6^vv\\xe1\\x8f\\x1f\\x0b\\xf5\\x19\\x0e\\x19\\xf2\\xaf9s\\xe6N\\x9a$Z\\x19\\x15\\x0e}-\\xad\\xd5nn\\xab\\xdd\\xdc\\x98\\x1d\\x1d1\\xd9\\xd9\\x07n\\xded\\xf4\\xd4)\\x0e\\x97\\x8bZ\\x1c\\xfax95u\\xf7\\xf5\\xeb\\x1f\\xeb\\xea\\x84\\xdfE\\xcf\\xde\\xd1\\xd2\\xd2HW\\x17\\x9d\\xe1\\xf1\\xf97\\xd3\\xd3\\x0b*+/$'\\xff\\xba`\\x01USSHNuu5\\xb1\\xbb\\xbb\\x1b\\x00\\x08=/\\x08\\x1e\\x9f\\x0f\\x00;\\xff\\xe7\\x7f\\x0e.\\\\(jS[GGVqqzQ\\xd1\\xe3\\xb7o\\x93\\xf3\\xf31\\x0cK\\xcc\\xcbK\\xcc\\xcb{\\x10\\x1c<}\\xdc\\xb8\\xa2\\xea\\xea\\xa0\\xc8\\xc8\\xb8\\x97/QaM\\x15\\x95\\x1d~~\\x81\\x9e\\x9e\\xcaJJ_\\x8b\\xa4~PWV^\\xec\\xec\\xbc\\xc0\\xd11\\xec\\xd1\\xa3}7n\\xd4\\xb6\\xb6r\\xba\\xba~8vl\\xea\\xe8\\xd1'\\x96-\\xa3jj.\\xfd\\xe3\\x0f>\\x86!\\xf3\\x96\\xba\\xb8L\\x1f7n\\x92\\xa5\\xe5\\x10u\\xf5>rV\\xbb\\xb9y\\xff\\xfe\\xbb\\x8e\\x9a\\xdaP\"\nb''\nb't\\x06\\x91\\xd3\\xdd\\xdd\\x8d\\xa3R\\xa9\\xb5\\xb5\\xb5k\\xdd\\xdd\\xcf\\xae\\\\\\t\\x00,\\x0e\\xe7S}\\xfd(CC\\t=nQu\\xf5\\x99\\xc4\\xc4\\x8bO\\x9e\\xb08\\x9c\\x87\\xff\\xfa\\xd7\\xcd\\xf4\\xf4?\\x1f>\\xec\\xe6\\xf3\\x01@\\x89H\\\\\\xeb\\xee\\xfe\\xaf9s\\xfa\\x1b\\xf1-\\xc1\\xe2p\\x8e\\xc5\\xc5\\x1d\\x8d\\x8bcq8\\x00\\x80\\xc3\\xe1\\xfc\\x9d\\x9c\\xda\\xda\\xdbK\\xeb\\xebW\\xbb\\xb9-suU\\xa3P\\xa4\\x97\\xf6\\xf3_\\x7f\\x9d{\\xf0\\x80J\\xa5\\xe2\\xe8tzaa\\xa1\\xbf\\x93\\xd3\\x95'\nb'\\x1bd2\\x88\\xc3\\xe5\\x96\\xd6\\xd7/:y2\\xe7\\xe3Gd\\xd0|G\\xc7\\xdf\\x16,0\\xa3Re\\x92\\xf3\\xf5P\\xd7\\xda\\xba\\xef\\xe6\\xcd\\xb0\\xa4$.\\x8f\\x07\\x00\\x16\\xc3\\x86\\xc5n\\xdbf\\xf5yW+'\nb'\\x16\\x9f>}%5\\x95N\\xa7\\xe3555\\x01@\\xec(F2r>|p\\xdd\\xb3\\x071\\xe5<rd\\xe6\\xc1\\x83\\xd7\\x02\\x03\\xff{\\x98\\x02\\x80\\xa1\\x9a\\x9agV\\xacx{\\xfc\\xb8\\x9f\\xbd=\\x00\\x14UWO\\xdc\\xb5+\\xe1\\xd5+Y\\xe5\\xa0w\\xa5\\xa6\\xa6\\xa6\\x80,\\xd1w\\xa74\\xb8\\xf8\\xe4\\xc9\\xd4}\\xfbj[[\\x01`\\xb3\\xb7\\xf7\\xe3={\\xc6\\x9b\\x9b\\xcbj\\xc4\\xb7\\x81\\xc5\\xb0aw\\xb6n=\\x12\\x10\\x80\\xc7\\xe1Z\\xdb\\xdb\\xbd\\x7f\\xff\\xfdh\\\\\\x9cL\\x12z\\xc9\\xd2\\xd2\\xd2\\x02\\x80&\\x16K\\xcao\\xf2\\xf8\\xfc\\xa0\\xc8\\xc8\\x1f\\xcf\\x9e\\xed\\xea\\xeeV\"\\x12\\xc3\\xd7\\xae=\\xb6d\\tA\\xc6\\t\\xc4\\xb7\\xc7\\x96Y\\xb3\\xe2v\\xec\\xd0PV\\xe6c\\xd8\\xd6K\\x97\\x96\\x9e9\\xd3g\\x9c!\\x01\\x88\\x1c---<\\x9a\\xa0|\\xa8\\xad\\x95<\\xee@hmo\\xf7:t\\xe8\\xf8\\xdd\\xbb\\x00@\\xd5\\xd4|\\xbcg\\xcf\\x8fS\\xa7\\x0e\\xe2\\x16\\xbe)<mm_\\xfc\\xf6\\x1b\\xea(\"\\x9f>u\\xdd\\xbb\\xb7\\xa6\\xa5\\xe5\\x8b\\xdf\\xc20\\xecCm-\\x00\\x18\\x1b\\x1b\\xe3\\xad\\xac\\xac\\x00\\xa0\\xa3\\xab\\xab\\xb2\\xa9I\\xf2\\xd7Jjk\\x1d\\xfe\\xf7\\x7f\\x13\\xf3\\xf2\\x00\\xc0\\xc6\\xc4$\\xeb\\xf7\\xdf\\x1d\\xe9\\xf4\\xc1\\xdf\\xc3\\xb7\\xc4(C\\xc3\\xcc\\x83\\x07]G\\x8f\\x06\\x80\\xf4\\xa2\"\\xfb\\x9d;sKK%\\x7f\\xa5\\xb2\\xa9\\xa9\\xa3\\xab\\x0b\\x00\\xe8t:\\x9e\\xdes\\xc3E55\\x12\\xbe\\x83\\xea\\x14\\x9a\\x91\\xfd0qb\\xda\\x81\\x03FC\\x86(\\xe4\\x06\\xbe1\\x86\\xa8\\xab?\\x08\\x0e\\xfei\\xfat\\x00\\xa8hl\\xf4<tHr-\\x11\\xd2\\xf2\\x19Y\\x8c\\xcf\\xa7\\xa6\\xa2\\xe0\\xf1\\xf9\\xf3O\\x9c@Lm\\x995+j\\xd3&\\x152Ya\\xe6\\x7fs\\x90\\x08\\x84\\xf3\\xabV\\x1d\\t\\x08\\x00\\x80\\xea\\xe6f\\xbf#GP\\xdd\\x11\\x0b!-t:\\x1dO\\xa5RQ\\x1f/\\xa1fm\\xbb|\\x19\\xb5\\xbe\\x1f&N<\\xbcx\\xf1\\x17=\\x04\\xff\\x08l\\x995k\\x9d\\x87\\x07\\x00d\\x97\\x94\\xfcx\\xf6\\xec@\\xc5\\x10-ZZZT*\\x15\\x0f\\x00\\xa8\\xdbz\\xc1`\\x88-}\\xf1\\xc9\\x13\\xd4\\xa3\\xdb\\x98\\x98D\\xac[\\xf7\\x7f\\x83)\\x84\\xd0e\\xcb\\xa6\\x8d\\x1d\\x0b\\x00\\xd7\\x9f?\\xff\\xf5\\xd6-\\xb1e\\x10-\\x88\"<\\x00\\xb8\\xb8\\xb8\\x00@fq1\\xb3\\xdf\\xd0\\xf4ya\\xe1O\\x7f\\xfe\\t\\x00TM\\xcd\\xd8\\xed\\xdb\\xff\\xd1\\xad\\xaf?\\x88\\x04\\xc2\\x8d\\xcd\\x9bG\\xe8\\xeb\\x03\\xc0\\xee\\xa8\\xa8;\\x99\\x99}'\nb'0;:2\\x8b\\x8b\\xa1\\x87\"<\\x00L\\x9b6'\nb'\\x00\\xbay\\xbc\\xa7\\xef\\xde\\x89\\x16-ol\\x9c}\\xf4(\\x1aO\\xdd\\xde\\xb2\\xe5\\x1f\\xda\\xa3K\\x86\\xb6\\xaaj\\xdc\\xf6\\xed\\x9a**\\x18\\x86\\x05\\x9c>\\x9d\\xf7\\xe9\\x93\\xe8\\xd5\\xa7\\xef\\xde!\\x1f\\x0c\\xa2\\x08\\x0f\\x00NNNd2\\x19\\x00\\x92\\xde\\xbc\\x11\\x96k\\xef\\xec\\xf4;|\\x18\\x8d\\xd1\\xcf\\xafZ\\xf5\\x8f\\x1b%H\\x0f\\xab\\xe1\\xc3\\xff\\xde\\xb8\\x91\\x80\\xc7\\xb3;;}BB\\xeaZ[\\x85\\x97\\x10!d2\\xd9\\xc9\\xc9\\t\\x10Y\\xca\\xca\\xca\\x8e\\x8e\\x8e\\x00\\xf0H\\x84\\xac\\xad\\x97/\\xa3y\\xdffo\\xef\\x7f\\xd0\\xc8S>\\xcc\\xb0\\xb19\\xbcx1\\x00\\x9454\\xac\\t\\x0b\\x13\\x9eG\\x848::\\xa2\\xe5\\x15\\xc14\\x05U\\xb3\\xfc\\xf2r4Z-\\xaa\\xae\\xfe3)\\t\\x00\\x9cG\\x8eDR\\xfe\\xcfc\\xb3\\xb7\\xb7\\xbf\\x93\\x13\\x00\\xdc\\xc9\\xcc|^X\\x08\\x00\\x1fjk\\xf3\\xcb\\xcb\\xa1\\x87\\x1c\\x10\\x925w\\xee\\\\tp\\xf1\\xc9\\x13\\x00\\xd8q\\xf5j7\\x8f\\x87\\xc3\\xe1\\x8e\\xff\\x13\\xe6}\\x8a\\xc2\\xd1\\x80\\x00\\xf4\\x06\\xdbz\\xf92\\xf4P\\x01\"\\xe4\\x08\\x88\\xb0\\xb4\\xb4D\\xcd2\\xe2\\xe9\\xd3g\\x05\\x05\\xb732\\x00`\\xbe\\xa3\\xe3\\x7f\\xad/\\xe1k`\\x98\\xb6\\xf6FOO\\x00x^Xx\\xe3\\xc5\\x8b\\x88\\xa7O\\x01\\xc0\\xc9\\xc9\\xc9\\xd2\\xd2\\x12\\x15\\xc0\\t\\xe7\\xcf\\xe1\\xe1\\xe1+V\\xac\\x00\\x005'\nb'\\x85\\xc5\\xe1(\\x11\\x89\\xefO\\x9c\\xf8\\xaf\\xf2O}\\x03\\xb4ut\\x98\\xad_\\xdf\\xc8dRH$\\x0e\\x97\\x0b\\x00\\x17.\\\\X\\xbe|9\\xba\\xdaK\\x16\\x8b\\xc5\\x1a6l\\x18\\xab\\xc7W\\xb3\\xd1\\xcb\\xeb\\xc4\\xd2\\xa5\\x83W\\xcf\\xe3\\xf3\\xdfUT\\xa0\\x852{s\\xf3Q\\x86\\x86'\nb'l\\xd7\\xf5mmB\\xc9z=.\\xf3A\"\\xf4\\xde\\xbdM\\x11\\x11\\xe8XMM\\xad\\xba\\xbaZ\\xadgm\\x11\\'\\xea\\x99\\xf9\\xf1\\xc7\\x1f/^\\xbc\\x08\\x00\\x9a**%\\xa7O\\x0f\\xd2\\x8f\\xce\\xe5\\xf1~\\xbd}\\xfbD|\\xbc\\x81\\xbe\\xbe\\x8d\\x8d'\nb\"\\x00\\xe4\\xe6\\xe6V\\xd5\\xd4l\\xf2\\xf4\\x0c\\x9e=\\x9b4\\x88x\\x05\\x0c\\xc3\\xce'%\\x85\\xc4\\xc5\\xb18\\x9c\\xeflm\\x01\\xe0\\xe5\\xabWj\\x14\\xca\\xf6Y\\xb3\\xd6\\xb8\\xb9\"\nb\"r\\x8e\\xd1\\xd5\\xddM\\x0f\\x0c,\\xad\\xaf\\x07\\x80\\x80\\x80\\x80\\xc8\\xc8H\\xe1%\\xa2h9CCCt\\xb0\\xc3\\xcfo\\x90L\\x15UW\\xcf;u\\xca\\xd0\\xc2\\xa2\\x80\\xc1000\\x10\\x9e\\xaf\\xaa\\xaa\\xfai\\xc5\\x8a\\t\\xc1\\xc1Q\\x1b6X\\x0c\\x1b&\\x87\\xe4\\xaa\\xe6\\xe6\\xa5\\xe7\\xcf\\xb7\\xe1p1\\xf7\\xef[\\xf7,\\xc4\\x01@^^\\xde\\xea\\xe5\\xcboggG\\xacYc\\xa0\\xad-\\xb7\\xe5JD\\xe2\\x81\\x05\\x0b\\x02N\\x9f\\x06\\x00\\xf2\\xe73\\x96\\xde\\x16\\xc1\\xe3\\xf1.]\\xba\\x04\\x00\\x86C\\x86\\x04zz\\xca\\xad\\x0c\\x00\\xb8<\\xde\\xdcS\\xa7\\x96\\xae[\\x17\\x97\\x90PUU\\xb5p\\xe1Bsssss\\xf3\\x85\\x0b\\x17VUU\\xc5%$,]\\xb7n\\xee\\xa9S\\xdc\\x01\\x96r%\\x80\\x8fa\\xf3N\\x9d\\xb2\\xf7\\xf0x\\x9e\\x99\\xc9\\xe5rE%s\\xb9\\xdc\\xe7\\x99\\x99\\xf6\\x1e\\x1e\\xf3N\\x9d\\xe2K\\xe1\\xc8\\x94\\x00\\x7f''k\\x1a\"\nb'\\x00\\xae_\\xbf\\xde\"\\xe2 \\xecm\\x86)))h\\x06\\xf4\\xef\\xd5\\xabW\\xbb\\xb9'\nb\"FY\\xf0\\xf5\\xebo::b\\xee\\xdd;q\\xe2\\xc4\\xb6m\\xdb\\xd0\\xd2$\\x02\\x91H<|\\xf8\\xf0\\xa6M\\x9b|\\xbd\\xbc\\xc6*+\\xff:\\x7f\\xbeL\\x92\\x8f\\xdd\\xbd\\x1b_Z\\x9a\\xf4\\xe4Ihh\\xa8X\\xc9\\x1b7ntsu\\xf541\\t\\xf2\\xf6\\x1e\\xcc-\\xc4fg\\xfb\\x1e>\\x0c\\x00\\x11\\x11\\x11K\\x96,A'{\\xc9\"\nb''\nb''\nb':~\\xfc8\\x91@\\xa8\\xfb\\xeb\\xaf\\xc1\\xac!wuw\\xeb\\xaeZ\\xc5(..++stt\\xec\\x1f\\xbbB \\x10\\x9e?\\x7fnlll9bDCX\\x98\\x12\\x91(VN\\x7f\\xf0\\xf8\\xfc!+W\\xbez\\xfd\\xba\\xbe\\xbe^\\x82d===\\xdbq\\xe3\\x1a\\xff\\xfak0o\\x12.\\x8f7t\\xe5\\xca\\x166{\\xf6\\xec\\xd9\\xb7z\\x1c\\x12\\xbd\\xe2bbb\\x00\\xc0\\xd9\\xcaj\\x90\\xab\\xedo\\xca\\xcaL\\x8d\\x8d\\xf5\\xf5\\xf5CBB\\xc4F\\xf9\\xf0x\\xbc\\x90\\x90\\x10}}}Sc\\xe37ee\\xd2K~[^n\\xa0\\xafojj*Y\\xb2\\xa9\\xa9\\xa9\\x81\\xbe\\xfe\\xdb\\xf2r\\xf9\\xef\\x01\\x80D x\\xda\\xda\\x02@bb\"\\x87\\xc3A\\'\\x05d\\xe5\\xe7\\xe7\\xa3\\xa8 \\xbf\\t\\x13\\x06\\xa3\\x03\\x00\\xb2JJl\\xec\\xec\\x00 \\xb3\\x9f\\xc7C\\x08t\\xc9\\xc6\\xce.\\xeb\\xf3P\\xa4/K\\xb6\\xb5\\x95J\\xb2\\xad\\xadL\\x92\\xc5\\x02\\xad6\\xb2\\xd9\\xec\\xa4\\xa4$tF@Vtt4:\\xf0\\x19 *Lz\\xf0\\xf8|\\x14\\xc6(\\xf6\\xe1\\x0b\\xca\\xf0x\\x00@ \\x10x\"\\xc1S_\\x04\\x8b\\xc3QSW\\x97F\\xb2\\x9a\\xba:\\xab\\xa7:\\xc8\\x8d\\x1966d\\x12\\tD\\xc8\\x11\\x90\\x85\\xda\\xa05\\x8d6\\xf8\\xa8\\xa0\\xf1ff\\xb999\\x00`oo?P\\x19t)7\\'\\xe7;33\\xe9%\\x7f\\xf7\\xd5$\\x8b\\x85\\xba\\xb2\\xf2\\xf7c\\xc6\\x00@\\\\\\\\\\x1c\\x8a\\x88\\xc3\\x03@EE\\x05\\x8a^\\xf4\\x1d\\xd8\\x08\\xe9amb\\xc2()ijj\\xda\\xbcy\\xb3\\xd8\\xf1!\\x0e\\x87\\xdb\\xbcysSS\\x13\\xa3\\xa4\\xc4F\\x96XV;S\\xd3\\xf7\\x0c\\x06\\x9b\\xcd\\x96,\\x99\\xcdf\\xbfg0\\xec\\x06\\x1d/\\x07=-\\xb1\\xae\\xae\\xee\\xc5\\x8b\\x17\\x80\\xc8\\x8a\\x8d\\x8d\\x15\\xbd6HPH\\xa4Unn\\x1b~\\xfe\\xd9\\xc5\\xc5e\\xf7\\xee\\xdd\\xfd\\x0b\\xec\\xde\\xbd\\xdb\\xc5\\xc5e\\xc3\\xcf?\\xafrsCqxRB\\x85L\\x9e;i\\xd2\\xf6-[$K\\xde\\xbee\\xcb\\xdcI\\x93\\x14\\xe2\\x01\\xf7\\x19?\\x1e=\\x15\\xd4\\xf2\\xf0\\xd0\\xd3&\\x8duu\\x07\\x1f\\xbd\\x88\\xf0\\xdb\\xbcy\\x19\\xcf\\x9eEDD\\xec\\xdd\\xbb711\\xf1\\xfb\\xef\\xbf\\xd7\\xd6\\xd6\\xd6\\xd6\\xd6\\xfe\\xfe\\xfb\\xef\\x13\\x13\\x13\\xf7\\xee\\xdd\\x1b\\x11\\x11\\x91\\xf1\\xec\\xd9o\\xf3\\xe6\\xc9*\\xf9D@@\\xdc\\x9d;\\xf1\\xf1\\xf1\\x03I\\x8e\\x8f\\x8f\\x8f\\xbbs\\xe7D@\\x80BnD_K\\xcba\\xc4\\x08\\xe8!\\x0b\\xc7\\xe7\\xf3UUU;::V\\xbb\\xb9\\xfd{\\xf5j\\x85\\xe8\\x00\\x80\\xbcO\\x9f\\xe6\\x9e<i?y\\xf2\\x1f\\xe7\\xcei\\x8bL>\\x9a\\x9b\\x9b\\xd7\\xaf]\\x9b\\x95\\x96v#0\\x10\\x8d\\x92eEZa\\xe1\\xdc\\x93\\'\\x17.^\\xfc\\xdb\\xa1C\\x14\\x910+\\x0e\\x87\\xb3k\\xe7\\xcek\\x97/\\xdf\\x08\\x0c\\x9c\\xac8\\'\\xf8o\\xb7o\\x07\\xff\\xfd7\\x00455\\x11\\xcb\\xcb\\xcb;::\\x00`\\xcc\\x00Q\\xd9}\\xd1\\xdd'\nb'--\\xc0b\\x01\\x87\\x03<\\x1e\\x10\\x08@\\xa1\\x80\\x9a\\x1ahk\\x83\\xc8\\xdc\\xd8\\x9aF\\xcb=th\\xe7\\xf5\\xeb4#\\xa3q\\xa3G\\x7f7a\\x02\\x00\\xbc\\xcc\\xcc|\\xfd\\xf6\\xed\\x8fS\\xa7\\xe6\\x1e:$w3\\x99L\\xa7\\xbf\\t\\t\\xf9\\xf9\\xe2E3\\x1a\\xcdq\\xe2\\xc4\\xef\\x1c\\x1c\\x00\\xe0eF\\xc6\\xf3\\xf4tg:\\xfdMH\\x88\\x98Y\\xadt6\\x8b\\x850\\xca\\xb2\\xa0\\xa0\\x00\\xf7\\xe0\\xc1\\x03www\\x00@\\x01\\x8f_\\xb0\\xb4\\xa6\\x06\\x1a\\x1b\\x01\\xbd\\xef1\\x0c0\\x0cp8@}-\\x1e\\x0f\\xba\\xba\\xd0\\xcf\\xff\\xc5\\xee\\xec\\xcc\\xf9\\xf0A\\xe8H\\xb133SU\\xd0zZi}}Vqq\\xd6\\xc7\\x8f\\x00`ojj?b\\x84\\xf8W\\xb9\\xec6\\x8b\\xa2\\xa0\\xb2r\\xe4\\xa6M\\x00\\x10\\x1e\\x1eNd\\xf4\\xac\\xad~!$\\x8e\\xc7\\x83\\xb22`\\xb3\\x81\\xcf\\x07>\\x1fx<\\x81V\\xf4\\x9f@\\x00\\x0c\\x83\\xfazho\\x07\\x1a'\nb'D\\xe6\\x19\\xaad\\xb2\\xf3\\xc8\\x91\\xce#G\\xcaD\\x8440\\xd1\\xd33\\xd1\\xd3\\x9b;i\\x92\\xc2m\\x16\\x85\\x19\\x95J\\xc0\\xe3y|~AA\\x01\\xb1\\xb0\\xb0\\x10\\xdd\\x92\\xa1\\x8e\\x8e$\\xd3\\x90\\xd6\\xee\\xee^\\xad|\\xbe@+\\x1e\\x0f|>\\x10\\x08\\x80\\xc7\\x03\\x9b'\nb'\\xe5\\xe5 cg\\xd4\\xd6\\xd1\\xf1\\x82\\xc1(\\xa9\\xa9\\xa9okk`2\\x1b\\x98L\\x00\\xd0UW\\xd7UW\\xd7\\xd3\\xd00\\xd7\\xd7\\x9fdi\\xa9!G\\xfa\\x8a\"lV\"\\x12M\\xf4\\xf4Jjk\\x0b\\x0b\\x0b\\x89(\\xae\\x9f\\xa6\\xa7\\'\\xc9gVS#\\xd0\\xda\\xdd'\nb'<\\x9e@7\\x80@1\\x00\\x10\\x08\\x02\\xdd\\x00\\xc0dBc#|iE\\x16\\xc3\\xb0\\xe4\\xfc\\xfc[\\x19\\x19i\\x85\\x85\\xf9ee\\x92\\x9d*x\\x1cn\\x8c\\xb1\\xf1d:}\\x8e\\x83\\xc3\\xf7c\\xc6H\\xe5\\xdeS\\x9c\\xcd4=\\xbd\\x92\\xda\\xda\\xba\\xba:\"\\x93\\xc9\\x04\\x00I\\xcf\\x8d\\xcb\\x85\\xa6&AMF*\\x85\\xbaQ\\x95F\\xf5\\x99@\\x00\\x1cNP\\xa6\\xb6\\x16tt`\\x80[\\xaaok\\xfb\\xcf\\xe3\\xc7a\\x8f\\x1e\\x15\\xf7\\x0bE\\xc1\\xe3\\xf1\\xda\\x1a\\x1a\\xba\\xda\\xda\\x00\\xd0\\xd0\\xdc\\xdc\\xdc\\xd6\\x86\\x86\\xce|\\x0c{\\xfd\\xe9\\xd3\\xebO\\x9f\\xce=x0B_\\x7f\\xd5\\xb4i?N\\x9d*\\xc9\\x8f\\xacP\\x9b\\x119L&\\xb3\\x87,\\t\\xf9p--\\x02e<\\x9e\\xe0)\\tu\\xf3\\xf9\\x80\\xc7\\x0b\\xb4\"\\xa0\\xbe\\x13\\x87\\x83\\x8e\\x0e\\xe8\\'\\x93\\xc7\\xe7\\x9fNH\\xd8\\x1d\\x15%\\x0c\\xaaP\\xa1P\\x1cmm\\'\\xdb\\xda:\\xda\\xda\\xdaXY\\xe9ji\\x89\\xa6l\\xf1\\xf9\\xfc\\x86\\x96\\x96\\xdc\\x82\\x82\\xe7\\xaf^\\xa5\\xbdz\\xf5\\xfc\\xd5\\xabv\\x0e\\xa7\\xb8\\xa6f\\xfb\\x95+\\xbf\\xde\\xbe\\xbd\\x7f\\xde\\xbc_f\\xce\\x14\\xef\\x87Q\\x9c\\xcdBrX,\\x16\\x11\\xadP\\xa8K\\x88\\x0bg2\\x05\\xad]\\xf4Aq\\xb9\\xbd\\x8a\\x91\\xb9H\\x1f:\\x89a\\xd0\\xd6\\xd6GqvI\\xc9\\xaa\\x7f\\xff[\\x18i7z\\xc4\\x885\\xf3\\xe7/\\xf1\\xf1\\xd1\\x188\\xd5\\x08\\x8f\\xc7\\x0f\\xd5\\xd1qwttwt\\x04\\x806\\x16+26\\xf6\\xfc\\xf5\\xebo\\x8b\\x8b\\x99\\x1d\\x1d\\x9b\"\"\"\\x9e>'\nb\"\\xfb\\xe9'1\\xebu\"\nb'\\xb2\\x19\\x01\\x91\\xc3d2\\xf1_\\xaeY\\x9d\\x9d\\x00=/]\\x80\\xcf\\x9e\\x98\\xb0G@\\x7f\\xa2\\xc5\\x98LQ\\x19\\xb732\\x9cw\\xefFLY\\xd0h\\xf1\\xe7\\xcf\\xe7\\xc7\\xc4\\xac\\xf7\\xf7\\x97\\xc0T\\x7fh\\xa8\\xa9\\xad\\xf7\\xf7\\xcf\\x8f\\x89\\x89?\\x7f\\xde\\x82F\\x03\\x80\\xdc\\xd2R\\xe7\\xdd\\xbb\\xd1*\\xa7\\xc2m\\xee\\xd5\\xab\\xa2\" \\x0bu'\nb'\\x92:L\\xc4\\xba\\xf0\\x18\\x01=7\\xf4\\xa2\\x11{U\\xa4\\xc3>\\x9b\\x988\\xf7\\xf8q\\x0e\\x97K\"\\x12\\x0f\\xfc\\xf2\\xcb\\x9b\\xe8\\xe8\\x99\\xce\\xce_\\xe6f`\\xcctv~\\x13\\x1d}\\xe0\\x97_HD\"\\x87\\xcb\\x9d{\\xfc\\xf8\\xd9\\xc4D\\xc5\\xda,'\nb'\\x9c\\xa0 \\x1f\\xaf\\xae\\xae\\x0e\\x00\\xcc/z\\x7fP\\xbf(\\xec P\\x05F\\x1d\\xa4\\xb0SD}\\x01\\xfa\\xd8\\xd3\\xae/\\xa7\\xa6\\xae\\xbbp\\x81\\x8fa\\xea\\xaa\\xaa\\xf7\\xce\\x9d\\x0b^\\xb3\\x86\\xac\\x88\\x84\\x1e\\xb2\\x92R\\xf0\\x9a5\\xf7\\xce\\x9dSWU\\xe5c\\xd8\\xba\\x0b\\x17.\\xa7\\xa6*\\xca\\xe6>@\\xe4\\xa8\\xab\\xab\\x0b\\xc8j\\x93\\x904@&\\x0b\\xa4\\xe3\\xf1\\x82\\xffx<\\x10\\x89@\"\\x81\\x92\\x12\\x90H@$'\nb'N'\nb'\\xcb\\xe0p\\xa0\\xa6\\x06\\x00E\\xd5\\xd5k\\xc3\\xc2\\x00`\\x88\\x96VJd\\xe4tGG\\xf9\\xe9\\x11\\x87\\xe9\\x8e\\x8e)\\x91\\x91C\\xb4\\xb4\\x00`mXX\\x910\\xc7p\\x106\\xf7\\x07\"\\xa7\\x97,I5KM\\xadW\\x1c\\x12M \\x08\\xfe\\x88\\xc4\\xde\\xe3>eTUy|\\xfe\\x82\\xd0P\\x16\\x87\\x83\\xc3\\xe1\"\\x0e\\x1e\\xb4\\xb1\\xb2R,S\\x086VV\\x11\\x07\\x0f\\xe2p8\\x16\\x87\\xb3 4T\\xe0z\\x95\\xd7f\\xb1*d\\xa9Y::\\x82\\x87 \\xaa\\x89H\\x04%\\xa5\\xde\\xff\\xa2v\\xe0\\xf1\\xa0\\xa2\\x02d\\xf2\\xed\\x8c\\x0c\\x14\\xe1\\xb51 \\xc0\\xcb\\xc5\\xe5+\\x10%\\x80\\x97\\x8b\\xcb\\xc6\\x80\\x00\\x00\\xc8\\xf9\\xf8Q\\xd0\\xd9\\xcbk\\xb3X\\xf9\\xbd5\\x0b-\\x17\\x9754\\x0ch\\x8b\\x92\\x12hk\\xf7>\\x1cT\\x99QMFZ\\x85\\x1f\\x85O\\xcc\\xc8\\x08\\x00N\\xdf\\xbf\\x0f\\x00:\\x9a\\x9a\\xbf\\x06\\x06*\\x9c\\xa0>\\xf850PGSS\\xa8Tn\\x9b\\xc5\\xa2\\xbc\\xb1\\x11\\x00tuu\\xf1(\\x9e\\xa6\\xad\\xa3\\xa3\\xba\\xb9y@[\\xf4\\xf5AYY\\xf0\\x04D\\x9f\\x89\\xa8>\\xd4\\x0b\\x10\\x080|8\\x90Ho\\xca\\xcaR\\xdf\\xbf\\x07\\x80U?\\xfc\\xa0\"Kr\\x9f|P\\xa1PV\\xfd\\xf0\\x03\\x00\\xa4\\xbe\\x7f/X^\\x93\\xddf\\xb1\\x92\\xbby<\\x14\\xe0gii\\x89\\x17\\x06\\x1f\\x15\\x0c\\x9c4\\x008\\x1c\\x98\\x9a\\x82\\x8a'\nb'\\x10\\x89\\x82?%\\xa5\\xde*\\x8d\\x0e\\xd0\\xf1\\xf0\\xe1\\xa0\\xad'\nb'\\x00\\xc2\\x95\\xa8\\x15s\\xe6(\\x90\\x14\\t\\x10*\\x12\\xa8\\x96\\xddf\\xb1(\\xad\\xafGa\\x06VVV\\xbdd\\x15J \\x0b\\x00\\x08\\x0403\\x83\\xa1C\\x05'\nb'\\xd0cA\\x7f\\x04\\x02()\\x81\\x8a'\nb'XZB\\x8f\\xeb\\x02\\xcd\\xfb\\x94H$s)}\\x8a\\x83\\x86\\xb9\\x91\\x91\\x12\\x89$T-\\x87\\xcdb!\\xcc\\xb8\\xb6\\xb2\\xb2\"\\x9a\\x98\\x98())uuu\\xbd\\xfb|[\\x011\\xc0\\xe1\\x80J\\x85!C\\xa0\\xbd\\x1dZ[\\x81\\xc5\\x02\\x1c\\x0e\\xc8dPS\\x0355\\xa0PDg\\xa1%55\\x00@30\\x90u{\\x0e\\xb9\\x81\\xc7\\xe3i\\x06\\x06E\\x9f>\\x95\\x88\\xce\\xcfe\\xb1Y,\\x84\\xb4\\xd0\\xe9t\"\\x81@pppHMM}\\x90\\x97\\'\\x95QD\"hh\\xc0\\x97\"\\xc7P\\xd5%\\xf6s\\xda6\\xb6\\xb4\\x9c\\x88\\x8c\\xbc\\x93\\x94\\xf4?nn\\x9b\\x96,\\x19\\xd2\\x93\\xf5/%\\x1a[ZB.\\\\\\xb8\\xfd\\xf0\\xe1\\xec\\xe9\\xd3\\xb7-_\\xae\\xfby\\xf3A\\xea\\xc4\\x04\\xe7Hg\\xb3X\\xa0\\xccW\\x1a\\x8d6t\\xe8P\"\\x00\\xf8\\xf9\\xf9\\xa5\\xa6\\xa6\\x16VU\\x15TV\\xca\\x91B,\\x16(m\\xa1\\xb4\\xaa'\nb'\\xc30Q\\xf7\\xd3\\x81\\xf3\\xe7O^\\xba\\x04\\x00\\xefJJX\\xed\\xed\\xa1;v\\xc8$6\\xe4\\xc2\\x85#\\xe1\\xe1\\x00p$<\\x9c\\xc7\\xe3\\x1d\\xdb\\xb6Mx\\t\\xc3\\xb0\\xd2\\xaa*\\xa1j\\x85\\xa0\\x99\\xcdNy\\xff\\x1e\\x00|||\\x00-\\x85\\xf9\\xf9\\xf9\\xa1k1\\xe26\\x8a\\x91\\x0f\\xe6T*\\x00tp8\\x15\\xb5\\xb5\\xa2\\xe7o\\x88L\\xe2n\\xf4\\x99\\xd0I\\x81[\\x0f\\x1e\\x08\\x8f\\xaf\\xa3QB\\x0f*jk;8\\x1c\\xa1j\\x85\\xe0\\xee\\xcb\\x97(\\xc3\\x02Q\\x84\\x07\\x0033\\xb31c\\xc6\\x00@\\xf4\\xc0\\x01\\x17\\xb2B\\xb8\\xd4|\\xa9g\\x05\\x17\\xc1]d\\xc6\\xe3.\\xfb\\xec\\xc7}\\xf2d\\xe1\\xb1\\xe7\\xe7\\xb3q\\xa1\"\\x99V\\xb9%#:+\\x0b\\x00\\xb4\\xb5\\xb5\\xa7L\\x99\\x02\\xc2X\\x07\\xc4\\\\Fq\\xb14\\x99\\xb0\\xd2\\xc0\\xc1\\xc2\\x02\\x19}\\xe6\\xda5\\xaeH\\xc8Y\\xf0\\x9a5s\\xa6O\\xa7\\x90\\xc9s\\xa6O\\x0f^\\xb3FV\\xb1;V\\xae\\\\\\xe8\\xe9\\xa9\\xa6\\xa2\\xb2\\xd0\\xd3sW\\xcf\\xf6\\'\\x00\\xc0\\xed\\xee>s\\xed\\x1a\\x00\\xd8\\x98\\x988XX(\\xe0\\x06\\x008\\\\nbn.\\x00xyy\\x11\\x89D\\x10\\x92\\xe5\\xeb\\xeb\\x0b\\x00\\x18\\x86\\xc5*\\xae%\\xfe2s&\\x00T\\xd5\\xd5\\x1d\\xef\\t\\xfe\\x05\\x00s#\\xa3\\x9b\\xa1\\xa1m\\x99\\x997CC\\xe5\\x18U\\xd0\\x0c\\x0c\\xae\\x1e9\\xd2\\x9a\\x91q\\xf5\\xc8\\x11\\x9aH\\xa8\\xea\\xf1\\x88\\x88\\xaa\\xba:\\xa1R\\x85\\xe0\\xe1\\xeb\\xd7\\xec\\xceN\\xe8!\\x07\\x84d\\x8d\\x1f?\\x1eE\\xdf\\xa2\\x8a\\xa7\\x10\\xf8;9\\xa10\\xfa\\xe0\\x93\\'\\xd3?\\x7f\\xd5\\x92\\xa4\\x8e\\xf6\\x13\\x8b>\\xc3\\x91\\xf4\\xbc\\xbc\\xe0\\x93\\'\\x01\\xc0\\x8cJE)%'\nb'\\x01\\xea\\x94\\xc8d\\xf2\\x8c\\x193\\x04z\\x85\\xd7P\\x87\\x9f\\x9c\\x9f\\xdf?\\xebP>PH\\xa4\\xbf7n$\\x11\\x08\\xdd<\\xde\\xc2\\xad[\\xcb%\\xe6`\\xcb\\x8d\\xf2\\x9a\\x9a\\x85[\\xb7v\\xf3x$\\x02\\xe1\\xef\\x8d\\x1be\\x8a4\\x91\\x00>\\x86\\xa1\\xadu\\xa6M\\x9b&\\x8c\\x83\\xef%\\x0bu[\\x9d\\\\\\xae\\x02\\xdf\\x89\\xf6\\xe6\\xe6\\x07\\xfd\\xfd\\x01\\xa0\\xb4\\xb2r\\x92\\xbf\\xff\\xeb\\x01\\x92e\\xe5\\xc6k\\x06c\\x92\\xbf\\x7fie%\\x00\\x1c\\xf4\\xf7\\xb7W\\\\\\xf2\\xcc\\xe3\\xfc\\xfc\\xfa\\xb66\\x10\\x19*\\x80(Y\\xae\\xae\\xaeT*\\x15\\x00\\x0e\\xdc\\xbc9\\xd0\\xfeYr \\xc8\\xdb{\\xab\\x8f\\x0f\\x00T\\xd6\\xd6:\\x07\\x04\\\\\\x96q\\xb7\\x0e\\t\\xb8\\x1c\\x17\\xe7\\x1c\\x10PY[\\x0b\\x00[}|\\x06\\x19\\x9e\\xdc\\x07\\xbb\\xa3\\xa2\\x00\\x80B\\xa1\\xf8\\x8a\\xecV\\xd7K\\x16\\x89DBAO\\x8c\\xea\\xea\\xb0G\\x8f\\x14\\xa5\\x15\\x87\\xc3\\x1d^\\xbc\\xf8\\xc4\\xd2\\xa58\\x1c\\xae\\x8d\\xc5'\nb'\\xd8\\xb1\\xc3u\\xd9\\xb2\\xfc\\xa2\\xa2\\xc1\\xc8\\xcc/*r]\\xb6,`\\xc7\\x8e6\\x16\\x0b\\x87\\xc3\\x9dX\\xbaT\\xb1i\\xee1YY(\\x8bn\\xc3\\x86'\nb'C\\x87\\x0e\\x15\\x9e\\xff,\\x1d\\x85\\xcb\\xe5\\x8e\\x1a5\\xaa\\xb8\\xb8\\x98\\xaa\\xa9Y|\\xfa\\xb4L\\xfb&}\\x11\\xb1\\xd9\\xd9k\\xc3\\xc2\\xaa\\x9a\\x9b\\x01\\xed\\x0e\\xe8\\xec\\xbcf\\xfe|Ogg\\xe9\\'\\x8f|>?>5\\xf5\\xfc\\xf5\\xeb\\t\\xa9\\xa9h\\x9d\\xc5@[\\xfb\\xdc\\xaaU\\x83\\x8f\\x83\\x15\\x05\\x8f\\xcf\\x1f\\x1b\\x14\\xf4\\xbe\\xb2R[[\\xfb\\xc3\\x87\\x0fZ\"\\x132\\\\\\x9f]U\\xa2\\xa2\\xa2\\xe6\\xcf\\x9f\\x0f\\x00{\\xe7\\xce\\xdd\\xd3\\x93g\\xa7(0;:vGE\\x9dNH\\x10\\xc6\\xdd\\x1a\\xe9\\xeb{89M\\xb6\\xb5u\\xb4\\xb1\\xb1\\x1c`0\\xc9(-}\\x9e\\x9b\\x9b\\xf6\\xeaU\\xe2\\xb3g\\xc2\\xb7\\x04\\x01\\x8f\\xffe\\xe6\\xcc\\xfd\\xf3\\xe6\\xa9\\xcb\\xbb\\x85\\xe7@\\xb8\\x90\\x9c\\xbc\\xf2\\xfcy\\x008z\\xf4hPP\\x90\\xe8\\xa5\\xbeda\\x186a\\xc2\\x84\\xec\\xecl5'\nb'\\xa5\\xe4\\xf4\\xe9\\xa1\\x9a\\x9a\\x8a5\\x05\\x00\\xdeUT\\xfcq\\xff\\xfe\\x95\\xd4\\xd4>\\xfbP)S(Cutt\\xb5\\xb5u\\xb5\\xb4\\x00\\xa0\\xa1\\xa5\\xa5\\xa1\\xb9\\xb9\\xae\\xa9\\xa9\\xe3\\xf3\\xf5\\x01'\nb'e\\xe5E\\xce\\xce\\xebg\\xcc\\x18\\xd5\\x93i\\xa4@ttuYl\\xd8P\\xd9\\xd4D\\xa3\\xd1'\nb\"\\x0b\\x0b\\xfb\\xe4\\xee\\xf4%\\x0b\\x00\\x92\\x93\\x93Q\\xa2\\xeb\\xcf\\x1e\\x1egV\\xacP\\xb8A\\x08\\xec\\xce\\xce\\xbf\\xd3\\xd2ned\\xbc`0\\xfa\\xec\\xa9(\\x16Z\\xaa\\xaa\\x93,-\\xe788,\\x98<YQ\\x11^\\xfd\\xf1{t\\xf4\\xce\\xabW\\x01 222\\xa0_\\xac\\xa5\\x18\\xb2\\x00`\\xc6\\x8c\\x19\\x89\\x89\\x89$\\x02\\xe1\\xed\\xf1\\xe3\\xf2\\xe5n\\x01\\xc0\\xce\\xabW\\x9f\\x15\\x14\\x04\\xcf\\x99\\xe3!\\x92\\xbb\\xd5\\x1f\\x18\\x86\\xbd\\xad\\xa8H+((\\xa9\\xad\\x15\\x84\\x1c\\xb5\\xb5\\x01\\x80\\xae\\x86\\x86 \\xe4\\x88J\\x9dle5Z\\xe2\\xcez\\x00p/'g\\xfb\\x95+>\\xe3\\xc7\\xf7\\xd9\\xadPz4\\xb1X\\xe6\\xbf\\xfc\\xd2\\xc2f[[[\\xe7\\xe4\\xe4\\xf4\\xefL\\xc5\\x93\\x95\\x97\\x97gkk\\x8ba\\x98\\x9f\\xbd\\xfd\\x9d\\xad[\\xe5\\xd3m\\x19\\x18\\x88\\x16\\xf2\\x96\\xb9\\xba\\x1e_\\xba\\xf4\\xeb\\xed)\\xd9\\xccf\\x07\\xfe\\xe7?\\x97RR\\x00\\xc0\\xd6\\xd44'$D>9k\\xc3\\xc2\\xce?|\\x08\\x00\\xf7\\xef\\xdf\\xf7\\xf0\\xf0\\xe8_@\\xfc\\x9b\\xc8\\xda\\xdaz\\xd1\\xa2E\\x00\\x10\\x9d\\x95%\\xeb>fB\\xdc\"\nb''\nb\"B\\xe1\\xcf\\x17\\x9f<\\x19\\xb5i\\x93\\x02'R\\xa2\\x88\\xc9\\xca\\x1a\\xb5i\\x13b\\xca\\xc1\\xc2\\xe2\\x9a\\xbc+I\\xe1\\x8f\\x1f#\\xa6\\xdc\\xdc\\xdc\\xc42\\x05\\x03\\xd5,\\x00hnnvpp(**\\xc2\\xe3pq;v\\xa0\\xac\\x1fY\\xd1\\xcd\\xe3\\x1d\\x89\\x8d\\xddw\\xf3&\\xda\\x06\\xcd\\xfb\\xbb\\xefB\\x16-RT\\xc7\\\\PY\\xb9\\xe3\\xea\\xd5\\x98\\xac,\\x00\\xa0\\x90H\\xfb\\xe7\\xcf\\xdf\\xec\\xed-_&\\xd8\\xb3\\x82\\x82i\\xfb\\xf7wuw\\xeb\\xe9\\xe9eff\\x0e\\xb4-\\xf7\\x80d\\x01@AA\\xc1\\xc4\\x89\\x13[[[5\\x94\\x95_\\xfc\\xf6\\x9b\\xdc7\\xf9\\xbe\\xb2r\\xc5\\xb9sh\\x07\\x1c\\x02\\x1e\\xbf|\\xea\\xd4}\\xf3\\xe6\"\nb'\\x1bD\\xb2iMK\\xcb\\x9e\\xa8\\xa8\\x0b\\xc9\\xc9h\\x08\\xe2H\\xa7\\x87\\xaf]K\\x17qB\\xc8\\x84\\xb2\\x86\\x06\\xfb\\x9d;\\xebZ[I$\\xd2\\xa3G\\x8f\\x9c\\x07\\x0eZ\\x91D\\x16\\x00$$$x{{\\xf3\\xf9|3*5\\xf3\\xe0A\\xb9s\\x81\\xf9\\x18v!9yoT\\x14\\x1a\\x94\\xaa\\x92\\xc9k\\xdc\\xdd\\x97L\\x992N\\xc6\\xe8\\xd3\\xf7\\x95\\x95\\xe1\\xc9\\xc9\\xe7\\x1e<@\\xce\\x93\\xe1::\\xfb\\xe7\\xcf_\\xe6\\xea\\x8a\\x97w\\xf8\\xce\\xee\\xec\\x9c\\x1c\\x1c\\x8c\\xb6\\xa0\\t\\x0b\\x0b[\\xb9r\\xa5\\x84\\xc2_ \\x0b\\x00\\x8e\\x1e=\\xbau\\xebV\\x00p\\x1d=\\xfaAp\\xf0`\\x12\\xc1;\\xba\\xbaB\\xef\\xdd\\x0b\\x89\\x89\\x11n^9\\xca\\xd0\\xd0\\xdf\\xc9i\\xc1\\xe4\\xc9\\x92}\\xc1\\x8dL\\xe6\\xb5\\xb4\\xb4\\xc8\\xa7O\\x85\\xcb\\x91\\x1a\\xca\\xca;\\xfc\\xfc6zy'\nb\"f\\x93]\\x0c\\xc3~8~\\x1c\\xad\\xf8\\x07\\x06\\x06\\x86\\x86\\x86J.\\xffe\\xb2\\x00`\\xe9\\xd2\\xa5(\\t\\xfd\\xa7\\xe9\\xd3\\xcf\\xafZ%\\xb7q\\x08M,\\xd6\\xb1\\xb8\\xb8\\xc8\\x94\\x94\\x8a\\xc6F\\xe1Is*u\\x84\\xbe\\xbe\\x19\\x95jN\\xa5\\x9a\\xeb\\xeb\\xabS(\\xc555\\x8c\\xeajFu5\\xa3\\xaa\\xeaC]\\x9dpno\\xa0\\xad\\xbd\\xc4\\xc5%h\\xd6,\\xddAo\\xb2\\xbb'*j\\xff\\xcd\\x9b\\x00\\xe0\\xee\\xee\\x1e\\x1f\\x1f\\xff\\xc5\\x1f0\\x90\\x8a\\xac\\xce\\xceNWW\\xd7\\xf4\\xf4t\\x008\\x12\\x10\\xb0e\\xd6\\xacAZ\\t\\x00|\\x0c{\\xfa\\xee\\xdd\\x95\\xd4\\xd4\\x9b\\xe9\\xe9\\xd2\\xec\\x92\\xaaB&\\xcf\\x9e0a\\x89\\x8b\\xcb\\xb4\\xb1c\\xe5nt\\xa2\\xb8\\x94\\x92\\xb2\\xf4\\xcc\\x19\\x0c\\xc3\\xe8tzzz\\xba\\x96\\x14\\x8brR\\x91\\x05\\x00555\\xf6\\xf6\\xf6(\\x0e|\\x9d\\x87G\\xe8\\xb2e\\xfd\\xd7\\x04\\xe5C'\\x97\\xfb\\xf0\\xf5\\xeb\\xb7\\x15\\x15\\x1fjkKjk?\\xd4\\xd6\\x9654\\xf01l\\x98\\x96\\xd6\\x08}}s}}s*\\xd5j\\xf8p\\x0fkkEM\\xec1\\x0c\\xdb{\\xe3\\xc6\\x81[\\xb70\\x0c\\xd3\\xd2\\xd2\\xca\\xc8\\xc8\\x10.\\xcbK\\x86\\xb4d\\x01@nn\\xae\\xa7\\xa7'\\xda\\x12}\\xda\\xd8\\xb176o\\xfeJ\\xe3\\xccn\\x1e\\x8f\\xcb\\xe3}\\xa5\\x1d\\xbf\\xd9\\x9d\\x9dK\\xfe\\xf8\\x03\\xf5SZZZ\\xd1\\xd1\\xd1.R\\x87C\\xc9@\\x16\\x00TVV\\xfa\\xf9\\xf9\\xa1L\\xce\\x11\\xfa\\xfaq\\xdb\\xb7+jQ\\xf6\\xdb\\xa0\\xac\\xa1\\xc1'$\\x04\\xbd\\xfb\\xe8tzll\\xac\\x94u\"\nb'A\\xb6!\\xdc\\xf0\\xe1\\xc3SRR\\x90\\x0f\\xa7\\xb8\\xa6f\\xe2\\xae]\\xf7sse\\x92\\xf0\\xff\\x11\\xcf'\nb''\nb'\\xecw\\xeeDL\\xb9\\xbb\\xbb\\xa7\\xa7\\xa7\\xcb\\xc4\\x14\\xc8J\\x16\\x00(++\\xff\\xfd\\xf7\\xdf\\x07\\x0e\\x1c\\xc0\\xf5\\xec\\xeb\\x8c\\xf6\\x9a\\xfc/G\\xf8\\xe3\\xc7\\xd3\\xf6\\xefG[\\xd4\\x05\\x06\\x06\\xc6\\xc7\\xc7K\\xd3\\xa3\\xf7\\x81l\\xcdP\\x14w\\xee\\xdc\\t\\x08\\x08`\\xb3\\xd9\\x00\\xe0\\xef\\xe4t4 `0\\x83\\xf2\\xaf\\x87&\\x16k\\xd7\\xb5kh\\xdeG\"\\x91\\xce\\x9e=+y\\xe4)\\x01\\xf2\\x93\\x05\\x00yyy>>>eee\\x00\\xa0B&o\\xf4\\xf4\\xdc\\xee\\xe7\\'O\\xfa\\xd6\\xd7AGW\\xd7\\xc9\\xf8\\xf8\\x90\\x98\\x18\\xe4/\\xd3\\xd3\\xd3\\xbbu\\xeb\\x96\\x84\\xd9\\xcc\\x171(\\xb2\\x00\\xa0\\xae\\xaen\\xcd\\x9a5w\\xee\\xdcA\\x1f\\x87\\xa8\\xab\\x07\\xcf\\x9e\\xfd\\xb3\\x87\\x87\\xf4\\x9b\\xa6|'\nb'\\xf0\\xf8\\xfc\\xff<~\\xbc\\xf7\\xc6'\nb'\\xe1\\xbe\\xc9nnnaaa\\xb2\\xfepU\\x1f\\x0c\\x96,\\x84\\xe7\\xcf\\x9fo\\xdb\\xb6---'\nb'}4\\xd1\\xd3;\\xb0`\\x81\\xbf\\x93\\x93BF\\x8f\\xb2\"&+k\\xe7\\xd5\\xab\\xef++\\xd1Gkk\\xeb\\x90\\x90\\x90\\x81\\xbc.2A1d!DGG\\xef\\xdc\\xb9\\xb3\\xa0\\xa0\\x00}\\xb4\\xa6\\xd1\\xf6\\xcf\\x9f?\\xd3\\xd6v0\\xd3I\\xe9\\xc1\\xc7\\xb0\\xc7\\xf9\\xf9\\xbb\\xa3\\xa2\\xd0*\\x16\\x00\\xd0h\\xb4\\x03\\x07\\x0e,Z\\xb4HQ\\xd1\\x87\\x8a$\\x0b\\x00x<\\xde\\x85\\x0b\\x17\\xf6\\xee\\xdd+\\xfcA%-UUO[[?{\\xfb\\x1966'\nb'_\\x89\\x01\\x00\\x0e\\x97\\xfb\\xf0\\xf5\\xeb\\xe8\\xcc\\xcc\\xb8\\x97/\\xd1\\x1a2\\x00hkk\\xef\\xda\\xb5k\\xfd\\xfa\\xf5d\\x85z\\xeb\\x15L\\x16\\x02\\x9b\\xcd>q\\xe2\\xc4\\xe1\\xc3\\x87\\x99\"yVd\\x12\\xe9\\xfb1c\\xfc\\xec\\xed}\\xc6\\x8f\\xd7\\x97\\xfd\\xb5\\xdd\\x07\\xcdl\\xf6\\xdd\\x97/\\xa3\\xb3\\xb2\\x12ss\\x91\\xbb\\x06\\x81B\\xa1l\\xd8\\xb0a\\xe7\\xce\\x9dr\\x8c\\x0c\\xbe\\x88\\xafB\\x16BKKK\\\\\\\\\\\\LLLbb\"K\\xe472p8\\x9c\\xc3\\x88\\x11\\xde\\xdf}7\\xd6\\xd8\\xd8r\\xd803*U\\x9a\\xb7A7\\x8fWZ_\\xcf\\xa8\\xae~WQ\\x91\\xf0\\xeaU\\xca\\xfb\\xf7\\xa21\\x06\\x14'\nb'\\xc5\\xcd\\xcd\\xcd\\xd7\\xd7\\xd7\\xd7\\xd7W\\xef+\\xfc\\xc8\\x96\\xc0\\xf2\\xafG\\x96\\x10\\x9d\\x9d\\x9d\\xc9\\xc9\\xc9\\xb1\\xb1\\xb1\\xb1\\xb1\\xb1U\\xfd\\x02\\xc8\\tx\\xbc\\x89\\x9e\\x9e\\xe4\\x9f\\xec+ol\\xfcP[\\xdb?\\xb2VWW\\xd7\\xdb\\xdb\\xdb\\xd7\\xd7\\xd7\\xdd\\xdd}\\x90?N)'\nb'\\xbe\\x05YB`\\x18\\x96\\x9d\\x9d\\x1d\\x1b\\x1b\\x1b\\x13\\x13\\xf3Fd\\x1fgYaaa\\x81*\\x91\\xa3\\xa3\\xe37\\x0b\\x1d\\x87oL\\x96(ZZZ\\x18\\x0c\\x06\\xfa\\x99\\xd1\\xc2\\xc2\\xc2\\x8a\\x8a'\nb')\\x7ff\\xd4\\xd2\\xd2\\xf2\\xeb54\\xc9\\xf8\\x7f\\xba\\xe7w\\xc2\\x98Sl\\xa3\\x00\\x00\\x00\\x00IEND\\xaeB`\\x82'\nCaught requests exception: HTTPConnectionPool(host='httpbin.org', port=80): Read timed out. (read timeout=1)\n(Open file: /psf__requests/requests/models.py)\n(Current directory: /psf__requests)\nbash-$"
    }
  ]
}